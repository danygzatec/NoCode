{
    "0": {
        "Description": "Excel reader is a C# based tool designed to automate your spreadsheets, allowing you to automate the actions you make such as applying filters, running macros, or event copying information across files, making it easier for you having more than 160 functions available. This tool will help you reduce the time you invest in creating an automation with languages such as Visual Basic and start focusing instead in capturing all your process business rules. ",
        "Function": [{
            "CreationDate": "2017-Nov-13",
            "Description": "Adds a value at the end of the columns in a sheet, it can be one or more columns. Column A is index 1. Spaces between index and text are important.",
            "Example": ["Append from wsGE at [2 =\"='[zvf05_prueba.xls]Process'!$B$narow\",4 =\"='[zvf05_prueba.xls]Process'!$D$narow\"]\r", "Append from libro at [1 =\"Total\",2 =\"=Sum(B2:B4)\"]\r"],
            "Name": "Append",
            "Params": ["worksheetKey", "index", "text"],
            "ShortDescription": "Adds a value at the end of the columns in a sheet.",
            "Syntax": ["Append from <worksheetKey> at [<index1> =\"<text>\",<index2> =\"<text>\",...,<indexN> =\"<text>\"]"],
            "SyntaxDetail": [{
                "Instruction": "Append from <worksheetKey> at [<index1> =\"<text>\",<index2> =\"<text>\",...,<indexN> =\"<text>\"]"
            }]
        }, {
            "CreationDate": "2021-Oct-27",
            "Description": "Copies a cell or range from a table to another location or another table, just as ctrl+c ctrl+v would. CopyRange can be ranges such as A1:B12, A1,lastD or UsedRange. n. The available types are all, except_borders, column_widths, comments, formats, formulas, formulas_and_number_formats, validation, values, values_and_number_formats or no type. ",
            "Example": ["AppendTableRows values from hoja1 table Table1 range A6:lastD to hoja1 table Table2\r", "AppendTableRows all from hoja1 table Table1 range A6:lastD to hoja1 in column H\r", "AppendTableRows from hoja1 table Table1 range B6:lastD to hoja1 table Table2 in column 2\r", "AppendTableRows from hoja1 range A6:C8 to hoja1 table Table3\r", "AppendTableRows from hoja1 range A6:D12 to hoja1 table Table2 in column 1\r"],
            "Name": "AppendTableRows",
            "Params": ["worksheetKey", "type", "tablesource", "range", "worksheetKey2", "tabledestination", "column"],
            "ShortDescription": "Copies a cell or range from one table to another location in another table.",
            "Syntax": ["AppendTableRows from <worksheetKey> table <tablesource> range <Range> to <worksheetKey2> table <tabledestination>", "AppendTableRows from <worksheetKey> table <tablesource> range <Range> to <worksheetKey2> in column <column>", "AppendTableRows from <worksheetKey> table <tablesource> range <Range> to <worksheetKey2> table <tabledestination> in column <column>", "AppendTableRows from <worksheetKey> range <Range> to <worksheetKey2> table <tabledestination>", "AppendTableRows from <worksheetKey> range <Range> to <worksheetKey2> table <tabledestination> in column <column>", "AppendTableRows <type:all|except_borders|column_widths|comments|formats|formulas|formulas_and_number_formats|validation|values|values_and_number_formats|> from <worksheetKey> table <tablesource> range <Range> to <worksheetKey2> table <tabledestination>"],
            "SyntaxDetail": [{
                "Instruction": "AppendTableRows from <worksheetKey> table <tablesource> range <Range> to <worksheetKey2> table <tabledestination>"
            }, {
                "Instruction": "AppendTableRows from <worksheetKey> table <tablesource> range <Range> to <worksheetKey2> in column <column>"
            }, {
                "Instruction": "AppendTableRows from <worksheetKey> table <tablesource> range <Range> to <worksheetKey2> table <tabledestination> in column <column>"
            }, {
                "Instruction": "AppendTableRows from <worksheetKey> range <Range> to <worksheetKey2> table <tabledestination>"
            }, {
                "Instruction": "AppendTableRows from <worksheetKey> range <Range> to <worksheetKey2> table <tabledestination> in column <column>"
            }, {
                "Constants": [{
                    "Options": ["all", "except_borders", "column_widths", "comments", "formats", "formulas", "formulas_and_number_formats", "validation", "values", "values_and_number_formats", ""],
                    "ParamName": "type"
                }],
                "Instruction": "AppendTableRows <type:all|except_borders|column_widths|comments|formats|formulas|formulas_and_number_formats|validation|values|values_and_number_formats|> from <worksheetKey> table <tablesource> range <Range> to <worksheetKey2> table <tabledestination>"
            }]
        }, {
            "CreationDate": "2020-Nov-06",
            "Description": "Apply a filter to a column located in a given index. Index begins with 1.\\nCriteria refers to the word(s) used to apply the filter, use wildcard \"*\" to represent any series of characters, \"?\" to represent any single character in the criteria.\\nComparison operators may be used at the begining of the criteria to indicate the following: \"<>\" different than the criteria, \"<\" less than, \">\" more than, \"<=\" less or equal than,  \">=\" more or equal than, \"=\" equal, if not stated this is the default comparison operator.  \\nThere are options to filter by cellcolor or fontcolor, stating the RGB values in the criteria. \\nThe \"delete rows\" syntax will delete the rows that match the criteria. The \"copy their value\" syntax will create a List with the filtered values and save it in a given variable. Comparison operators are required in this syntax. Wildcard characters do not work in this syntax. \\nThe \"LetterIndex\" syntax takes the letter of the column instead of the index, and will write aditional numbers on a given columnIndex whenever the criteria is matched. \\nUp to two criteria can be stated, separated by \";\", corresponding number results must be indicated aswell. Wildcard characters do not work in this syntax. \\nTable syntaxes must be used when an excel table is involved and indexes start with 1 relative to the table, for instance if a table is in range D2:F10, index 1 will refer to column D.",
            "Example": ["ApplyFilter to the worksheet WSExampleName to the column with the index {2} with the criteria \"Error\"\r", "ApplyFilter to the worksheet WSExampleName to the column with the index {2} by cellcolor with the criteria \"255,255,0\"\r", "ApplyFilter to the worksheet WSExampleName in table {Table1} to the column with the index {2} with the criteria \"Si\"\r", "ApplyFilter to the worksheet WSExampleName in table {Table1} to the column with the index {2} with the criteria \"Si\" and delete the rows\r", "ApplyFilter to the worksheet WSExampleName to the column with the index {2} by cellcolor with the criteria \"NoFill\"\r", "ApplyFilter to the worksheet WSExampleName to the column with the index {2} with the criteria \"Error\" and delete the rows\r", "ApplyFilter to the worksheet WSExampleName to the column with the index {2} by fontcolor with the criteria \"255,0,255\" and delete the rows\r", "ApplyFilter to the worksheet WSExampleName to the column with the index {2} by fontcolor with the criteria \"Automatic\" and delete the rows\r", "ApplyFilter to the worksheet WSExampleName to the column with the index {2} with the criteria \"=Err*\" and copy their value on \"ExcelVariable\"\r", "ApplyFilter to the worksheet WSExampleName to the column with the index {2} with the criteria \"<>1\" and copy their value on \"ExcelVariable\"\r", "ApplyFilter to the worksheet WSExampleName to the column with the index {2} with the criteria \">=0\" and copy their value on \"ExcelVariable\"\r", "ApplyFilter to the worksheet WSExampleName to the column with the LetterIndex {P} with the criteria \"<20\" and write on the column {18}\r", "ApplyFilter to the worksheet WSExampleName to the column with the LetterIndex {P} with the criteria \"=\"Error\"\" and write on the column {18} \"-1\"\r", "ApplyFilter to the worksheet WSExampleName to the column with the LetterIndex {P} with the criteria \"=\"Error\";=\"Succes\"\" and write on the column {18} \"-1;1\"\r"],
            "ExtraDocs": "https://innotekfilestore.file.core.windows.net/frida-docs/Readers/Excel/Articles/ApplyFilter.pdf",
            "Name": "ApplyFilter",
            "Params": ["worksheetKey", "columnIndex", "columnLetterIndex", "criteria", "saveVariable", "columnIndex", "numberValue", "tableName"],
            "ShortDescription": "Filter a column by a certain criteria.",
            "Syntax": ["ApplyFilter to the worksheet <worksheetKey> to the column with the index {<columnIndex>} with the criteria \"<criteria>\"", "ApplyFilter to the worksheet <worksheetKey> in table {<tableName>} to the column with the index {<columnIndex>} with the criteria \"<criteria>\"", "ApplyFilter to the worksheet <worksheetKey> in table {<tableName>} to the column with the index {<columnIndex>} with the criteria \"<criteria>\" and delete rows", "ApplyFilter to the worksheet <worksheetKey> to the column with the index {<columnIndex>} with the criteria \"<criteria>\" and delete the rows", "ApplyFilter to the worksheet <worksheetKey> to the column with the index {<columnIndex>} with the criteria \"<criteria>\" and copy their value on \"<saveVariable>\"", "ApplyFilter to the worksheet <worksheetKey> in table {<tableName>} to the column with the index {<columnIndex>} by <criteriaOption:cellcolor|fontcolor> with the criteria \"<criteria:R,G,B|Automatic|NoFill>\"", "ApplyFilter to the worksheet <worksheetKey> to the column with the index {<columnIndex>} by <criteriaOption:cellcolor|fontcolor> with the criteria \"<criteria:R,G,B|Automatic|NoFill>\" and delete the rows", "ApplyFilter to the worksheet <worksheetKey> in table {<tableName>} to the column with the index {<columnIndex>} by <criteriaOption:cellcolor|fontcolor> with the criteria \"<criteria:R,G,B|Automatic|NoFill>\" and delete the rows", "ApplyFilter to the worksheet <worksheetKey> to the column with the LetterIndex {<columnLetterIndex>} with the criteria \"<criteria>\" and write on the column {<columnIndex>} \"<numberValue>\""],
            "SyntaxDetail": [{
                "Instruction": "ApplyFilter to the worksheet <worksheetKey> to the column with the index {<columnIndex>} with the criteria \"<criteria>\""
            }, {
                "Instruction": "ApplyFilter to the worksheet <worksheetKey> in table {<tableName>} to the column with the index {<columnIndex>} with the criteria \"<criteria>\""
            }, {
                "Instruction": "ApplyFilter to the worksheet <worksheetKey> in table {<tableName>} to the column with the index {<columnIndex>} with the criteria \"<criteria>\" and delete rows"
            }, {
                "Instruction": "ApplyFilter to the worksheet <worksheetKey> to the column with the index {<columnIndex>} with the criteria \"<criteria>\" and delete the rows"
            }, {
                "Instruction": "ApplyFilter to the worksheet <worksheetKey> to the column with the index {<columnIndex>} with the criteria \"<criteria>\" and copy their value on \"<saveVariable>\""
            }, {
                "Constants": [{
                    "Options": ["cellcolor", "fontcolor"],
                    "ParamName": "criteriaOption"
                }, {
                    "Options": ["R,G,B", "Automatic", "NoFill"],
                    "ParamName": "criteria"
                }],
                "Instruction": "ApplyFilter to the worksheet <worksheetKey> in table {<tableName>} to the column with the index {<columnIndex>} by <criteriaOption:cellcolor|fontcolor> with the criteria \"<criteria:R,G,B|Automatic|NoFill>\""
            }, {
                "Constants": [{
                    "Options": ["cellcolor", "fontcolor"],
                    "ParamName": "criteriaOption"
                }, {
                    "Options": ["R,G,B", "Automatic", "NoFill"],
                    "ParamName": "criteria"
                }],
                "Instruction": "ApplyFilter to the worksheet <worksheetKey> to the column with the index {<columnIndex>} by <criteriaOption:cellcolor|fontcolor> with the criteria \"<criteria:R,G,B|Automatic|NoFill>\" and delete the rows"
            }, {
                "Constants": [{
                    "Options": ["cellcolor", "fontcolor"],
                    "ParamName": "criteriaOption"
                }, {
                    "Options": ["R,G,B", "Automatic", "NoFill"],
                    "ParamName": "criteria"
                }],
                "Instruction": "ApplyFilter to the worksheet <worksheetKey> in table {<tableName>} to the column with the index {<columnIndex>} by <criteriaOption:cellcolor|fontcolor> with the criteria \"<criteria:R,G,B|Automatic|NoFill>\" and delete the rows"
            }, {
                "Instruction": "ApplyFilter to the worksheet <worksheetKey> to the column with the LetterIndex {<columnLetterIndex>} with the criteria \"<criteria>\" and write on the column {<columnIndex>} \"<numberValue>\""
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/frida-docs/Readers/Excel/Videos/ApplyFilter.mp4"]
        }, {
            "CreationDate": "2020-Nov-06",
            "Description": "Apply a filter to a column located in a given index starting at a desired row. Index begins with 1. \\nCriteria refers to the word(s) used to apply the filter, use wildcard \"*\" to represent any series of characters, \"?\" to represent any single character in the criteria. \\nComparison operators may be used at the begining of the criteria to indicate the following: \"<>\" different than the criteria, \"<\" less than, \">\" more than, \"<=\" less or equal than,  \">=\" more or equal than, \"=\" equal, if not stated this is the default comparison operator.",
            "Example": ["ApplyFilterStartAt to the worksheet {WSExampleName} start at row {5} to the column with the index {2} with the criteria \"Error\"\r", "ApplyFilterStartAt to the worksheet {WSExampleName} start at row {5} to the column with the index {2} by cellcolor with the criteria \"255,255,0\"\r", "ApplyFilterStartAt to the worksheet {WSExampleName} start at row {5} to the column with the index {2} by cellcolor with the criteria \"NoFill\"\r", "ApplyFilterStartAt to the worksheet {WSExampleName} start at row {5} to the column with the index {2} with the criteria \"Error\" and delete the rows\r", "ApplyFilterStartAt to the worksheet {WSExampleName} start at row {5} to the column with the index {2} by fontcolor with the criteria \"255,0,255\" and delete the rows\r", "ApplyFilterStartAt to the worksheet {WSExampleName} start at row {5} to the column with the index {2} by fontcolor with the criteria \"Automatic\" and delete the rows\r", "ApplyFilterStartAt to the worksheet {WSExampleName} start at row {5} to the column with the index {2} with the criteria \"=Err*\" and copy their value on \"ExcelVariable\"\r", "ApplyFilterStartAt to the worksheet {WSExampleName} start at row {5} to the column with the index {2} with the criteria \"<>1\" and copy their value on \"ExcelVariable\"\r", "ApplyFilterStartAt to the worksheet {WSExampleName} start at row {5} to the column with the index {2} with the criteria \">=0\" and copy their value on \"ExcelVariable\"\r", "ApplyFilterStartAt to the worksheet {WSExampleName} start at row {5} to the column with the LetterIndex {P} with the criteria \"<20\" and write on the column {18}\r", "ApplyFilterStartAt to the worksheet {WSExampleName} start at row {5} to the column with the LetterIndex {P} with the criteria \"=\"Error\"\" and write on the column {18} \"-1\"\r", "ApplyFilterStartAt to the worksheet {WSExampleName} start at row {5} to the column with the LetterIndex {P} with the criteria \"=\"Error\";=\"Succes\"\" and write on the column {18} \"-1;1\"\r"],
            "Name": "ApplyFilterStartAt",
            "Params": ["worksheetKey", "columnIndex", "rowIndex", "columnLetterIndex", "criteria", "saveVariable", "numberValue"],
            "ShortDescription": "Filter a column by a certain criteria starting in a given row.",
            "Syntax": ["ApplyFilterStartAt to the worksheet {<worksheetKey>} start at row {<rowIndex>} to the column with the index {<columnIndex>} with the criteria \"<criteria>\"", "ApplyFilterStartAt to the worksheet {<worksheetKey>} start at row {<rowIndex>} to the column with the index {<columnIndex>} with the criteria \"<criteria>\" and copy their value on \"<SaveVariable>\"", "ApplyFilterStartAt to the worksheet {<worksheetKey>} start at row {<rowIndex>} to the column with the index {<columnIndex>} with the criteria \"<criteria>\" and delete the rows", "ApplyFilterStartAt to the worksheet {<worksheetKey>} start at row {<rowIndex>} to the column with the index {<columnIndex>} by <criteriaOption:cellcolor|fontcolor> with the criteria \"<criteria:R,G,B|Automatic|NoFill>\"", "ApplyFilterStartAt to the worksheet {<worksheetKey>} start at row {<rowIndex>} to the column with the LetterIndex {<columnLetterIndex>} with the criteria \"<criteria>\" and write on the column {<columnIndex>} \"<numberValue>\""],
            "SyntaxDetail": [{
                "Instruction": "ApplyFilterStartAt to the worksheet {<worksheetKey>} start at row {<rowIndex>} to the column with the index {<columnIndex>} with the criteria \"<criteria>\""
            }, {
                "Instruction": "ApplyFilterStartAt to the worksheet {<worksheetKey>} start at row {<rowIndex>} to the column with the index {<columnIndex>} with the criteria \"<criteria>\" and copy their value on \"<SaveVariable>\""
            }, {
                "Instruction": "ApplyFilterStartAt to the worksheet {<worksheetKey>} start at row {<rowIndex>} to the column with the index {<columnIndex>} with the criteria \"<criteria>\" and delete the rows"
            }, {
                "Constants": [{
                    "Options": ["cellcolor", "fontcolor"],
                    "ParamName": "criteriaOption"
                }, {
                    "Options": ["R,G,B", "Automatic", "NoFill"],
                    "ParamName": "criteria"
                }],
                "Instruction": "ApplyFilterStartAt to the worksheet {<worksheetKey>} start at row {<rowIndex>} to the column with the index {<columnIndex>} by <criteriaOption:cellcolor|fontcolor> with the criteria \"<criteria:R,G,B|Automatic|NoFill>\""
            }, {
                "Instruction": "ApplyFilterStartAt to the worksheet {<worksheetKey>} start at row {<rowIndex>} to the column with the LetterIndex {<columnLetterIndex>} with the criteria \"<criteria>\" and write on the column {<columnIndex>} \"<numberValue>\""
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/frida-docs/Readers/Excel/Videos/ApplyFilterStartAt.mov"]
        }, {
            "CreationDate": "2019-Jun-04",
            "Description": "Apply a filter to a column by their index, it considers intermediate empty cells. Matching results are saved un a given Variable. Index starts from 1. Criteria must start with a comparison operator (=,<>,<,<=,>,>=).",
            "Example": ["ApplyFilterWithEmpty to the worksheet {sheet} to the column with the index {3} with the criteria {=VALUE} and copy their value on {filtrado}\r"],
            "Name": "ApplyFilterWithEmpty",
            "Params": ["worksheetKey", "columnIndex", "criteria", "variableName"],
            "ShortDescription": "Filter a column considering empty intermediate cells.",
            "Syntax": ["ApplyFilterWithEmpty to the worksheet {<worksheetKey>} to the column with the index {<columnIndex>} with the criteria {<criteria>} and copy their value on {<variableName>}"],
            "SyntaxDetail": [{
                "Instruction": "ApplyFilterWithEmpty to the worksheet {<worksheetKey>} to the column with the index {<columnIndex>} with the criteria {<criteria>} and copy their value on {<variableName>}"
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/frida-docs/Readers/Excel/Videos/ApplyFilterWithEmpty.mp4"]
        }, {
            "CreationDate": "2018-Feb-06",
            "Description": "Apply format to a given column index or heading. Format is applied only to filled in cells, to apply to the whole column use \"all\" syntax. Index starts with 1. The link describes the different format options available. https://exceljet.net/custom-number-formats",
            "Example": ["ApplyFormat from sheet1WS in_column_index 15 format General\r", "ApplyFormat from sheet1WS in_column \"UnTexto\" all format @\r", "ApplyFormat from sheet1WS in_column \"NumeroConDecimales\" format ##.00\r", "ApplyFormat from sheet1WS in_column \"Horas\" format hh:mm:ss\r", "ApplyFormat from \"sheet1WS\" in_column_index \"15\" from row \"100\" to \"110\" format \"General\"\r"],
            "Name": "ApplyFormat",
            "Params": ["worksheetKey", "columnIndex", "rowindex", "format", "columnName"],
            "ShortDescription": "Apply format to a given column.",
            "Syntax": ["ApplyFormat from <worksheetKey> in_column_index <columnIndex> format <format>", "ApplyFormat from <worksheetKey> in_column_index <columnIndex> all format <format>", "ApplyFormat from <worksheetKey> in_column \"<columnName>\" format <format>", "ApplyFormat from <worksheetKey> in_column \"<columnName>\" all format <format>", "ApplyFormat from \"<worksheetKey>\" in_column_index \"<columnIndex>\" from row \"<rowIndex>\" to \"<rowIndex>\" format \"<format>\""],
            "SyntaxDetail": [{
                "Instruction": "ApplyFormat from <worksheetKey> in_column_index <columnIndex> format <format>"
            }, {
                "Instruction": "ApplyFormat from <worksheetKey> in_column_index <columnIndex> all format <format>"
            }, {
                "Instruction": "ApplyFormat from <worksheetKey> in_column \"<columnName>\" format <format>"
            }, {
                "Instruction": "ApplyFormat from <worksheetKey> in_column \"<columnName>\" all format <format>"
            }, {
                "Instruction": "ApplyFormat from \"<worksheetKey>\" in_column_index \"<columnIndex>\" from row \"<rowIndex>\" to \"<rowIndex>\" format \"<format>\""
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/frida-docs/Readers/Excel/Videos/ApplyFormat.mp4"]
        }, {
            "CreationDate": "2020-Jul-02",
            "Description": "Applies a desired format to a full column, this sintax works for empty columns. Index starts with 1. The link describes the different format options available. https://exceljet.net/custom-number-formats",
            "Example": ["ApplyFormatFullColumn from sheet1WS in_column_index 15 format General\r", "ApplyFormatFullColumn from sheet1WS in_column \"UnTexto\" format @\r", "ApplyFormatFullColumn from sheet1WS in_column \"NumeroConDecimales\" format ##.00\r", "ApplyFormatFullColumn from sheet1WS in_column \"Horas\" format hh:mm:ss\r"],
            "Name": "ApplyFormatFullColumn",
            "Params": ["worksheetKey", "columnIndex", "format", "columnName"],
            "ShortDescription": "Apply a format to a whole column.",
            "Syntax": ["ApplyFormatFullColumn from <worksheetKey> in_column_index <columnIndex> format <format>", "ApplyFormatFullColumn from <worksheetKey> in_column \"<columnName>\" format <format>"],
            "SyntaxDetail": [{
                "Instruction": "ApplyFormatFullColumn from <worksheetKey> in_column_index <columnIndex> format <format>"
            }, {
                "Instruction": "ApplyFormatFullColumn from <worksheetKey> in_column \"<columnName>\" format <format>"
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/frida-docs/Readers/Excel/Videos/ApplyFormatFullColumn.mp4"]
        }, {
            "CreationDate": "2021-Jul-12",
            "Description": "Filter a specific pivot table by pivot table name, field, and search criteria. ReadPivotTable instruction must be used prior applying any filter. Use \"(All)\" criteria to filter all values of the given field name.",
            "Example": ["Excel ReadPivotTable \"DynamicTable1\" From WSTable As TD1\r", "Excel ApplyPivotTableFilter to the table {TD1} in field {Country} with the criteria {USA}\r", "Excel ApplyPivotTableFilter to the table {TD1} in field {Country} with the criteria {USA;Mexico;Poland}\r", "Excel ApplyPivotTableFilter to the table {TD1} in field {Country} with the criteria {(All)}\r"],
            "ExtraDocs": "https://innotekfilestore.file.core.windows.net/frida-docs/Readers/Excel/Articles/Tablas%20Pivote.pdf",
            "Name": "ApplyPivotTableFilter",
            "Params": ["pivotTableName", "pivotTableFieldName", "criteria"],
            "ShortDescription": "Filter an existing pivot table.",
            "Syntax": ["ApplyPivotTableFilter to the table {<pivotTableName>} in field {<pivotTableFieldName>} with the criteria {<criteria1;criteria2;...criteriaN|(All)>}"],
            "SyntaxDetail": [{
                "Instruction": "ApplyPivotTableFilter to the table {<pivotTableName>} in field {<pivotTableFieldName>} with the criteria {<criteria1;criteria2;...criteriaN|(All)>}"
            }]
        }, {
            "CreationDate": "2019-Dec-18",
            "Description": "Looks for minNumber of contiguous values in a given column, starting at a given row, saving a list variable defined by variableKey where it stores the row index of the first occurrence found and the row index where the occurrence chaged its value. For instance, supose minNumber is 2 and Cells A3 to A6 have the value \"Yes\" and A7 the value \"No\". Given that it was looking for at least 2 values to be repeated, the result would return [3,7] meaning cells in 3,4,5,6 have the same value. The parameter \"reverse\" will return [7,3] in this example.",
            "Example": ["ArrangeByData {hoja} in_column_index {5} start_at {2} min_number {3} save_as {grupo} none\r", "ArrangeByData {hoja} in_column_index {5} start_at {2} min_number {3} save_as {grupo} reverse\r"],
            "Name": "ArrangeByData",
            "Params": ["worksheetKey", "columnIndex", "rowIndex", "minNumber", "variableKey", "direction"],
            "ShortDescription": "Looks for repeated contiguous data in a column.",
            "Syntax": ["ArrangeByData {<worksheetKey>} in_column_index {<columnIndex>} start_at {<rowIndex>} min_number {<minNumber>} save_as {<variableKey>} <direction:none|reverse>"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["none", "reverse"],
                    "ParamName": "direction"
                }],
                "Instruction": "ArrangeByData {<worksheetKey>} in_column_index {<columnIndex>} start_at {<rowIndex>} min_number {<minNumber>} save_as {<variableKey>} <direction:none|reverse>"
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/frida-docs/Readers/Excel/Videos/ArrangeByData.mp4"]
        }, {
            "CreationDate": "2021-Mar-30",
            "Description": "Display the data labels for a given series in an orderly presentation chart.Series are identified by index starting with 1.",
            "Example": ["ArrangeChartLabels in graf series 1 with color 1\r", "ArrangeChartLabels in graf series 2 with color 2\r"],
            "Name": "ArrangeChartLabels",
            "Params": ["chartKey", "seriesNumber", "colorNumber"],
            "ShortDescription": "Show data labels in an ordered chart",
            "Syntax": ["ArrangeChartLabels in <chartKey> series <seriesNumber> with color <colorNumber>"],
            "SyntaxDetail": [{
                "Instruction": "ArrangeChartLabels in <chartKey> series <seriesNumber> with color <colorNumber>"
            }]
        }, {
            "CreationDate": "2017-Nov-13",
            "Description": "Fills the column or row with the formula and value that contains the original cell. Range values can use the word \"UsedRange\" which indicates all cells modified in the sheet. \\nStart_at syntax must use A1 type values and is only taken into account when used together with \"UsedRange\" parameter. \\nDirection values can be (down,up,right,left). To clarify, direction \"up\" from range A3:A10 will use the contents and format of downmost cell, which is A10 and fill with it the rest of cells in the range. \\nIn_sheet syntax without \"direction\" parameter only works for ranges within the same column. \\nStart_from syntax can use the following incrementTypes fillSeries, flashfill, formats, values, days, months, years, weekdays. Start_from can be cells or ranges.",
            "Example": ["AutoFill Hoja range A1:G20 direction down\r", "AutoFill Hoja range A1:G20 start_from A1:A20 direction right autoincrement FillSeries\r", "AutoFill Hoja range UsedRange start_from B2:B2 direction down\r", "AutoFill Hoja range UsedRange start_from A1:A20 direction right autoincrement default\r", "AutoFill Hoja range UsedRange start_from A1 direction down\r", "AutoFill Hoja range F3:F25 start_from F3 direction right autoincrement\r", "AutoFill in_sheet Hoja using_range_from F3:F25        \r", "AutoFill in_sheet Hoja using range_from F3:F25 direction down\r", "AutoFill in_sheet Hoja using range_from F3:F25 start_at F3\r", "AutoFill in Hoja range UsedRange start_at F3\r", "AutoFill in Hoja range UsedRange start_at F3 direction right\r"],
            "ExtraDocs": "https://innotekfilestore.file.core.windows.net/frida-docs/Readers/Excel/Articles/AutoFill.pdf",
            "Name": "AutoFill",
            "Params": ["worksheetKey", "range", "cell", "startRange", "direction", "incrementType"],
            "ShortDescription": "Fill the selected range with the incremental or fixed values.",
            "Syntax": ["AutoFill <worksheetKey> range UsedRange start_from <startRange> direction <direction:down|up|right|left>", "AutoFill <worksheetKey> range UsedRange start_from <startRange> direction <direction:down|up|right|left> autoincrement <incrementType:fillSeries|flashfill|formats|values|days|months|years|weekdays>", "AutoFill <worksheetKey> range <range> start_from <startRange> direction <direction:down|up|right|left> autoincrement <incrementType:fillSeries|flashfill|formats|values|days|months|years|weekdays>", "AutoFill <worksheetKey> range <range> direction <direction:down|up|right|left>", "AutoFill in_sheet <worksheetKey> using_range_from <range>", "AutoFill in_sheet <worksheetKey> using_range_from <range> direction <direction:down|up|right|left>", "AutoFill in_sheet <worksheetKey> using_range_from <range> start_at <cell>", "AutoFill in <worksheetKey> range <range> start_at <cell>", "AutoFill in <worksheetKey> range <range> start_at <cell> direction <direction:down|up|right|left>"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["down", "up", "right", "left"],
                    "ParamName": "direction"
                }],
                "Instruction": "AutoFill <worksheetKey> range UsedRange start_from <startRange> direction <direction:down|up|right|left>"
            }, {
                "Constants": [{
                    "Options": ["down", "up", "right", "left"],
                    "ParamName": "direction"
                }, {
                    "Options": ["fillSeries", "flashfill", "formats", "values", "days", "months", "years", "weekdays"],
                    "ParamName": "incrementType"
                }],
                "Instruction": "AutoFill <worksheetKey> range UsedRange start_from <startRange> direction <direction:down|up|right|left> autoincrement <incrementType:fillSeries|flashfill|formats|values|days|months|years|weekdays>"
            }, {
                "Constants": [{
                    "Options": ["down", "up", "right", "left"],
                    "ParamName": "direction"
                }, {
                    "Options": ["fillSeries", "flashfill", "formats", "values", "days", "months", "years", "weekdays"],
                    "ParamName": "incrementType"
                }],
                "Instruction": "AutoFill <worksheetKey> range <range> start_from <startRange> direction <direction:down|up|right|left> autoincrement <incrementType:fillSeries|flashfill|formats|values|days|months|years|weekdays>"
            }, {
                "Constants": [{
                    "Options": ["down", "up", "right", "left"],
                    "ParamName": "direction"
                }],
                "Instruction": "AutoFill <worksheetKey> range <range> direction <direction:down|up|right|left>"
            }, {
                "Instruction": "AutoFill in_sheet <worksheetKey> using_range_from <range>"
            }, {
                "Constants": [{
                    "Options": ["down", "up", "right", "left"],
                    "ParamName": "direction"
                }],
                "Instruction": "AutoFill in_sheet <worksheetKey> using_range_from <range> direction <direction:down|up|right|left>"
            }, {
                "Instruction": "AutoFill in_sheet <worksheetKey> using_range_from <range> start_at <cell>"
            }, {
                "Instruction": "AutoFill in <worksheetKey> range <range> start_at <cell>"
            }, {
                "Constants": [{
                    "Options": ["down", "up", "right", "left"],
                    "ParamName": "direction"
                }],
                "Instruction": "AutoFill in <worksheetKey> range <range> start_at <cell> direction <direction:down|up|right|left>"
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/frida-docs/Readers/Excel/Videos/AutoFill.mp4"]
        }, {
            "CreationDate": "2017-Aug-23",
            "Description": "Autofit cell widths or heights in a worksheet, it can be in the entire worksheet, by column or by row.",
            "Example": ["AutoFit WSvar\r", "AutoFit WSvar by column\r", "AutoFit WSvar by row\r"],
            "Name": "AutoFit",
            "Params": ["worksheetKey"],
            "ShortDescription": "Re-dimension cell widths or heights in a worksheet.",
            "Syntax": ["AutoFit <worksheetKey>", "AutoFit <worksheetKey> by column", "AutoFit <worksheetKey> by row"],
            "SyntaxDetail": [{
                "Instruction": "AutoFit <worksheetKey>"
            }, {
                "Instruction": "AutoFit <worksheetKey> by column"
            }, {
                "Instruction": "AutoFit <worksheetKey> by row"
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/frida-docs/Readers/Excel/Videos/AutoFit.mp4"]
        }, {
            "CreationDate": "2019-Jun-06",
            "Description": "Changes the background color of a specific cell, range, rows or columns. It has the posibility to change only the visible cells of a filtered range, columns or rows. For the colors available refer to: \"https://docs.microsoft.com/en-us/dotnet/api/system.drawing.knowncolor?view=netframework-4.8\". Index starts with 1.",
            "Example": ["BackgroundColor from {Wsheet1} cell {B5} to {255,255,255}        \r", "BackgroundColor from {Wsheet1} range {B5:D5} to {255,255,255}\r", "BackgroundColor from {Wsheet1} range {B5:D5} to {Blue}\r", "BackgroundColor from {Wsheet1} column {1} start_at {2} to {255,255,255}\r", "BackgroundColor from {Wsheet1} column {1,4,7} start_at {2} to {Red}\r", "BackgroundColor from {Wsheet1} row {1} start_at {1} to {255,255,255}\r", "BackgroundColor from {Wsheet1} row {5,9,14} start_at {1} to {Green} visible\r"],
            "Name": "BackgroundColor",
            "Params": ["worksheetKey", "cellName", "columnIndex", "rowIndex", "colorNameOrRGB", "visibleFlag"],
            "ShortDescription": "Changes the background color of one or more cells.",
            "Syntax": ["BackgroundColor from {<worksheetKey>} cell {<cellName>} to {<colorNameOrRGB:R,G,B|colorName>}", "BackgroundColor from {<worksheetKey>} range {<range>} to {<colorNameOrRGB:R,G,B|colorName>}", "BackgroundColor from {<worksheetKey>} column {<columnIndex>} start_at {<rowIndex>} to {<colorNameOrRGB:R,G,B|colorName>} <visibleFlag:visible|>", "BackgroundColor from {<worksheetKey>} column {<columnIndex>,<columnIndex>,<columnIndex>} start_at {<rowIndex>} to {<colorNameOrRGB:R,G,B|colorName>} <visibleFlag:visible|>", "BackgroundColor from {<worksheetKey>} row {<rowIndex>} start_at {<columnIndex>} to {<colorNameOrRGB:R,G,B|colorName>} <visibleFlag:visible|>", "BackgroundColor from {<worksheetKey>} row {<rowIndex>,<rowIndex>,<rowIndex>} start_at {<columnIndex>} to {<colorNameOrRGB:R,G,B|colorName>} <visibleFlag:visible|>"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["R,G,B", "colorName"],
                    "ParamName": "colorNameOrRGB"
                }],
                "Instruction": "BackgroundColor from {<worksheetKey>} cell {<cellName>} to {<colorNameOrRGB:R,G,B|colorName>}"
            }, {
                "Constants": [{
                    "Options": ["R,G,B", "colorName"],
                    "ParamName": "colorNameOrRGB"
                }],
                "Instruction": "BackgroundColor from {<worksheetKey>} range {<range>} to {<colorNameOrRGB:R,G,B|colorName>}"
            }, {
                "Constants": [{
                    "Options": ["R,G,B", "colorName"],
                    "ParamName": "colorNameOrRGB"
                }, {
                    "Options": ["visible", ""],
                    "ParamName": "visibleFlag"
                }],
                "Instruction": "BackgroundColor from {<worksheetKey>} column {<columnIndex>} start_at {<rowIndex>} to {<colorNameOrRGB:R,G,B|colorName>} <visibleFlag:visible|>"
            }, {
                "Constants": [{
                    "Options": ["R,G,B", "colorName"],
                    "ParamName": "colorNameOrRGB"
                }, {
                    "Options": ["visible", ""],
                    "ParamName": "visibleFlag"
                }],
                "Instruction": "BackgroundColor from {<worksheetKey>} column {<columnIndex>,<columnIndex>,<columnIndex>} start_at {<rowIndex>} to {<colorNameOrRGB:R,G,B|colorName>} <visibleFlag:visible|>"
            }, {
                "Constants": [{
                    "Options": ["R,G,B", "colorName"],
                    "ParamName": "colorNameOrRGB"
                }, {
                    "Options": ["visible", ""],
                    "ParamName": "visibleFlag"
                }],
                "Instruction": "BackgroundColor from {<worksheetKey>} row {<rowIndex>} start_at {<columnIndex>} to {<colorNameOrRGB:R,G,B|colorName>} <visibleFlag:visible|>"
            }, {
                "Constants": [{
                    "Options": ["R,G,B", "colorName"],
                    "ParamName": "colorNameOrRGB"
                }, {
                    "Options": ["visible", ""],
                    "ParamName": "visibleFlag"
                }],
                "Instruction": "BackgroundColor from {<worksheetKey>} row {<rowIndex>,<rowIndex>,<rowIndex>} start_at {<columnIndex>} to {<colorNameOrRGB:R,G,B|colorName>} <visibleFlag:visible|>"
            }]
        }, {
            "CreationDate": "2020-Jun-19",
            "Description": "Binds fields from the XML map to Excel columns or cells. Use cell syntax for single non repiting elements in an XML. \\nWhen using repeating elements, use column syntax to bind the whole column to the field. XPath is used indicate the exact field in the loaded XML to be binded. \\nQuery syntax from xpath can not be used. Has headings syntax is used when the column starts with a heading, so it will be omitted from the binding.",
            "Example": ["BindXMLField \"/factura/informacionpersonal/curp\" in wbFacturas sheet wsSheet to cell {1,2}\r", "BindXMLField \"/factura/cuenta/clabe\" in wbFacturas sheet wsSheet to column {1}\r"],
            "Name": "BindXMLField",
            "Params": ["xpath", "workbookKey", "worksheetKey", "rowIndex", "columnIndex"],
            "ShortDescription": "Binds fields from the XML map to Excel columns or cells.",
            "Syntax": ["BindXMLField \"<xpath>\" in <workbookKey> sheet <worksheetKey> to cell {<rowIndex>,<columnIndex>}", "BindXMLField \"<xpath>\" in <workbookKey> sheet <worksheetKey> to column {<columnIndex>}", "BindXMLField \"<xpath>\" in <workbookKey> sheet <worksheetKey> to column {<columnIndex>} has heading"],
            "SyntaxDetail": [{
                "Instruction": "BindXMLField \"<xpath>\" in <workbookKey> sheet <worksheetKey> to cell {<rowIndex>,<columnIndex>}"
            }, {
                "Instruction": "BindXMLField \"<xpath>\" in <workbookKey> sheet <worksheetKey> to column {<columnIndex>}"
            }, {
                "Instruction": "BindXMLField \"<xpath>\" in <workbookKey> sheet <worksheetKey> to column {<columnIndex>} has heading"
            }]
        }, {
            "CreationDate": "2017-Aug-01",
            "Description": "Loads a table in cache, this is the first step to use Pivot Tables. \\nFirstCell indicates the top, leftmost cell in the table range and finalCell is the bottom, rightmost cell. Following step is to use CreatePivotTable. \\nIf its necessary to specify the pivot table version use the syntax option with the version field. The option that can be used in the PivotTableVersion field are xlPivotTableVersion10, xlPivotTableVersion11, xlPivotTableVersion12, xlPivotTableVersion13, xlPivotTableVersion14, xlPivotTableVersion15, xlPivotTableVersion2000 and xlPivotTableVersionCurrent. \\nFor more information about PivotTableVersions open this link \"https://docs.microsoft.com/en-us/office/vba/api/excel.xlpivottableversionlist\".",
            "Example": ["CachePivotTable Libro1 in Sheet1key from UsedRange as CachePT1\r", "CachePivotTable Libro1 in Sheet1key from A1 to F20 as CachePT1\r", "CachePivotTable Libro1 in Sheet1key from UsedRange as CachePT1 version xlPivotTableVersion14\r", "CachePivotTable Libro1 in Sheet1key from A1 to F20 as CachePT1 version xlPivotTableVersion15\r"],
            "ExtraDocs": "https://innotekfilestore.file.core.windows.net/frida-docs/Readers/Excel/Articles/Tablas%20Pivote.pdf",
            "Name": "CachePivotTable",
            "Params": ["workbookKey", "worksheetKey", "firstCell", "finalCell", "cachePTkey", "PivotTableVersion"],
            "ShortDescription": "Loads a table in cache to use Pivot Tables.",
            "Syntax": ["CachePivotTable <workbookKey> in <worksheetKey> from UsedRange as <cachePTkey>", "CachePivotTable <workbookKey> in <worksheetKey> from <firstCell> to <finalCell> as <cachePTkey>", "CachePivotTable <workbookKey> in <worksheetKey> from UsedRange as <cachePTkey> version <PivotTableVersion:xlPivotTableVersion10|xlPivotTableVersion11|xlPivotTableVersion12|xlPivotTableVersion13|xlPivotTableVersion14|xlPivotTableVersion15|xlPivotTableVersion2000|xlPivotTableVersionCurrent>", "CachePivotTable <workbookKey> in <worksheetKey> from <firstCell> to <finalCell> as <cachePTkey> version <PivotTableVersion::xlPivotTableVersion10|xlPivotTableVersion11|xlPivotTableVersion12|xlPivotTableVersion13|xlPivotTableVersion14|xlPivotTableVersion15|xlPivotTableVersion2000|xlPivotTableVersionCurrent>"],
            "SyntaxDetail": [{
                "Instruction": "CachePivotTable <workbookKey> in <worksheetKey> from UsedRange as <cachePTkey>"
            }, {
                "Instruction": "CachePivotTable <workbookKey> in <worksheetKey> from <firstCell> to <finalCell> as <cachePTkey>"
            }, {
                "Constants": [{
                    "Options": ["xlPivotTableVersion10", "xlPivotTableVersion11", "xlPivotTableVersion12", "xlPivotTableVersion13", "xlPivotTableVersion14", "xlPivotTableVersion15", "xlPivotTableVersion2000", "xlPivotTableVersionCurrent"],
                    "ParamName": "PivotTableVersion"
                }],
                "Instruction": "CachePivotTable <workbookKey> in <worksheetKey> from UsedRange as <cachePTkey> version <PivotTableVersion:xlPivotTableVersion10|xlPivotTableVersion11|xlPivotTableVersion12|xlPivotTableVersion13|xlPivotTableVersion14|xlPivotTableVersion15|xlPivotTableVersion2000|xlPivotTableVersionCurrent>"
            }, {
                "Constants": [{
                    "Options": [""],
                    "ParamName": "PivotTableVersion"
                }],
                "Instruction": "CachePivotTable <workbookKey> in <worksheetKey> from <firstCell> to <finalCell> as <cachePTkey> version <PivotTableVersion::xlPivotTableVersion10|xlPivotTableVersion11|xlPivotTableVersion12|xlPivotTableVersion13|xlPivotTableVersion14|xlPivotTableVersion15|xlPivotTableVersion2000|xlPivotTableVersionCurrent>"
            }]
        }, {
            "CreationDate": "2020-Sep-12",
            "Description": "Changes one or more parameters in an existing chart. They must follow the following syntax. ParamName : Value ; ParamName : Value. Valid parameters are Title, TitleX, TitleY, Type, PlotBy. Type posible values are BarClustered, BarStacked, Line, Pie, Area, AreaStacked, XYScatter, ColumnClustered, ColumnStacked. PlotBy posible values are Columns, Rows. Some charts don't support all parameters and therefore the order in which parameters are placed may be relevant.",
            "Example": ["ChangeChartProperties in graf with {Title: Summary ; titleX: horizontal ; titleY: vertical ; Type: BarClustered ; PlotBy: rows}\r", "ChangeChartProperties in graf with {Title: Invert Summary ; PlotBy: Columns}\r", "ChangeChartProperties in graf with {Type: BarClustered ; titleX: this has X titles}\r"],
            "ExtraDocs": "https://innotekfilestore.file.core.windows.net/frida-docs/Readers/Excel/Articles/ChangeChartProperties.pdf",
            "Name": "ChangeChartProperties",
            "Params": ["path", "chartKey", "properties"],
            "ShortDescription": "Change some parameters in an existing chart",
            "Syntax": ["ChangeChartProperties in <chartKey:BarClustered|BarStacked|Line|Pie|Area|AreaStacked|XYScatter|ColumnClustered|ColumnStacked> with {<properties>}"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["BarClustered", "BarStacked", "Line", "Pie", "Area", "AreaStacked", "XYScatter", "ColumnClustered", "ColumnStacked"],
                    "ParamName": "chartKey"
                }],
                "Instruction": "ChangeChartProperties in <chartKey:BarClustered|BarStacked|Line|Pie|Area|AreaStacked|XYScatter|ColumnClustered|ColumnStacked> with {<properties>}"
            }]
        }, {
            "CreationDate": "2020-Sep-12",
            "Description": "Changes a given chart's input data. The range can be contiguous or using different columns like A1:A5,D1:D5,G1:E5, the list separator may be different depending on Excel's regional configuration. The source worksheet key reffers to the sheet where the data is taken from.",
            "Example": ["ChangeChartTable totalsChart in WS with range A1:D10\r", "ChangeChartTable chartVar in WS2 with range A1:C11,E1:E11\r"],
            "ExtraDocs": "https://innotekfilestore.file.core.windows.net/frida-docs/Readers/Excel/Articles/ChangeChartTable.pdf",
            "Name": "ChangeChartTable",
            "Params": ["chartKey", "sourceWorksheetKey", "range"],
            "ShortDescription": "Change a given chart's input data.",
            "Syntax": ["ChangeChartTable <chartKey> in <sourceWorksheetKey> with range <range>"],
            "SyntaxDetail": [{
                "Instruction": "ChangeChartTable <chartKey> in <sourceWorksheetKey> with range <range>"
            }]
        }, {
            "CreationDate": "2017-Aug-23",
            "Description": "Modify the range for the datasource of a chart in a given sheet. It will switch column data without changing de number of rows. \\nIndex starts with 1. NameSerie is the title in the table of the range it belongs to. Range is a positive number, which indicates relative columns forward from the actual column. Direction h stands for horizontal, v for vertical.",
            "Example": ["ChangeSeries in hola chart chart1 the series Poblacion with range plus 1 only series h\r"],
            "Name": "ChangeSeries",
            "Params": ["worksheetKey", "nameChart", "nameSerie", "direction"],
            "ShortDescription": "Modify the range for the datasource of a chart in a given sheet.",
            "Syntax": ["ChangeSeries in <worksheetKey> chart <nameChart> the series <nameSerie> with range plus 1 only series <direction:h|v>"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["h", "v"],
                    "ParamName": "direction"
                }],
                "Instruction": "ChangeSeries in <worksheetKey> chart <nameChart> the series <nameSerie> with range plus 1 only series <direction:h|v>"
            }]
        }, {
            "CreationDate": "2019-Nov-26",
            "Description": "Changes the name of a worksheet to the one specified (worksheet key is not modified). Consider that the name must be less than 31 characters.",
            "Example": ["ChangeWSName in {Libro1} worksheet {Sheet1} to {newName}\r", "ChangeWSName in {Libro1} WsKey {FirstSheet} to {Tablas Consolidadas}\r"],
            "Name": "ChangeWSName",
            "Params": ["workbookKey", "worksheetKey", "wsName"],
            "ShortDescription": "Changes the name of a worksheet.",
            "Syntax": ["ChangeWSName in {<workbookKey>} worksheet {<ActualSheetName>} to {<wsName>}", "ChangeWSName in {<workbookKey>} WsKey {<worksheetKey>} to {<wsName>}"],
            "SyntaxDetail": [{
                "Instruction": "ChangeWSName in {<workbookKey>} worksheet {<ActualSheetName>} to {<wsName>}"
            }, {
                "Instruction": "ChangeWSName in {<workbookKey>} WsKey {<worksheetKey>} to {<wsName>}"
            }]
        }, {
            "Description": "Deletes the contents of a range of cells, as if manually selecting a range and deleting. It can be ranges such as A1:B12, A1,lastD or UsedRange. ",
            "Example": ["ClearCells from {\u200b\u200b\u200b\u200b\u200bsheet}\u200b\u200b\u200b\u200b\u200b in {\u200b\u200b\u200b\u200b\u200bA1:LastS}\u200b\u200b\u200b\u200b\u200b\r", "ClearCells from {sheet} in {A9:lastA}\r", "ClearCells from {sheet} in {A6:A9}\r"],
            "Name": "ClearCells",
            "Params": ["worksheetKey", "RangeOrCell"],
            "ShortDescription": "Deletes the contents of a range of cells",
            "Syntax": ["ClearCells from {<worksheetKey>} in {<RangeOrCell>}"],
            "SyntaxDetail": [{
                "Instruction": "ClearCells from {<worksheetKey>} in {<RangeOrCell>}"
            }]
        }, {
            "CreationDate": "2019-Feb-27",
            "Description": "Close an existing workbook by a given workbookKey.",
            "Example": ["Close Libro1\r"],
            "Name": "Close",
            "Params": ["workbookKey"],
            "ShortDescription": "Close an open workbook.",
            "Syntax": ["Close <workbookKey>"],
            "SyntaxDetail": [{
                "Instruction": "Close <workbookKey>"
            }]
        }, {
            "CreationDate": "2018-Mar-02",
            "Description": "Apply a color to the duplicate cells in value from a given column. Index starts from 1.",
            "Example": ["ColorDuplicates from hoja2 column 11 background_values [255, 255, 0] text_values [0, 0, 0]\r"],
            "Name": "ColorDuplicates",
            "Params": ["worksheetKey", "index", "R", "G", "B"],
            "ShortDescription": "Mark duplicate cells in value with a color.",
            "Syntax": ["ColorDuplicates from <worksheetKey> column <index> background_values [<R>, <G>, <B>] text_values [<R>, <G>, <B>]"],
            "SyntaxDetail": [{
                "Instruction": "ColorDuplicates from <worksheetKey> column <index> background_values [<R>, <G>, <B>] text_values [<R>, <G>, <B>]"
            }]
        }, {
            "CreationDate": "2017-Aug-01",
            "Description": "Autofit all the columns in the sheet with text in it.",
            "Example": ["ColumnsFit in sheetOne\r"],
            "Name": "ColumnsFit",
            "Params": ["worksheetKey"],
            "ShortDescription": "Autofit all the columns in the sheet.",
            "Syntax": ["ColumnsFit in <worksheetKey>"],
            "SyntaxDetail": [{
                "Instruction": "ColumnsFit in <worksheetKey>"
            }]
        }, {
            "CreationDate": "2022-May-22",
            "Description": "Transforms the given column, from index to Letter and vice versa. Values must not exceed the total columns of an Excel Worksheet.",
            "Example": ["ColumnTransform value to transform {AB} and save as var {ColumnIndex}\r", "ColumnTransform value to transform {24} and save as var {ColumnName}\r"],
            "Name": "ColumnTransform",
            "Params": ["valueToTransform", "varName"],
            "ShortDescription": "Transforms the given column, from index to Letter vice versa.",
            "Syntax": ["ColumnTransform value to transform {<valueToTransform>} and save as var {<varName>}"],
            "SyntaxDetail": [{
                "Instruction": "ColumnTransform value to transform {<valueToTransform>} and save as var {<varName>}"
            }]
        }, {
            "CreationDate": "2017-Nov-13",
            "Description": "Concatenate cell values with a separator between them.",
            "Example": ["Concatenate in ProcessNG with \"/\" [C11,C12]\r"],
            "Name": "Concatenate",
            "Params": ["sheetkey", "separatorkey", "cell"],
            "ShortDescription": "Concatenate cells values.",
            "Syntax": ["Concatenate in <sheetkey> with \"<separatorkey>\" [<cell1>,<cell2>,...,<celln>]", "Concatenate in <sheetkey> with \"<separatorkey>\" [<cell1>,<cell2>]"],
            "SyntaxDetail": [{
                "Instruction": "Concatenate in <sheetkey> with \"<separatorkey>\" [<cell1>,<cell2>,...,<celln>]"
            }, {
                "Instruction": "Concatenate in <sheetkey> with \"<separatorkey>\" [<cell1>,<cell2>]"
            }]
        }, {
            "CreationDate": "2017-Aug-23",
            "Description": "Apply format (textcolor, backgroundcolor, borderstyle, bodercolor) depending on the condition (equals, notequals, greater, greaterequals, less, lessequals, between, notbetween) of each cell value. The different types of bordestyle are: dash, dashdot, dashdotdot, dot, double, none, slantdashdot.",
            "Example": ["ConditionalFormat in WSheet2 range A1:D5 format \"textcolor:Green\" where cell_value equals value OK\r", "ConditionalFormat in Wsheet1 used_range format \"backgroundcolor:Red\" where cell_value notequals value OK \r", "ConditionalFormat in Wsheet1 range A1:D5 format \"borderstyle:dashdotdot\" where cell_value between value 100 and 80\r", "ConditionalFormat in WSheet2 used_range format \"bordercolor:Yellow\" where cell_value notbetween value 100 and 80        \r"],
            "Name": "ConditionalFormat",
            "Params": ["worksheetKey", "range", "typeofFormat", "condition", "value"],
            "ShortDescription": "Apply format to the cells depending on the condition of each cell value.",
            "Syntax": ["ConditionalFormat in <worksheetKey> range <range> format \"<typeofFormat:textcolor|backgroundcolor|borderstyle|bodercolor>:<value>\" where cell_value <condition:equals|notequals|greater|greaterequals|less|lessequals|between|notbetween> value <value>", "ConditionalFormat in <worksheetKey> range <range> format \"<typeofFormat:textcolor|backgroundcolor|borderstyle|bodercolor>:<value>\" where cell_value between value <value> and <value>", "ConditionalFormat in <worksheetKey> used_range format \"<typeofFormat:textcolor|backgroundcolor|borderstyle|bodercolor>:<value>\" where cell_value <condition:equals|notequals|greater|greaterequals|less|lessequals|between|notbetween> value <value>", "ConditionalFormat in <worksheetKey> used_range format \"<typeofFormat:textcolor|backgroundcolor|borderstyle|bodercolor>:<value>\" where cell_value between value <value> and <value>", "ConditionalFormat in <worksheetKey> start_at <startCell> used_range format \"<typeofFormat>:<value>\" where cell_value <condition> value <value>"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["textcolor", "backgroundcolor", "borderstyle", "bodercolor"],
                    "ParamName": "typeofFormat"
                }, {
                    "Options": ["equals", "notequals", "greater", "greaterequals", "less", "lessequals", "between", "notbetween"],
                    "ParamName": "condition"
                }],
                "Instruction": "ConditionalFormat in <worksheetKey> range <range> format \"<typeofFormat:textcolor|backgroundcolor|borderstyle|bodercolor>:<value>\" where cell_value <condition:equals|notequals|greater|greaterequals|less|lessequals|between|notbetween> value <value>"
            }, {
                "Constants": [{
                    "Options": ["textcolor", "backgroundcolor", "borderstyle", "bodercolor"],
                    "ParamName": "typeofFormat"
                }],
                "Instruction": "ConditionalFormat in <worksheetKey> range <range> format \"<typeofFormat:textcolor|backgroundcolor|borderstyle|bodercolor>:<value>\" where cell_value between value <value> and <value>"
            }, {
                "Constants": [{
                    "Options": ["textcolor", "backgroundcolor", "borderstyle", "bodercolor"],
                    "ParamName": "typeofFormat"
                }, {
                    "Options": ["equals", "notequals", "greater", "greaterequals", "less", "lessequals", "between", "notbetween"],
                    "ParamName": "condition"
                }],
                "Instruction": "ConditionalFormat in <worksheetKey> used_range format \"<typeofFormat:textcolor|backgroundcolor|borderstyle|bodercolor>:<value>\" where cell_value <condition:equals|notequals|greater|greaterequals|less|lessequals|between|notbetween> value <value>"
            }, {
                "Constants": [{
                    "Options": ["textcolor", "backgroundcolor", "borderstyle", "bodercolor"],
                    "ParamName": "typeofFormat"
                }],
                "Instruction": "ConditionalFormat in <worksheetKey> used_range format \"<typeofFormat:textcolor|backgroundcolor|borderstyle|bodercolor>:<value>\" where cell_value between value <value> and <value>"
            }, {
                "Instruction": "ConditionalFormat in <worksheetKey> start_at <startCell> used_range format \"<typeofFormat>:<value>\" where cell_value <condition> value <value>"
            }]
        }, {
            "CreationDate": "2017-Aug-23",
            "Description": "Convert a given Excel file to the computer's Excel version.",
            "Example": ["ConvertTo2007 book\r"],
            "Name": "ConvertTo2007",
            "Params": ["workbookKey"],
            "ShortDescription": "Convert a given Excel file to the computer's Excel version.",
            "Syntax": ["ConvertTo2007 <workbookKey>"],
            "SyntaxDetail": [{
                "Instruction": "ConvertTo2007 <workbookKey>"
            }]
        }, {
            "CreationDate": "2017-Aug-23",
            "Description": "Copy values with special considerations in a given worksheet's usedrange and paste it in another one. Range can have values like \"lastrow\" or the cell where it will be pasted. Typekey can be either all, except_borders, column_widths,comments, formats, formulas,formulas_and_number_formats, validation, values or values_and_number_formats.",
            "Example": ["Copy values from sheetOne to bookName sheet_name Sheet1 start_at C1 transpose true\r", "Copy values from sheetOne to bookName sheet_name Sheet1 start_at lastrow transpose false\r"],
            "Name": "Copy",
            "Params": ["typeKey", "worksheetKey", "workbookKey", "destWorksheetKey", "originRange", "destRange", "transposeValue"],
            "ShortDescription": "Copy values from a worksheet to another one.",
            "Syntax": ["Copy <typeKey:all|except_borders|column_widths|comments|formats|formulas|formulas_and_number_formats|validation|values|values_and_number_formats> from <worksheetKey> to <workbookKey> sheet_name <destWorksheetKey> start_at <range> transpose <transposeValue:true|false>", "Copy <typeKey:all|except_borders|column_widths|comments|formats|formulas|formulas_and_number_formats|validation|values|values_and_number_formats> from_sheet <worksheetKey> to <workbookKey> sheet_name <destWorksheetKey> start_at <originRange> transpose <transposeValue:true|false> paste_in <destRange>"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["all", "except_borders", "column_widths", "comments", "formats", "formulas", "formulas_and_number_formats", "validation", "values", "values_and_number_formats"],
                    "ParamName": "typeKey"
                }, {
                    "Options": ["true", "false"],
                    "ParamName": "transposeValue"
                }],
                "Instruction": "Copy <typeKey:all|except_borders|column_widths|comments|formats|formulas|formulas_and_number_formats|validation|values|values_and_number_formats> from <worksheetKey> to <workbookKey> sheet_name <destWorksheetKey> start_at <range> transpose <transposeValue:true|false>"
            }, {
                "Constants": [{
                    "Options": ["all", "except_borders", "column_widths", "comments", "formats", "formulas", "formulas_and_number_formats", "validation", "values", "values_and_number_formats"],
                    "ParamName": "typeKey"
                }, {
                    "Options": ["true", "false"],
                    "ParamName": "transposeValue"
                }],
                "Instruction": "Copy <typeKey:all|except_borders|column_widths|comments|formats|formulas|formulas_and_number_formats|validation|values|values_and_number_formats> from_sheet <worksheetKey> to <workbookKey> sheet_name <destWorksheetKey> start_at <originRange> transpose <transposeValue:true|false> paste_in <destRange>"
            }]
        }, {
            "CreationDate": "2018-Mar-05",
            "Description": "Fill blank cells in a worksheet with the value of the previous row for each column.",
            "Example": ["CopyCellUnmerge bitacora\r"],
            "Name": "CopyCellUnmerge",
            "Params": ["worksheetKey"],
            "ShortDescription": "Fill blank cells in a worksheet with the value of the previous row for each column.",
            "Syntax": ["CopyCellUnmerge <worksheetKey>"],
            "SyntaxDetail": [{
                "Instruction": "CopyCellUnmerge <worksheetKey>"
            }]
        }, {
            "CreationDate": "2018-Jan-30",
            "Description": "Copy a given chartIndex in a worksheet to the clipboard. Index starts with 1.",
            "Example": ["CopyChart \"1\" from FinancialsWorkSheet\r"],
            "Name": "CopyChart",
            "Params": ["chartIndex", "worksheetKey"],
            "ShortDescription": "Copy a chartIndex to the clipboard.",
            "Syntax": ["CopyChart \"<chartIndex>\" from <worksheetKey>"],
            "SyntaxDetail": [{
                "Instruction": "CopyChart \"<chartIndex>\" from <worksheetKey>"
            }]
        }, {
            "CreationDate": "2017-Sep-07",
            "Description": "Copy a full column to another place (in the same sheet or another), the value indicated after \"start at\" in the instruction is the offset value, hence if value equals 1, it will be displaced one row, pasting the value in the second row.",
            "Example": ["CopyColumn 10 from hoja2 start_at 1 to the sheet hoja3 in column 4 start_at 1\r", "CopyColumn value 20 from hojaCostos start_at 2 to the sheet hoja4 in column 4 start_at 3\r"],
            "Name": "CopyColumn",
            "Params": ["worksheetKeyOrig", "worksheetKeyDest", "columnIndexOrig", "columnIndexDest", "rowOffsetOrig", "rowOffsetDest"],
            "ShortDescription": "Copy a column to another column.",
            "Syntax": ["CopyColumn <columnIndexOrig> from <worksheetKeyOrig> start_at <rowOffsetOrig> to the sheet <worksheetKeyDest> in column <columnIndexDest> start_at <rowOffsetDest>", "CopyColumn <columnIndexOrig> from <worksheetKeyOrig> to the sheet <worksheetKeyDest> in column <columnIndexDest> start_at <rowOffsetDest> --visible", "CopyColumn value <columnIndexOrig> from <worksheetKeyOrig> start_at <rowOffsetOrig> to the sheet <worksheetKeyDest> in column <columnIndexDest> start_at <rowOffsetDest>"],
            "SyntaxDetail": [{
                "Instruction": "CopyColumn <columnIndexOrig> from <worksheetKeyOrig> start_at <rowOffsetOrig> to the sheet <worksheetKeyDest> in column <columnIndexDest> start_at <rowOffsetDest>"
            }, {
                "Instruction": "CopyColumn <columnIndexOrig> from <worksheetKeyOrig> to the sheet <worksheetKeyDest> in column <columnIndexDest> start_at <rowOffsetDest> --visible"
            }, {
                "Instruction": "CopyColumn value <columnIndexOrig> from <worksheetKeyOrig> start_at <rowOffsetOrig> to the sheet <worksheetKeyDest> in column <columnIndexDest> start_at <rowOffsetDest>"
            }]
        }, {
            "CreationDate": "2019-May-30",
            "Description": "Copy a cell or range to another location, just like ctrl + c ctrl + v would. CopyRange can be ranges like A1: B12, A1, lastD, or UsedRange. \\nAvailable types are all, except_borders, column_widths, comments, formats, formulas, formulas_and_number_formats, validation, values, values_and_number_formats, or no type. \\n\"Optimized\" will correct incorrect behavior when using ranges of type of last <Column>.\\n\"Visible\" will copy visible items in filtered data, keep in mind that the copyRange is not equal to the number of visible rows.",
            "Example": ["CopyPaste hoja1 C9:F18 to hoja2 B3\r", "CopyPaste hoja1 C9 to hoja2 G7\r", "CopyPaste hoja1 UsedRange to hoja2 G7\r", "CopyPaste hoja1 A1:lastF to hoja2 G7 optimized\r", "CopyPaste all hoja1 UsedRange to hoja2 G7 \r", "CopyPaste formulas_and_number_formats hoja1 C9:F18 to hoja2 B3\r", "CopyPaste hoja1 UsedRange to hoja2 G7 visible\r", "CopyPaste hoja1 A1:lastF to hoja2 G7 optimized visible\r"],
            "ExtraDocs": "https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/Excel Reader/CopyPaste.pdf",
            "Name": "CopyPaste",
            "Params": ["worksheetKey", "type", "worksheetKey2", "copyRangeOrCell", "pasteCell", "isOptimized", "isVisible"],
            "ShortDescription": "Copies a cell or a range to another location.",
            "Syntax": ["CopyPaste <type:all|except_borders|column_widths|comments|formats|formulas|formulas_and_number_formats|validation|values|values_and_number_formats|> <worksheetKey> <copyRangeOrCell> to <worksheetKey2> <pasteCell> <isOptimized:optimized|> <isVisible:visible|>"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["all", "except_borders", "column_widths", "comments", "formats", "formulas", "formulas_and_number_formats", "validation", "values", "values_and_number_formats", ""],
                    "ParamName": "type"
                }, {
                    "Options": ["optimized", ""],
                    "ParamName": "isOptimized"
                }, {
                    "Options": ["visible", ""],
                    "ParamName": "isVisible"
                }],
                "Instruction": "CopyPaste <type:all|except_borders|column_widths|comments|formats|formulas|formulas_and_number_formats|validation|values|values_and_number_formats|> <worksheetKey> <copyRangeOrCell> to <worksheetKey2> <pasteCell> <isOptimized:optimized|> <isVisible:visible|>"
            }]
        }, {
            "CreationDate": "2017-Aug-01",
            "Description": "Copy a pivot table from a given worksheet to the clipboard.",
            "Example": ["Excel CopyPivotTable \"Tabla din\u00e1mica2\" from BUWorkSheet\r"],
            "ExtraDocs": "https://innotekfilestore.file.core.windows.net/frida-docs/Readers/Excel/Articles/Tablas%20Pivote.pdf",
            "Name": "CopyPivotTable",
            "Params": ["tableName", "worksheetKey"],
            "ShortDescription": "Copy a pivot table to the clipboard.",
            "Syntax": ["CopyPivotTable \"<tableName>\" from <worksheetKey>"],
            "SyntaxDetail": [{
                "Instruction": "CopyPivotTable \"<tableName>\" from <worksheetKey>"
            }]
        }, {
            "CreationDate": "2018-Sep-17",
            "Description": "Copy a range of cells to somewhere else in the worksheet, it can be a column for example. Columns and rows indexes begin with 1. LastRow and LastCol will operate according to UsedRange behaviour.",
            "Example": ["CopyRange from the worksheet WorkSheetExampleName from the cell {2,5} up to the cell {LastRow,5} to the cell {2,6}\r", "CopyRange from the worksheet WorkSheetExampleName from the cell {2,15} up to the cell {2,LastCol} to the cell {2,LastCol}\r", "CopyRange from the worksheet WorkSheetExampleName from the cell {1,15} up to the cell {LastRow,15} to the cell {LastRow,15}\r"],
            "Name": "CopyRange",
            "Params": ["StartRow", "StartCol", "EndRow", "EndCol", "Row", "Col"],
            "ShortDescription": "Copy a range of cells to somewhere else in the worksheet.",
            "Syntax": ["CopyRange from the worksheet <worksheetKey> from the cell {<StartRow>,<StartCol>} up to the cell {<EndRow>,<EndCol>} to the cell {<Row>,<Col>}", "CopyRange from the worksheet <worksheetKey> from the cell {<StartRow>,<StartCol>} up to the cell {<EndRow>,LastCol} to the cell {LastRow,<Col>}", "CopyRange from the worksheet <worksheetKey> from the cell {<StartRow>,<StartCol>} up to the cell {LastRow,<EndCol>} to the cell {<Row>,LastCol}", "CopyRange from the worksheet <worksheetKey> from the cell {<StartRow>,<StartCol>} up to the cell {LastRow,LastCol} to the cell {LastRow,LastCol}"],
            "SyntaxDetail": [{
                "Instruction": "CopyRange from the worksheet <worksheetKey> from the cell {<StartRow>,<StartCol>} up to the cell {<EndRow>,<EndCol>} to the cell {<Row>,<Col>}"
            }, {
                "Instruction": "CopyRange from the worksheet <worksheetKey> from the cell {<StartRow>,<StartCol>} up to the cell {<EndRow>,LastCol} to the cell {LastRow,<Col>}"
            }, {
                "Instruction": "CopyRange from the worksheet <worksheetKey> from the cell {<StartRow>,<StartCol>} up to the cell {LastRow,<EndCol>} to the cell {<Row>,LastCol}"
            }, {
                "Instruction": "CopyRange from the worksheet <worksheetKey> from the cell {<StartRow>,<StartCol>} up to the cell {LastRow,LastCol} to the cell {LastRow,LastCol}"
            }]
        }, {
            "CreationDate": "2017-Sep-07",
            "Description": "Copy the format of a specific range and paste in another specific range with the same format.",
            "Example": ["CopyRangeFormat from sheet WSExampleName1 with range A1,B1 to sheet WSExampleName2 in the range C1,D1\r", "CopyRangeFormat from sheet WSExampleName1 with range A1:A2 to sheet WSExampleName2 in the range C1:C2\r", "CopyRangeFormat from sheet WSExampleName1 with range A1:A2 to sheet WSExampleName2 in the range B1:J1\r"],
            "Name": "CopyRangeFormat",
            "Params": ["worksheetKey1", "range1", "worksheetKey2", "range2"],
            "ShortDescription": "Copy the format of a range to use it in another range.",
            "Syntax": ["CopyRangeFormat from sheet <worksheetKey1> with range <range1> to sheet <worksheetKey2> in the range <range2>"],
            "SyntaxDetail": [{
                "Instruction": "CopyRangeFormat from sheet <worksheetKey1> with range <range1> to sheet <worksheetKey2> in the range <range2>"
            }]
        }, {
            "CreationDate": "2017-Aug-01",
            "Description": "Copies the contents of a sheet (by Key) to book (by Key). Only if \"index\" syntax is used, format and filters will be kept. Index will insert the worksheet at the indicated position of the workbook. If the position is larger, it will be placed at the end. Index is 1-based.",
            "Example": ["CopySheet CostWS to WBook1 as CostWS2\r", "CopySheet CostWS to WBook1 in index 3 as CostWS3\r", "CopySheet CostWS to WBook1 in index end as CostLast\r"],
            "Name": "CopySheet",
            "Params": ["worksheetKey", "workbookKey", "sheetPosition"],
            "ShortDescription": "Copies the contents of a sheet to another one.",
            "Syntax": ["CopySheet <worksheetKey> to <workbookKey> as <worksheetKey>", "CopySheet <worksheetKey> to <workbookKey> in index <sheetPosition> as <worksheetKey>"],
            "SyntaxDetail": [{
                "Instruction": "CopySheet <worksheetKey> to <workbookKey> as <worksheetKey>"
            }, {
                "Instruction": "CopySheet <worksheetKey> to <workbookKey> in index <sheetPosition> as <worksheetKey>"
            }]
        }, {
            "CreationDate": "2017-Aug-01",
            "Description": "Counts how many a value of col1 occurs in col2. Col1 and col2 indexes start with 1. Resulting count will be placed in colRes. Header will consider the column header.",
            "Example": ["CountIf SheetA 3 start_at 2 in SheetB 3 start_at 2 out 10\r", "CountIf SheetA header \"Names\" start_at 2 in SheetB header2 \"Names\" start_at rowindex 2 out Comparativo\r"],
            "Name": "CountIf",
            "Params": ["worksheetKey1", "col1", "index1", "index2", "worksheetKey2", "colName1", "colName2", "colNameResult"],
            "ShortDescription": "Counts how many values of a column occur in another column.",
            "Syntax": ["CountIf <worksheetKey1> <col1> start_at <index1> in <worksheetKey2> <col2> start_at <index2> out <colRes>", "CountIf <worksheetKey1> header \"<colName1>\" start_at <index1> in <worksheetKey2> header2 \"<colName2>\" start_at rowindex <indexB> out <colNameResult>"],
            "SyntaxDetail": [{
                "Instruction": "CountIf <worksheetKey1> <col1> start_at <index1> in <worksheetKey2> <col2> start_at <index2> out <colRes>"
            }, {
                "Instruction": "CountIf <worksheetKey1> header \"<colName1>\" start_at <index1> in <worksheetKey2> header2 \"<colName2>\" start_at rowindex <indexB> out <colNameResult>"
            }]
        }, {
            "CreationDate": "2017-Aug-01",
            "Description": "Counts how many a value of col1 occurs in col2, and are equal to \"something\" (for now, not a number). Indexes start with 1. Resulting count will be placed in colNameResult. Header will consider the column header.",
            "Example": ["CountIf2 SheetA 3 start_at 2 in SheetB 2 start_at 2 and 3 equals \"Ahorro\" out 15\r", "CountIf2 SheetA header \"Names\" start_at 2 in SheetB header2 \"Names\" start_at rowindex 2 and \"Tipo\" equals \"Ahorro\" out Numero de Cuentas\r"],
            "Name": "CountIf2",
            "Params": ["worksheetKey1", "worksheetKey2", "colName1", "colName2", "colName3", "index1", "index2", "something", "colNameResult", "col1", "colIndex2", "col3", "colResult", "rowIndex"],
            "ShortDescription": "Counts how many values of a column occur in another column and are equal to \"something\".",
            "Syntax": ["CountIf2 <worksheetKey1> <col1> start_at <index1> in <worksheetKey2> <colIndex2> and <col3> equals \"<something>\" out <colResult>", "CountIf2 <worksheetKey1> header \"<colName1>\" start_at <index1> in <worksheetKey2> header2 \"<colName2>\" start_at rowindex <rowIndex> and \"<colName3>\" equals \"<something>\" out <colNameResult>"],
            "SyntaxDetail": [{
                "Instruction": "CountIf2 <worksheetKey1> <col1> start_at <index1> in <worksheetKey2> <colIndex2> and <col3> equals \"<something>\" out <colResult>"
            }, {
                "Instruction": "CountIf2 <worksheetKey1> header \"<colName1>\" start_at <index1> in <worksheetKey2> header2 \"<colName2>\" start_at rowindex <rowIndex> and \"<colName3>\" equals \"<something>\" out <colNameResult>"
            }]
        }, {
            "CreationDate": "2019-Nov-06",
            "Description": "Count the number of sheets on a given workbook.",
            "Example": ["CountSheets From wbClientes As Counter\r"],
            "Name": "CountSheets",
            "Params": ["workbookKey", "varName"],
            "ShortDescription": "Count the number of sheets on a given workbook.",
            "Syntax": ["CountSheets From <workbookKey> As <varName>"],
            "SyntaxDetail": [{
                "Instruction": "CountSheets From <workbookKey> As <varName>"
            }]
        }, {
            "CreationDate": "2020-Sep-12",
            "Description": "Creates a chart using a defined table data and is saved in a given chart variable. Position and dimensions are expressed in pixels. Valid chartTypes are BarClustered, BarStacked, Line, Pie, Area, AreaStacked, XYScatter, ColumnClustered, ColumnStacked. \\nRanges may be expresed as A1:A3,C1:C3, the list separator may be different depending on Excel's regional configuration.",
            "Example": ["CreateChart in WS with table B1:E11 in position {150,10,500,300} type BarStacked save as graficaKey\r", "CreateChart in WS with table B1:B11,C1:C11,E1:E11 from WS2 in position {150,10,500,300} type Line save as graficaKey\r"],
            "ExtraDocs": "https://innotekfilestore.file.core.windows.net/frida-docs/Readers/Excel/Articles/CreateChart.pdf",
            "Name": "CreateChart",
            "Params": ["worksheetKey", "sourceWorkSheetKey", "range", "x", "y", "width", "height", "chartType", "chartKey"],
            "ShortDescription": "Insert a chart using a defined source table",
            "Syntax": ["CreateChart in <worksheetKey> with table <range> in position {<x>,<y>,<width>,<height>} type <chartType:BarClustered|BarStacked|Line|Pie|Area|AreaStacked|XYScatter|ColumnClustered|ColumnStacked> save as <chartKey>", "CreateChart in <worksheetKey> with table <range> from <sourceWorkSheetKey> in position {<x>,<y>,<width>,<height>} type <chartType:BarClustered|BarStacked|Line|Pie|Area|AreaStacked|XYScatter|ColumnClustered|ColumnStacked> save as <chartKey>"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["BarClustered", "BarStacked", "Line", "Pie", "Area", "AreaStacked", "XYScatter", "ColumnClustered", "ColumnStacked"],
                    "ParamName": "chartType"
                }],
                "Instruction": "CreateChart in <worksheetKey> with table <range> in position {<x>,<y>,<width>,<height>} type <chartType:BarClustered|BarStacked|Line|Pie|Area|AreaStacked|XYScatter|ColumnClustered|ColumnStacked> save as <chartKey>"
            }, {
                "Constants": [{
                    "Options": ["BarClustered", "BarStacked", "Line", "Pie", "Area", "AreaStacked", "XYScatter", "ColumnClustered", "ColumnStacked"],
                    "ParamName": "chartType"
                }],
                "Instruction": "CreateChart in <worksheetKey> with table <range> from <sourceWorkSheetKey> in position {<x>,<y>,<width>,<height>} type <chartType:BarClustered|BarStacked|Line|Pie|Area|AreaStacked|XYScatter|ColumnClustered|ColumnStacked> save as <chartKey>"
            }]
        }, {
            "CreationDate": "2020-May-06",
            "Description": "Creates a dropdown in the specified cell with the given information, it requires a title to work as the cell's default value",
            "Example": ["CreateDropDown in \"MainSheet\" in the cell {2,5} with the values {Word,Excel,PowerPoint,Outlook} and the title MicrosoftOffice\r"],
            "Name": "CreateDropDown",
            "Params": ["WsKey", "Row", "Col", "Value1", "Value2", "Value3", "ValueN", "Title"],
            "ShortDescription": "Creates a dropdown in a cell with the given information.",
            "Syntax": ["CreateDropDown in \"<WsKey>\" in the cell {<Row>,<Col>} with the values {<Value1>,<Value2>,<Value3>....<ValueN>} and the title <Title>"],
            "SyntaxDetail": [{
                "Instruction": "CreateDropDown in \"<WsKey>\" in the cell {<Row>,<Col>} with the values {<Value1>,<Value2>,<Value3>....<ValueN>} and the title <Title>"
            }]
        }, {
            "CreationDate": "2020-Oct-23",
            "Description": "Creates a shortcut to a desired sheet in the same book.",
            "Example": ["CreateHyperlink in sheet Sheet1 cell A2 to the sheet Sheet2 cell B20 and the text to display This is a hiperlink\r"],
            "Name": "CreateHyperlink",
            "Params": ["ColRow", "TextToDisplay", "WsKey"],
            "ShortDescription": "Creates a shortcut to a desired sheet in the same book",
            "Syntax": ["CreateHyperlink in sheet <WsKey> cell <ColRow> to the sheet <WsKey> cell <ColRow> and the text to display <TextToDisplay>"],
            "SyntaxDetail": [{
                "Instruction": "CreateHyperlink in sheet <WsKey> cell <ColRow> to the sheet <WsKey> cell <ColRow> and the text to display <TextToDisplay>"
            }]
        }, {
            "CreationDate": "2017-Aug-01",
            "Description": "Creates a pivot table using the cached pivot table range. CellKey indicates where the pivot table will be placed using tableTitle and saving the PivotTableKey variable.",
            "Example": ["CreatePivotTable Cache in PT GE cell A3 with_name \"Table\" as PivotTable\r"],
            "ExtraDocs": "https://innotekfilestore.file.core.windows.net/frida-docs/Readers/Excel/Articles/Tablas%20Pivote.pdf",
            "Name": "CreatePivotTable",
            "Params": ["cacheKey", "worksheetKey", "cellKey", "tableTitle", "pivotTableKey"],
            "ShortDescription": "Creates a pivot table using the cached pivot table range.",
            "Syntax": ["CreatePivotTable <cacheKey> in <worksheetKey> cell <cellKey> with_name \"<tableTitle>\" as <pivotTableKey>"],
            "SyntaxDetail": [{
                "Instruction": "CreatePivotTable <cacheKey> in <worksheetKey> cell <cellKey> with_name \"<tableTitle>\" as <pivotTableKey>"
            }]
        }, {
            "CreationDate": "2019-Oct-18",
            "Description": "Sort a column from a given worksheet. When a range is used, sorting a column considers the rest of cells to be related, and those cells will be moved according to the sorted column. Index begins with 1. Selecting \"Y\" in header means that it will affect the header with all data.",
            "Example": ["DataSortByColumn {hoja} by_column {3} with_header {Y}\r", "DataSortByColumn {hoja} by_column {5} range {A589:Z1080} with_header {N}\r"],
            "Name": "DataSortByColumn",
            "Params": ["worksheetKey", "columnIndex", "range", "sortOption"],
            "ShortDescription": "Sort a column from a given worksheet.",
            "Syntax": ["DataSortByColumn {<worksheetKey>} by_column {<columnIndex>} with_header {<sortOption:Y|N>}", "DataSortByColumn {<worksheetKey>} by_column {<columnIndex>} range {<range>} with_header {<sortOption:Y|N>}"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["Y", "N"],
                    "ParamName": "sortOption"
                }],
                "Instruction": "DataSortByColumn {<worksheetKey>} by_column {<columnIndex>} with_header {<sortOption:Y|N>}"
            }, {
                "Constants": [{
                    "Options": ["Y", "N"],
                    "ParamName": "sortOption"
                }],
                "Instruction": "DataSortByColumn {<worksheetKey>} by_column {<columnIndex>} range {<range>} with_header {<sortOption:Y|N>}"
            }]
        }, {
            "CreationDate": "2017-Aug-01",
            "Description": "The simple syntax converts requires that all values in a cell are dates, and it changes it's format to yyyyMMdd. Column index begins with 1. The string syntax converts all the dates to dateFormatOutput, if the cell is Text format, it will only change those with source format indicated, otherwise it will format all dates. Source format can be \"unknown\" and will only consider dates with default format (culture specific).",
            "Example": ["DateFormat in Sheet1 in column 6\r", "DateFormat hoja column_index 2 source \"dd-MM-yyyy\" string(\"dd.MM.yy\")\r", "DateFormat hoja column_index 2 source \"unknown\" string(\"dd.MM.yy\")\r", "WriteUniqueList in WSheet1 in column 5 start_at 2 from list Lista\r"],
            "Name": "DateFormat",
            "Params": ["worksheetKey", "columnIndex", "currentDateFormat", "dateformatOutput", "worksheetKey", "colIndex", "rowIndex", "varkey"],
            "ShortDescription": "Change date formats in a column.",
            "Syntax": ["DateFormat in <worksheetKey> in column <columnIndex>", "DateFormat <worksheetKey> column_index <columnIndex> source \"<currentDateFormat>\" string(\"<dateformatOutput>\")"],
            "SyntaxDetail": [{
                "Instruction": "DateFormat in <worksheetKey> in column <columnIndex>"
            }, {
                "Instruction": "DateFormat <worksheetKey> column_index <columnIndex> source \"<currentDateFormat>\" string(\"<dateformatOutput>\")"
            }]
        }, {
            "CreationDate": "2017-Oct-13",
            "Description": "Convert the date format to yyyymmdd in a given column name.",
            "Example": ["DateFormat2SC in Sheet4 in column Fechas\r"],
            "Name": "DateFormat2SC",
            "Params": ["worksheetKey", "headerName"],
            "ShortDescription": "Change the date format of a column to yyyymmdd.",
            "Syntax": ["DateFormat2SC in <worksheetKey> in column <headerName>"],
            "SyntaxDetail": [{
                "Instruction": "DateFormat2SC in <worksheetKey> in column <headerName>"
            }]
        }, {
            "CreationDate": "2017-Nov-13",
            "Description": "Adds a dateformat DD.MM.yyyy to a given column.",
            "Example": ["Dateformat3 in sheet in column 3\r"],
            "Name": "Dateformat3",
            "Params": ["worksheetKey", "indexColumn"],
            "ShortDescription": "Change the date format of a column to DD.MM.yyyy.",
            "Syntax": ["Dateformat3 in <worksheetKey> in column <indexColumn>"],
            "SyntaxDetail": [{
                "Instruction": "Dateformat3 in <worksheetKey> in column <indexColumn>"
            }]
        }, {
            "CreationDate": "2018-Sep-17",
            "Description": "Make a math operation between two columns and write the result on a third column. Format parameter indicates the format of dates in all columns. Currently dates in both columns must be text format. \"Applying filter\" syntax is used to perform the action in the values where the output column has \"-1\" in each cell.",
            "Example": ["DateMathOperation from the worksheet WorkSheetName ColumnIndex1 {2} - ColumnIndex2 {3} languageDate {en-CA} format {d.M.yyyy} write on ColumnIndex3 {4}\r", "DateMathOperation from the worksheet WorkSheetName ColumnIndex1 {2} - ColumnIndex2 {3} languageDate {en-CA} format {d.M.yyyy} write on ColumnIndex3 {4} applying the filter -1\r"],
            "Name": "DateMathOperation",
            "Params": ["ColumnIndex1", "ColumnIndex2", "idioma", "format", "ColumnIndex3"],
            "ShortDescription": "Make a math operation between two columns with dates and write the result on a third column.",
            "Syntax": ["DateMathOperation from the worksheet <worksheetKey> on ColumnIndex1 {<ColumnIndex1>} - ColumnIndex2 {<ColumnIndex2>} languageDate {<idioma>} format {<format>} write on ColumnIndex3 {<ColumnIndex3>}", "DateMathOperation from the worksheet <worksheetKey> on ColumnIndex1 {<ColumnIndex1>} - ColumnIndex2 {<ColumnIndex2>} languageDate {<idioma>} format {<format>} write on ColumnIndex3 {<ColumnIndex3>} applying the filter -1"],
            "SyntaxDetail": [{
                "Instruction": "DateMathOperation from the worksheet <worksheetKey> on ColumnIndex1 {<ColumnIndex1>} - ColumnIndex2 {<ColumnIndex2>} languageDate {<idioma>} format {<format>} write on ColumnIndex3 {<ColumnIndex3>}"
            }, {
                "Instruction": "DateMathOperation from the worksheet <worksheetKey> on ColumnIndex1 {<ColumnIndex1>} - ColumnIndex2 {<ColumnIndex2>} languageDate {<idioma>} format {<format>} write on ColumnIndex3 {<ColumnIndex3>} applying the filter -1"
            }]
        }, {
            "CreationDate": "2021-May-24",
            "Description": "Print the Turing Excel variables to the log file.",
            "Example": [" DebugVariables\r"],
            "Name": "DebugVariables",
            "ShortDescription": "Print the Turing Excel variables to the log file.",
            "Syntax": ["DebugVariables"]
        }, {
            "CreationDate": "2018-Mar-02",
            "Description": "Delete all data from the worksheet. The option to include images is optional",
            "Example": ["DeleteAll from Sheet3\r", "DeleteAll from Sheet1 including images\r"],
            "Name": "DeleteAll",
            "Params": ["worksheetKey"],
            "ShortDescription": "Delete all data from the worksheet.",
            "Syntax": ["DeleteAll from <worksheetKey>", "DeleteAll from <worksheetKey> including images"],
            "SyntaxDetail": [{
                "Instruction": "DeleteAll from <worksheetKey>"
            }, {
                "Instruction": "DeleteAll from <worksheetKey> including images"
            }]
        }, {
            "CreationDate": "2019-Jun-17",
            "Description": "Delete a specific Pivot Table by key or name of the Pivot Table. It can also delete all pivot tables in a given worksheet or workbook.",
            "Example": ["DeletePivotTable by key {PT1}\r", "DeletePivotTable from {Wbook1} by name {PivotTable1}\r", "DeletePivotTable all from worksheet {sheet3}\r", "DeletePivotTable all from workbook {libro1}\r"],
            "ExtraDocs": "https://innotekfilestore.file.core.windows.net/frida-docs/Readers/Excel/Articles/Tablas%20Pivote.pdf",
            "Name": "DeletePivotTable",
            "Params": ["pivottableKey", "pivottableName", "workbookKey", "worksheetKey"],
            "ShortDescription": "Delete an existing Pivot Table.",
            "Syntax": ["DeletePivotTable by key {<pivottableKey>}", "DeletePivotTable from {<workbookKey>} by name {<pivottableName>}", "DeletePivotTable all from worksheet {<worksheetKey>}", "DeletePivotTable all from workbook {<workbookKey>}"],
            "SyntaxDetail": [{
                "Instruction": "DeletePivotTable by key {<pivottableKey>}"
            }, {
                "Instruction": "DeletePivotTable from {<workbookKey>} by name {<pivottableName>}"
            }, {
                "Instruction": "DeletePivotTable all from worksheet {<worksheetKey>}"
            }, {
                "Instruction": "DeletePivotTable all from workbook {<workbookKey>}"
            }]
        }, {
            "CreationDate": "2018-Mar-02",
            "Description": "Delete all rows that have a date lower than \"01/current month minus numberMonths/current year\". Column index indicates the column that will be compared. Row index indicates where the filter will start comparing, when it has 1, first row is the column title and it will delete the following rows. When row is 2, it assumes title is in row 2.",
            "Example": ["DeletePrevMonth from libro amount 2 row 2 column 3\r", "DeletePrevMonth from libro amount 3 row 1 column 6\r"],
            "Name": "DeletePrevMonth",
            "Params": ["worksheetKey", "numberMonths", "rowIndex", "columnIndex"],
            "ShortDescription": "Delete all rows that have a date from last n months.",
            "Syntax": ["DeletePrevMonth from <worksheetKey> amount <numberMonths> row <rowIndex> column <columnIndex>"],
            "SyntaxDetail": [{
                "Instruction": "DeletePrevMonth from <worksheetKey> amount <numberMonths> row <rowIndex> column <columnIndex>"
            }]
        }, {
            "CreationDate": "2018-Jun-20",
            "Description": "Delete all rows in a given sheet. It may be indicated to delete all rows or background coloured cells in A column, or rows where a cell contains a given value (Currently, only \"start at\" syntax can read numbers, others must be text format cells).\\nConditions syntax can compare exact values or only contain a part of the constraint. \\nWhen looking to delete multiple constraints in one column syntax can be \"A\":\"constraint1|constraint2\" to delete all rows where column A has either \"constraint1\" or \"constraint2\" in their values.",
            "Example": ["DeleteRows All from_sheet mySheet\r", "DeleteRows Colored from_sheet mySheet\r", "DeleteRows Cond Contains Value \"0\" Column 2 from_sheet mySheet\r", "DeleteRows Cond All Value \"doesn't matter\" Column 2 from_sheet mySheet\r", "DeleteRows Cond Contains Value \"something\" Column 9 start at 2 from_sheet Sheet1Key\r", "DeleteRows from hoja start at 2 with conditions {\"A\":\"blue|red\" ; \"G\":\"Paid\"} ignore case\r", "DeleteRows from hoja with exact conditions {\"1\":\"yes\" ; \"5\":\"no\" ; \"AA\": \"100\"}\r"],
            "Name": "DeleteRows",
            "Params": ["searchType", "type", "worksheetKey", "columnIndex", "rowIndex", "column1", "conditions1", "column2", "conditions2", "caseSensitive", "compareType", "value"],
            "ShortDescription": "Delete all rows in a given sheet.",
            "Syntax": ["DeleteRows <type:Colored|All> from_sheet <worksheetKey>", "DeleteRows Cond <searchType:Contains|All> Value \"<value>\" Column <columnIndex> from_sheet <worksheetKey>", "DeleteRows Cond Contains Value \"<value>\" Column <columnIndex> start at <rowIndex> from_sheet <worksheetKey>", "DeleteRows from <worksheetKey> with <compareType:exact|> conditions {\"<column1>\":\"<conditions1>\";\"<column2>\":\"<conditions2>\"} <caseSensitive:ignore case|>"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["Colored", "All"],
                    "ParamName": "type"
                }],
                "Instruction": "DeleteRows <type:Colored|All> from_sheet <worksheetKey>"
            }, {
                "Constants": [{
                    "Options": ["Contains", "All"],
                    "ParamName": "searchType"
                }],
                "Instruction": "DeleteRows Cond <searchType:Contains|All> Value \"<value>\" Column <columnIndex> from_sheet <worksheetKey>"
            }, {
                "Instruction": "DeleteRows Cond Contains Value \"<value>\" Column <columnIndex> start at <rowIndex> from_sheet <worksheetKey>"
            }, {
                "Constants": [{
                    "Options": ["exact", ""],
                    "ParamName": "compareType"
                }, {
                    "Options": ["ignore case", ""],
                    "ParamName": "caseSensitive"
                }],
                "Instruction": "DeleteRows from <worksheetKey> with <compareType:exact|> conditions {\"<column1>\":\"<conditions1>\";\"<column2>\":\"<conditions2>\"} <caseSensitive:ignore case|>"
            }]
        }, {
            "CreationDate": "2019-May-23",
            "Description": "Delete all repetitions of a value from a column. ColIndex starts with 1.",
            "Example": ["DeleteValue Hoja col_index {3} value \"0\"\r"],
            "Name": "DeleteValue",
            "Params": ["worksheetKey", "colIndex", "value"],
            "ShortDescription": "Delete all repetitions of a value from a column.",
            "Syntax": ["DeleteValue <worksheetKey> col_index {<colIndex>} value \"<value>\""],
            "SyntaxDetail": [{
                "Instruction": "DeleteValue <worksheetKey> col_index {<colIndex>} value \"<value>\""
            }]
        }, {
            "CreationDate": "2019-Dec-17",
            "Description": "Closes, without saving changes, all open Excel workbooks and kills all the Excel tasks on the computer unless just a specific WorkBook is specified.",
            "Example": ["Dispose\r", "Dispose WSLogWorkBook\r"],
            "Name": "Dispose",
            "Params": ["workbookKey"],
            "ShortDescription": "Close Excel without saving any changes.",
            "Syntax": ["Dispose", "Dispose <workbookKey>"],
            "SyntaxDetail": [{
                "Instruction": "Dispose <workbookKey>"
            }]
        }, {
            "CreationDate": "2020-Jul-13",
            "Description": "Changes the first source links in a workbook. If the workbook has more than one asociated source, \"previous link\" can specify the link to be edited. The new source, must have the same worksheet names indicated by the links.",
            "Example": ["EditLinks from {WBook} with file \"C:\\input\\source.xlsx\"\r", "EditLinks from {WBook} with file \"C:\\input\\source-June.xlsx\" previous link \"C:\\input\\source-May.xlsx\"\r"],
            "Name": "EditLinks",
            "Params": ["workbookKey", "path", "previousPath"],
            "ShortDescription": "Change the source links in a workbook.",
            "Syntax": ["EditLinks from {<workbookKey>} with file \"<path>\"", "EditLinks from {<workbookKey>} with file \"<path>\" previous link \"<previousPath>\""],
            "SyntaxDetail": [{
                "Instruction": "EditLinks from {<workbookKey>} with file \"<path>\""
            }, {
                "Instruction": "EditLinks from {<workbookKey>} with file \"<path>\" previous link \"<previousPath>\""
            }]
        }, {
            "CreationDate": "2019-Sep-24",
            "Description": "Allows to filter a column excluding desired values. Indexes start with 1.",
            "Example": ["ExcludeFilterValues from {hoja} start_at {2} at_column {5} exclude criteria [Pago con pagos expr\u00e9s, Pago M\u00f3vil, Pago General]\r", "ExcludeFilterValues from {hoja} start_at {2} at_column {5} exclude_criteria_start_with [SCOT, SANTA, BANCOM]\r"],
            "Name": "ExcludeFilterValues",
            "Params": ["worksheetKey", "rowIndex", "columnIndex", "criteria"],
            "ShortDescription": "Filter a column excluding certain values.",
            "Syntax": ["ExcludeFilterValues from {<worksheetKey>} start_at {<rowIndex>} at_column {<columnIndex>} exclude criteria [<criteria 1, criteria 2,...,criteria n>]", "ExcludeFilterValues from {<worksheetKey>} start_at {<rowIndex>} at_column {<columnIndex>} exclude_criteria_start_with [<criteria 1, criteria 2,...,criteria n>]"],
            "SyntaxDetail": [{
                "Instruction": "ExcludeFilterValues from {<worksheetKey>} start_at {<rowIndex>} at_column {<columnIndex>} exclude criteria [<criteria 1, criteria 2,...,criteria n>]"
            }, {
                "Instruction": "ExcludeFilterValues from {<worksheetKey>} start_at {<rowIndex>} at_column {<columnIndex>} exclude_criteria_start_with [<criteria 1, criteria 2,...,criteria n>]"
            }]
        }, {
            "CreationDate": "2017-Aug-23",
            "Description": "Exports all charts in a book or a sheet as images to the given path.",
            "Example": ["ExportChart in book \"book1\" to \"C:\\Users\\user.name\\Downloads\"\r", "ExportChart in sheet \"sheetname\" to \"C:\\Users\\user.name\\Downloads\"\r"],
            "Name": "ExportChart",
            "Params": ["workbookKey", "worksheetKey", "workbookIndex", "worksheetIndex", "saveDirectoryPath"],
            "ShortDescription": "Exports all charts images to the given path.",
            "Syntax": ["ExportChart in book \"<workbookKey>\" to \"<saveDirectoryPath>\"", "ExportChart in sheet \"<worksheetKey>\" to \"<saveDirectoryPath>\""],
            "SyntaxDetail": [{
                "Instruction": "ExportChart in book \"<workbookKey>\" to \"<saveDirectoryPath>\""
            }, {
                "Instruction": "ExportChart in sheet \"<worksheetKey>\" to \"<saveDirectoryPath>\""
            }]
        }, {
            "CreationDate": "2020-Apr-27",
            "Description": "Export a range of cells as an image. You can used the keywords \"LastRow\" and \"LastCol\" to selct all the cells active in those row and columns ",
            "Example": ["ExportImage from the worksheet Hoja1 from the cell {1,2} up to the cell {LastRow,LastCol} and save in the file \"C:\\Users\\Innovation\\Desktop\\TuringExpo\\Local\\screenshots\\CaptureImage.png\"\r"],
            "Name": "ExportImage",
            "Params": ["worksheetKey", "StartRow", "StartCol", "EndRow", "EndCol", "ImagePath"],
            "ShortDescription": "Export a range of cells as an image.",
            "Syntax": ["ExportImage from the worksheet <worksheetKey> from the cell {<StartRow>,<StartCol>} up to the cell {<EndRow>,<EndCol>} and save in the file \"<ImagePath>\""],
            "SyntaxDetail": [{
                "Instruction": "ExportImage from the worksheet <worksheetKey> from the cell {<StartRow>,<StartCol>} up to the cell {<EndRow>,<EndCol>} and save in the file \"<ImagePath>\""
            }]
        }, {
            "CreationDate": "2020-Jun-19",
            "Description": "After loading a schema to excel and binding cells to it. The function will export the correspondig XML with filled in data. When XML is baddly built or fields are not well binded, for further support refer to: https://support.microsoft.com/en-us/office/export-xml-data-0b21f51b-56d6-48f0-83d9-a89637cd4360?ocmsassetid=hp010206401&correlationid=abe81eda-43d6-45a7-afa7-76733b2a5ba4&ui=en-us&rs=en-us&ad=us#BM3",
            "Example": ["ExportXML from wbFacturas to \"C:\\salida\\facturas2020Jun.xml\"\r"],
            "Name": "ExportXML",
            "Params": ["workbookKey", "outputXMLpath"],
            "ShortDescription": "Export the previously loaded XML with filled in data from the worksheet.",
            "Syntax": ["ExportXML from <workbookKey> to \"<outputXMLpath>\""],
            "SyntaxDetail": [{
                "Instruction": "ExportXML from <workbookKey> to \"<outputXMLpath>\""
            }]
        }, {
            "CreationDate": "2017-Nov-14",
            "Description": "Fills the values in a given column with a character. It can be added either before or after de cell's value. For example \"limit 5 start_at 2 filltxt '-' before\" will output \"--abc\" in \"abc\", but leave \"abcde\" as it is. ",
            "Example": ["FieldLength wsheet1 col_index 3 limit 5 start_at 2\r", "FieldLength wsheet1 col_index 3 limit 5 start_at 2 filltxt '-' after\r", "FieldLength wsheet1 col_header \"People\" limit 6 start_at 2 filltxt 'a' before\r", "FieldLength wsheet1 col_header \"People\" limit 6 start_at 2 fillnum '1' after\r", "FieldLength wsheet1 col_header \"People\" limit 4 start_at 3 fillnum '0' after filltxt 'a' before\r"],
            "Name": "FieldLength",
            "Params": ["worksheetKey", "colindex", "lenght", "rowindex", "fillType", "header", "char", "position"],
            "ShortDescription": "Fills the values in a given column with a character.",
            "Syntax": ["FieldLength <worksheetKey> col_index <colIndex> limit <length> start_at <rowIndex>", "FieldLength <worksheetKey> col_index <colIndex> limit <length> start_at <rowIndex> <fillType:fillnum|filltxt> '<char>' <position:before|after>", "FieldLength <worksheetKey> col_index <colIndex> limit <length> start_at <rowIndex> <fillType:fillnum|filltxt> '<char>' <before|after> <fillType:fillnum|filltxt> '<char>' <position:before|after>", "FieldLength <worksheetKey> col_header \"<header>\" limit <length> start_at <rowIndex>", "FieldLength <worksheetKey> col_header \"<header>\" limit <length> start_at <rowIndex> <fillType:fillnum|filltxt> '<char>' <position:before|after>", "FieldLength <worksheetKey> col_header \"<header>\" limit <length> start_at <rowIndex> <fillType:fillnum|filltxt> '<char>' <position:before|after> <fillType:fillnum|filltxt> '<char>' <position:before|after>"],
            "SyntaxDetail": [{
                "Instruction": "FieldLength <worksheetKey> col_index <colIndex> limit <length> start_at <rowIndex>"
            }, {
                "Constants": [{
                    "Options": ["fillnum", "filltxt"],
                    "ParamName": "fillType"
                }, {
                    "Options": ["before", "after"],
                    "ParamName": "position"
                }],
                "Instruction": "FieldLength <worksheetKey> col_index <colIndex> limit <length> start_at <rowIndex> <fillType:fillnum|filltxt> '<char>' <position:before|after>"
            }, {
                "Constants": [{
                    "Options": ["fillnum", "filltxt"],
                    "ParamName": "fillType"
                }, {
                    "Options": ["fillnum", "filltxt"],
                    "ParamName": "fillType"
                }, {
                    "Options": ["before", "after"],
                    "ParamName": "position"
                }],
                "Instruction": "FieldLength <worksheetKey> col_index <colIndex> limit <length> start_at <rowIndex> <fillType:fillnum|filltxt> '<char>' <before|after> <fillType:fillnum|filltxt> '<char>' <position:before|after>"
            }, {
                "Instruction": "FieldLength <worksheetKey> col_header \"<header>\" limit <length> start_at <rowIndex>"
            }, {
                "Constants": [{
                    "Options": ["fillnum", "filltxt"],
                    "ParamName": "fillType"
                }, {
                    "Options": ["before", "after"],
                    "ParamName": "position"
                }],
                "Instruction": "FieldLength <worksheetKey> col_header \"<header>\" limit <length> start_at <rowIndex> <fillType:fillnum|filltxt> '<char>' <position:before|after>"
            }, {
                "Constants": [{
                    "Options": ["fillnum", "filltxt"],
                    "ParamName": "fillType"
                }, {
                    "Options": ["before", "after"],
                    "ParamName": "position"
                }, {
                    "Options": ["fillnum", "filltxt"],
                    "ParamName": "fillType"
                }, {
                    "Options": ["before", "after"],
                    "ParamName": "position"
                }],
                "Instruction": "FieldLength <worksheetKey> col_header \"<header>\" limit <length> start_at <rowIndex> <fillType:fillnum|filltxt> '<char>' <position:before|after> <fillType:fillnum|filltxt> '<char>' <position:before|after>"
            }]
        }, {
            "CreationDate": "2017-Aug-01",
            "Description": "Filters a given column by key within the used range, using the mentioned criteria.",
            "Example": ["Filter in Sheet1 in column 5 with criteria Comprado\r"],
            "Name": "Filter",
            "Params": ["worksheetKey", "columnIndex", "criteria"],
            "ShortDescription": "Filter a column using the mentioned criteria.",
            "Syntax": ["Filter in <worksheetKey> in column <columnIndex> with criteria <criteria>"],
            "SyntaxDetail": [{
                "Instruction": "Filter in <worksheetKey> in column <columnIndex> with criteria <criteria>"
            }]
        }, {
            "CreationDate": "2017-Aug-01",
            "Description": "Filters a given column by name within the used range, using the mentioned criteria.",
            "Example": ["Filter in Sheet2 in column Clientes with criteria HEB\r"],
            "Name": "Filter2",
            "Params": ["worksheetKey", "header", "criteria"],
            "ShortDescription": "Filter a column by name using the mentioned criteria.",
            "Syntax": ["Filter in <worksheetKey> in column <header> with criteria <criteria>"],
            "SyntaxDetail": [{
                "Instruction": "Filter in <worksheetKey> in column <header> with criteria <criteria>"
            }]
        }, {
            "CreationDate": "2019-Nov-14",
            "Description": "Adds a filter in a given column that matches the criteria. Index begins with 1. Criteria can have wildcards (*?). A given range can be clearly specified, to stop Excel from guessing the range it will filter.",
            "Example": ["FilterHeader {hojaWS} column_index {4} criteria {PAID}\r", "FilterHeader {hojaWS} column_index {4} criteria {Mar*}\r", "FilterHeader {hojaWS} column_index {6} range {A1:L1} criteria {REJECTED}\r"],
            "Name": "FilterHeader",
            "Params": ["worksheetKey", "columnIndex", "criteria", "range"],
            "ShortDescription": "Filter a given column that matches the criteria.",
            "Syntax": ["FilterHeader {<worksheetKey>} column_index {<columnIndex>} criteria {<criteria>}", "FilterHeader {<worksheetKey>} column_index {<columnIndex>} range {<range>} criteria {<criteria>}"],
            "SyntaxDetail": [{
                "Instruction": "FilterHeader {<worksheetKey>} column_index {<columnIndex>} criteria {<criteria>}"
            }, {
                "Instruction": "FilterHeader {<worksheetKey>} column_index {<columnIndex>} range {<range>} criteria {<criteria>}"
            }]
        }, {
            "CreationDate": "2019-Oct-18",
            "Description": "Set the filter off in a worksheet.",
            "Example": ["FilterOff in {banca}\r"],
            "Name": "FilterOff",
            "Params": ["worksheetKey"],
            "ShortDescription": "Remove filters.",
            "Syntax": ["FilterOff in {<worksheetKey>}"],
            "SyntaxDetail": [{
                "Instruction": "FilterOff in {<worksheetKey>}"
            }]
        }, {
            "CreationDate": "2020-Dec-14",
            "Description": "Search for the exact word occurrence in a given column, this words may use * at the start, end, or both sides to indicate a word ending with, begining with o that it is in the middle. Order values can be \"first|last\". \\nUse start_at to indicate where the search row begins.\\n If the word is not found it won't raise an exception, it will just not update the variable. Column index is 1-based.  ",
            "Example": ["FindRow from {hoja} first occurrence of {*Abril*} in column {5} as {IndMesActual}\r", "FindRow from {hoja} first occurrence of {Success} in column {2} as {Existoso}\r", "FindRow from {hoja} last occurrence of {BANC*} in column {2} start_at {7} as {Bancos}\r"],
            "Name": "FindRow",
            "Params": ["worksheetKey", "order", "word", "columnIndex", "rowIndex", "variableKey"],
            "ShortDescription": "Get the row index after searching for a value",
            "Syntax": ["FindRow from {<worksheetKey>} <order:first|last> occurrence of {<word>} in column {<columnIndex>} as {<variableKey>}", "FindRow from {<worksheetKey>} <order:first|last> occurrence of {<word>} in column {<columnIndex>} start_at {<rowIndex>} as {<variableKey>}"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["first", "last"],
                    "ParamName": "order"
                }],
                "Instruction": "FindRow from {<worksheetKey>} <order:first|last> occurrence of {<word>} in column {<columnIndex>} as {<variableKey>}"
            }, {
                "Constants": [{
                    "Options": ["first", "last"],
                    "ParamName": "order"
                }],
                "Instruction": "FindRow from {<worksheetKey>} <order:first|last> occurrence of {<word>} in column {<columnIndex>} start_at {<rowIndex>} as {<variableKey>}"
            }]
        }, {
            "CreationDate": "2022-Sep-29",
            "Description": "Change the format of an Excel's numeric date and save the value in a varable",
            "Example": ["FormatExcelDate {20115} to format {dd-MM-yyyy} as {formatedDate}\r"],
            "Name": "FormatExcelDate",
            "Params": ["excelNumericDate", "formatString", "varKey"],
            "ShortDescription": "Convert an Excel date to another format",
            "Syntax": ["FormatExcelDate {<excelNumericDate>} to format {<formatString>} as {<varKey>}"],
            "SyntaxDetail": [{
                "Instruction": "FormatExcelDate {<excelNumericDate>} to format {<formatString>} as {<varKey>}"
            }]
        }, {
            "CreationDate": "2019-Sep-18",
            "Description": "Freeze a row to make it visible all the time. Index start from 1. To unfreeze rows, use -1 as the rowIndex.",
            "Example": ["FreezePane {MyWorksheet} in_row {2}\r", "FreezePane {MyWorksheet} in_row {-1}\r"],
            "Name": "FreezePane",
            "Params": ["worksheetKey", "rowIndex"],
            "ShortDescription": "Freeze a row to make it visible all the time.",
            "Syntax": ["FreezePane {<worksheetKey>} in_row {<rowIndex>}"],
            "SyntaxDetail": [{
                "Instruction": "FreezePane {<worksheetKey>} in_row {<rowIndex>}"
            }]
        }, {
            "CreationDate": "2019-Jan-07",
            "Description": "Get the value of a single cell and save as a variable. Column and Row indexes start from 1.",
            "Example": ["GetCellValue from the worksheet WorkSheetName in cell {1,2} and save as promedio\r", "GetCellValue from the worksheet WorkSheetName in column {5} and row {7} and save as constante\r"],
            "Name": "GetCellValue",
            "Params": ["worksheetKey", "cellName", "columnIndex", "rowIndex", "varName"],
            "ShortDescription": "Get the value of a cell and save it in a variable.",
            "Syntax": ["GetCellValue from the worksheet <worksheetKey> in cell {<columnIndex>,<rowIndex>} and save as <varName>", "GetCellValue from the worksheet <worksheetKey> in column {<columnIndex>} and row {<rowIndex>} and save as <varName>"],
            "SyntaxDetail": [{
                "Instruction": "GetCellValue from the worksheet <worksheetKey> in cell {<columnIndex>,<rowIndex>} and save as <varName>"
            }, {
                "Instruction": "GetCellValue from the worksheet <worksheetKey> in column {<columnIndex>} and row {<rowIndex>} and save as <varName>"
            }]
        }, {
            "CreationDate": "2019-Nov-06",
            "Description": "Saves the name of a given worksheetKey in a variable.",
            "Example": ["GetSheetName From HistorialWS As sName\r"],
            "Name": "GetSheetName",
            "Params": ["worksheetKey", "VarName"],
            "ShortDescription": "Save the name of a worksheet in a variable.",
            "Syntax": ["GetSheetName From <worksheetKey> As <VarName>"],
            "SyntaxDetail": [{
                "Instruction": "GetSheetName From <worksheetKey> As <VarName>"
            }]
        }, {
            "CreationDate": "2019-May-10",
            "Description": "Saves in a variable, the index of a column or row where a given instruction is found. Instruction can be lastRow, lastCell, visibleCellsCount, visibleCell. It can find the first or last ocurrence of a word in a column, either reading from top to bottom or the other way around\\n Syntax finding occurrences uses regex, so escaped characters are valid as well as regexSyntax. backslash must be escaped with \\\\.",
            "Example": ["GetSpecial lastRow from wsheet and save as LRow\r", "GetSpecial lastCol from wsheet and save as LCol\r", "GetSpecial lastCell from wsheet and save as LCell\r", "GetSpecial visibleCellsCount from wsheet and save as visibleCount\r", "GetSpecial {hoja} appearance {first} of {BANC} in_index_column {5} and_save_as {Bancos} start_at {7}\r", "GetSpecial {hoja} appearance {first} of {BANC} in_index_column {5} and_save_as {Bancos} none\r", "GetSpecial {hoja} appearance {last} of {some\\eg[ex]} in_index_column {5} and_save_as {path} none\r", "GetSpecial {wsheet} column {4} row_appear_start_with {CLAVE} save_as {ClaveInvertido} reverse\r", "GetSpecial {wsheet} column {4} row_appear_start_with {CLAVE} save_as {Clave} none\r"],
            "Name": "GetSpecial",
            "Params": ["worksheetKey", "occurrence", "instruction", "variableKey", "rowIndex", "columnIndex", "word", "startOrder"],
            "ShortDescription": "Get the location of a cell indicated by \"special\" identifiers like lastCell.",
            "Syntax": ["GetSpecial <instruction:lastRow|lastCol|lastCell|visibleCellsCount|visibleCell> from <worksheetKey> and save as <variableKey>", "GetSpecial {<worksheetKey>} appearance {<occurrence:first|last>} of {<word>} in_index_column {<columnIndex>} and_save_as {<variableKey>} none", "GetSpecial {<worksheetKey>} appearance {<occurrence:first|last>} of {<word>} in_index_column {<columnIndex>} and_save_as {<variableKey>} start_at {<rowIndex>}", "GetSpecial {<worksheetKey>} column {<columnIndex>} row_appear_start_with {<word>} save_as {<variableKey>} <startOrder:none|reverse>"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["lastRow", "lastCol", "lastCell", "visibleCellsCount", "visibleCell"],
                    "ParamName": "instruction"
                }],
                "Instruction": "GetSpecial <instruction:lastRow|lastCol|lastCell|visibleCellsCount|visibleCell> from <worksheetKey> and save as <variableKey>"
            }, {
                "Constants": [{
                    "Options": ["first", "last"],
                    "ParamName": "occurrence"
                }],
                "Instruction": "GetSpecial {<worksheetKey>} appearance {<occurrence:first|last>} of {<word>} in_index_column {<columnIndex>} and_save_as {<variableKey>} none"
            }, {
                "Constants": [{
                    "Options": ["first", "last"],
                    "ParamName": "occurrence"
                }],
                "Instruction": "GetSpecial {<worksheetKey>} appearance {<occurrence:first|last>} of {<word>} in_index_column {<columnIndex>} and_save_as {<variableKey>} start_at {<rowIndex>}"
            }, {
                "Constants": [{
                    "Options": ["none", "reverse"],
                    "ParamName": "startOrder"
                }],
                "Instruction": "GetSpecial {<worksheetKey>} column {<columnIndex>} row_appear_start_with {<word>} save_as {<variableKey>} <startOrder:none|reverse>"
            }]
        }, {
            "CreationDate": "2017-Aug-23",
            "Description": "Saves in a variable a list of unique values in a given column. Start_at is the row where the table's name is. Indexes start with 1 except first syntax, where \"start_at\" begins from 0. Col_header option looks for the name of the given column.",
            "Example": ["GetUnique values from \"Sheet2\" col_index \"3\" start_at 2 as promedios\r", "GetUnique values from \"wsheetA\" col_header \"Promedios Totales\" start_at 2 as promedios\r", "GetUnique values from {hoja} col_index {2} start_at {7} as {etiquetas} filter\r"],
            "Name": "GetUnique",
            "Params": ["worksheetKey", "colIndex", "colHeader", "rowIndex", "variableName"],
            "ShortDescription": "Saves in a variable a list of unique values in a given column.",
            "Syntax": ["GetUnique values from \"<worksheetKey>\" col_index \"<index>\" start_at <rowIndex> as <variableName>", "GetUnique values from \"<worksheetKey>\" col_header \"<header>\" start_at <rowIndex> as <variableName>", "GetUnique values from {<worksheetKey>} col_index {<colIndex>} start_at {<rowIndex>} as {<variableName>} filter"],
            "SyntaxDetail": [{
                "Instruction": "GetUnique values from \"<worksheetKey>\" col_index \"<index>\" start_at <rowIndex> as <variableName>"
            }, {
                "Instruction": "GetUnique values from \"<worksheetKey>\" col_header \"<header>\" start_at <rowIndex> as <variableName>"
            }, {
                "Instruction": "GetUnique values from {<worksheetKey>} col_index {<colIndex>} start_at {<rowIndex>} as {<variableName>} filter"
            }]
        }, {
            "CreationDate": "2020-Jun-19",
            "Description": "When an XML was loaded to the excel, excel autobuilds the corresponding schema. This schema may not include all the validation rules desired. This function can be used for schema analysis and improvement, before setting a final xsd to be loaded to Excel.",
            "Example": ["GetXSD from wbLibro to \"C:\\templates\\facturasSchema.xsd\"\r"],
            "Name": "GetXSD",
            "Params": ["workbookKey", "path"],
            "ShortDescription": "Extract the schema from a previously loaded XML in excel.",
            "Syntax": ["GetXSD from <workbookKey> to \"<path>\""],
            "SyntaxDetail": [{
                "Instruction": "GetXSD from <workbookKey> to \"<path>\""
            }]
        }, {
            "CreationDate": "2019-Dec-10",
            "Description": "Move the active cell to a given a sheet and a cell range. The cell can be either a single one like A4 or a range such as A1:B3.",
            "Example": ["GoToCell {miHoja} cell {G5}\r", "GoToCell {miHoja} cell {G5:K10}\r"],
            "Name": "GoToCell",
            "Params": ["wsName", "cellName"],
            "ShortDescription": "Move the active cell to a given a sheet.",
            "Syntax": ["GoToCell {<wsName>} cell {<cellName>}"],
            "SyntaxDetail": [{
                "Instruction": "GoToCell {<wsName>} cell {<cellName>}"
            }]
        }, {
            "CreationDate": "2020-Aug-26",
            "Description": "Groups a range of rows or columns. For the rows it is only needed the numbers. For the columns, it must be specified the first cell of each column.",
            "Example": ["GroupRange rows in sheet range 5:10\r", "GroupRange cols in sheet range c1:e1\r"],
            "Name": "GroupRange",
            "Params": ["orientation", "worksheetKey", "firstCell", "lastCell"],
            "ShortDescription": "Groups a range of rows or columns.",
            "Syntax": ["GroupRange <orientation:rows|cols> in <worksheetKey> range <firstCell>:<lastCell>"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["rows", "cols"],
                    "ParamName": "orientation"
                }],
                "Instruction": "GroupRange <orientation:rows|cols> in <worksheetKey> range <firstCell>:<lastCell>"
            }]
        }, {
            "CreationDate": "2017-Aug-01",
            "Description": "Ensures that a column header exists, if false inserts the column in a given index.",
            "Example": ["IfColExists WSheetA \"Totales\" 20\r"],
            "Name": "IfColExists",
            "Params": ["worksheetKey", "headerName", "newcolIndex"],
            "ShortDescription": "Ensures that a column header exists.",
            "Syntax": ["IfColExists <worksheetKey> \"<headerName>\" <newcolIndex>"],
            "SyntaxDetail": [{
                "Instruction": "IfColExists <worksheetKey> \"<headerName>\" <newcolIndex>"
            }]
        }, {
            "CreationDate": "2017-Aug-01",
            "Description": "Looks for all ocurrences of a given value in columnSearch, it may be a substring. If found, it copies the contents of the row from columnPaste to columnCopy. Valid column names must be placed.",
            "Example": ["IfContains SheetA \"Status\" value \"OK\" then set \"Total\" value \"Approved\"\r", "IfContains SheetA \"Concept\" value \"Impuesto\" then set \"Import\" value \"Deductions\"\r"],
            "Name": "IfContains",
            "Params": ["worksheetKey", "columnSearchHeader", "columnCopyHeader", "columnPasteHeader", "value"],
            "ShortDescription": "Looks for all ocurrences of a value in a column and changes the value in another column.",
            "Syntax": ["IfContains <worksheetKey> \"<columnSearchHeader>\" value \"<value>\" then set \"<columnCopyHeader>\" value \"<columnPasteHeader>\""],
            "SyntaxDetail": [{
                "Instruction": "IfContains <worksheetKey> \"<columnSearchHeader>\" value \"<value>\" then set \"<columnCopyHeader>\" value \"<columnPasteHeader>\""
            }]
        }, {
            "CreationDate": "2019-May-23",
            "Description": "In the column index fill every cell that is empty with a value, all within the used range of cells.",
            "Example": ["IfEmpty Hoja col_index {3} put \"0\"\r"],
            "Name": "IfEmpty",
            "Params": ["worksheetKey", "colIndex", "value"],
            "ShortDescription": "Fill empty values in a column.",
            "Syntax": ["IfEmpty <worksheetKey> col_index {<colIndex>} put \"<value>\""],
            "SyntaxDetail": [{
                "Instruction": "IfEmpty <worksheetKey> col_index {<colIndex>} put \"<value>\""
            }]
        }, {
            "CreationDate": "2017-Aug-01",
            "Description": "Import an image in an excel file in a specific position.",
            "Example": ["ImportImage from \"C:\\Users\\Innovation\\Desktop\\TuringExpo\\Local\\screenshots\\CaptureImage.png\" in the worksheet \"WS\" in the cell \"B3\"\r", "ImportImage from \"C:\\Users\\Innovation\\Desktop\\TuringExpo\\Local\\screenshots\\CaptureImage.png\" in the worksheet \"WS\" in the row \"4\" in the column \"2\"\r"],
            "Name": "ImportImage",
            "Params": ["ImagePath", "worksheetKey", "Cell", "Row", "Column"],
            "ShortDescription": "Import an image to a specific position.",
            "Syntax": ["ImportImage from \"<ImagePath>\" in the worksheet \"<worksheetKey>\" in the cell \"<Cell>\"", "ImportImage from \"<ImagePath>\" in the worksheet \"<worksheetKey>\" in the row \"<Row>\" and in the column \"<Column>\""],
            "SyntaxDetail": [{
                "Instruction": "ImportImage from \"<ImagePath>\" in the worksheet \"<worksheetKey>\" in the cell \"<Cell>\""
            }, {
                "Instruction": "ImportImage from \"<ImagePath>\" in the worksheet \"<worksheetKey>\" in the row \"<Row>\" and in the column \"<Column>\""
            }]
        }, {
            "CreationDate": "2017-Aug-01",
            "Description": "Inserts a Column at index (1-based).",
            "Example": ["InsertCol in Sheet1 at 6\r"],
            "Name": "InsertCol",
            "Params": ["worksheetKey", "colIndex"],
            "ShortDescription": "Insert a Column to the worksheet.",
            "Syntax": ["InsertCol in <worksheetKey> at <colIndex>"],
            "SyntaxDetail": [{
                "Instruction": "InsertCol in <worksheetKey> at <colIndex>"
            }]
        }, {
            "CreationDate": "2017-Aug-01",
            "Description": "Inserts a Row at index (1-based).",
            "Example": ["InsertRow in Sheet4 at 6\r"],
            "Name": "InsertRow",
            "Params": ["worksheetKey", "rowIndex"],
            "ShortDescription": "Insert a Row to the worksheet.",
            "Syntax": ["InsertRow in <worksheetKey> at <rowIndex>"],
            "SyntaxDetail": [{
                "Instruction": "InsertRow in <worksheetKey> at <rowIndex>"
            }]
        }, {
            "CreationDate": "2017-Nov-13",
            "Description": "Not working yet. Check if a cell's value matches the given regex. Functions may be ActualValue, ActualRow or excelium functions.",
            "Example": ["IsRegexMatch \"([0-9]+)(?!mm)\" in sheet Sheet1 in columns [3]\r", "IsRegexMatch \"[0-9]+\" in sheet WSheet2 in headers [Fechas]\r", "IsRegexMatch \"([0-9]+)(?!mm)\" in sheet SheetA in columns [4] else value \"No coincide\"\r", "IsRegexMatch \"[0-9]+\" in sheet Sheet2 in headers [Fechas] else value \"Sin fecha\"\r", "IsRegexMatch \"[0-9]+\" in sheet Sheet2 in headers [Fechas] else functions [ActualValue, ActualRow, LoadWB]\r"],
            "Name": "IsRegexMatch",
            "Params": ["regex", "worksheetKey", "colindex", "colheader", "value", "functions"],
            "ShortDescription": "Not working yet. Check for regex matches.",
            "Syntax": ["IsRegexMatch \"regex\" in sheet <worksheetKey> in columns [<colindex>]", "IsRegexMatch \"regex\" in sheet <worksheetKey> in headers [<colheader>]", "IsRegexMatch \"regex\" in sheet <worksheetKey> in columns [<colindex>] else value \"<value>\"", "IsRegexMatch \"regex\" in sheet <worksheetKey> in headers [<colheader>] else value \"<value>\"", "IsRegexMatch \"regex\" in sheet <worksheetKey> in columns [<colindex>] else functions [<functions>]", "IsRegexMatch \"regex\" in sheet <worksheetKey> in headers [<colheader>] else functions [<functions>]"],
            "SyntaxDetail": [{
                "Instruction": "IsRegexMatch \"regex\" in sheet <worksheetKey> in columns [<colindex>]"
            }, {
                "Instruction": "IsRegexMatch \"regex\" in sheet <worksheetKey> in headers [<colheader>]"
            }, {
                "Instruction": "IsRegexMatch \"regex\" in sheet <worksheetKey> in columns [<colindex>] else value \"<value>\""
            }, {
                "Instruction": "IsRegexMatch \"regex\" in sheet <worksheetKey> in headers [<colheader>] else value \"<value>\""
            }, {
                "Instruction": "IsRegexMatch \"regex\" in sheet <worksheetKey> in columns [<colindex>] else functions [<functions>]"
            }, {
                "Instruction": "IsRegexMatch \"regex\" in sheet <worksheetKey> in headers [<colheader>] else functions [<functions>]"
            }]
        }, {
            "CreationDate": "2017-Aug-01",
            "Description": "Deletes all columns except those specified by a given index. Indexes begin with 1.",
            "Example": ["KeepCols from WSheet1 at [3,4,7]\r"],
            "Name": "KeepCols",
            "Params": ["worksheetKey", "index"],
            "ShortDescription": "Deletes all columns except those specified by a given index.",
            "Syntax": ["KeepCols from <worksheetKey> at [<index1>,<index2>,...,<indexN>]"],
            "SyntaxDetail": [{
                "Instruction": "KeepCols from <worksheetKey> at [<index1>,<index2>,...,<indexN>]"
            }]
        }, {
            "CreationDate": "2017-Aug-01",
            "Description": "Deletes all columns except those specified by Name. It is case sensitive. Currently all columns must have a header for it to work correctly.",
            "Example": ["KeepColsHeaders from WSheetA [\"Costos\",\"Fechas\",\"Totales\"]\r"],
            "Name": "KeepColsHeaders",
            "Params": ["worksheetKey", "header1", "header2", "headerN"],
            "ShortDescription": "Deletes all columns except those specified by Name.",
            "Syntax": ["KeepColsHeaders from <worksheetKey> [\"<header1>\",\"<header2>\",...,\"<headerN>\"]"],
            "SyntaxDetail": [{
                "Instruction": "KeepColsHeaders from <worksheetKey> [\"<header1>\",\"<header2>\",...,\"<headerN>\"]"
            }]
        }, {
            "CreationDate": "2018-Jun-26",
            "Description": "Deletes all data except headers (considering headers are in row 1).",
            "Example": ["KeepHeaders from WSheetA\r"],
            "Name": "KeepHeaders",
            "Params": ["worksheetKey"],
            "ShortDescription": "Deletes all data except headers.",
            "Syntax": ["KeepHeaders from <worksheetKey>"],
            "SyntaxDetail": [{
                "Instruction": "KeepHeaders from <worksheetKey>"
            }]
        }, {
            "CreationDate": "2017-Aug-01",
            "Description": "Deletes rows acording to a list of values in a given column index. Index begins with 1. \"In\" syntax will delete all rows that do not match the given list values. \"Not\" syntax will delete only those that match the given list. Date format in cells is currently not considered.",
            "Example": ["KeepRows from wsheetA where 5 not OK start_at 2\r", "KeepRows from wsheetA where 1 in [\"Monday\", \"Tuesday\", \"Friday\", \"Sunday\"]\r", "KeepRows from wsheetA where 3 not [\"Pizza\", \"Salad\", \"Soup\"]\r"],
            "Name": "KeepRows",
            "Params": ["worksheetKey", "colIndex", "something", "rowIndex", "val1", "valN"],
            "ShortDescription": "Deletes rows acording to a list of values in a given column index.",
            "Syntax": ["KeepRows from <worksheetKey> where <colIndex> not <something> start_at <rowIndex>", "KeepRows from <worksheetKey> where <colIndex> in [\"<val1>\", \"...\", \"<valN>\"]", "KeepRows from <worksheetKey> where <colIndex> not [\"<val1>\", \"...\", \"<valN>\"]"],
            "SyntaxDetail": [{
                "Instruction": "KeepRows from <worksheetKey> where <colIndex> not <something> start_at <rowIndex>"
            }, {
                "Instruction": "KeepRows from <worksheetKey> where <colIndex> in [\"<val1>\", \"...\", \"<valN>\"]"
            }, {
                "Instruction": "KeepRows from <worksheetKey> where <colIndex> not [\"<val1>\", \"...\", \"<valN>\"]"
            }]
        }, {
            "CreationDate": "2021-Mar-30",
            "Description": "Loads a Chart from a Worksheet to a variable for future reference. ",
            "Example": ["LoadChart {Chart 1} of worksheet WSChart as graficakey\r"],
            "Name": "LoadChart",
            "Params": ["NameChart", "worksheetKey", "chartKey"],
            "ShortDescription": "Loads a Chart from a Worksheet to a variable.",
            "Syntax": ["LoadChart {NameChart} of worksheet <worksheetKey> as <chartKey>"],
            "SyntaxDetail": [{
                "Instruction": "LoadChart {NameChart} of worksheet <worksheetKey> as <chartKey>"
            }]
        }, {
            "CreationDate": "2017-Aug-01",
            "Description": "Load a CSV file as a workbook given a delimiter. WorksheetKey is saved with the same name as the WorkbookKey. Delimiters can be any single character or in the simple syntax it can be \"fixed\"; use TAB as delimiter for tab separated files. Fixed length files must be separated by spaces. For the formated syntax, values can be Text, General for numbers, and date formats YMD, MDY and DMY. Non specified columns are formated as General.",
            "Example": ["LoadCSV \"C:\\Users\\user.surname\\Desktop\\LoadCSV\\file.csv\" separated_by ; as delimiter\r", "LoadCSV \"C:\\Users\\user.surname\\Desktop\\LoadCSV\\file.txt\" separated_by fixed as delimiter\r", "LoadCSV \"C:\\Users\\user.surname\\Desktop\\LoadCSV\\file.txt\" separated_by | as CSVKey with format [ ]\r", "LoadCSV \"C:\\Users\\user.surname\\Desktop\\LoadCSV\\file.txt\" separated_by , as CSVKey with format [General, Text, Text, YMD]\r"],
            "ExtraDocs": "https://innotekfilestore.file.core.windows.net/frida-docs/Readers/Excel/Articles/LoadCSV.pdf",
            "Name": "LoadCSV",
            "Params": ["Filepath", "delimeter", "workbookKey", "posibleFormats"],
            "ShortDescription": "Open a csv file as a workbook.",
            "Syntax": ["LoadCSV \"<filepath>\" separated_by <delimiter> as <workbookKey>", "LoadCSV \"<filepath>\" separated_by <delimiter> as <workbookKey> with format [<posibleFormats:Text,General,YMD,MDY,DMY,Skip>]"],
            "SyntaxDetail": [{
                "Instruction": "LoadCSV \"<filepath>\" separated_by <delimiter> as <workbookKey>"
            }, {
                "Constants": [{
                    "Options": ["Text,General,YMD,MDY,DMY,Skip"],
                    "ParamName": "posibleFormats"
                }],
                "Instruction": "LoadCSV \"<filepath>\" separated_by <delimiter> as <workbookKey> with format [<posibleFormats:Text,General,YMD,MDY,DMY,Skip>]"
            }]
        }, {
            "CreationDate": "2019-Nov-27",
            "Description": "Load a csv file separated by a delimiter (, or ;) as a workbook identified with a given workbook key. Use the ending flag CSVExclusive for Excel to load the original .csv file without creating a .txt file.",
            "Example": ["LoadCSV2 \"C:\\Users\\user.surname\\Desktop\\LoadCSV\\file.csv\" separated_by , as MyWorkBook\r", "LoadCSV2 \"C:\\Users\\user.surname\\Desktop\\LoadCSV\\file.csv\" separated_by , as MyWorkBook CSVExclusive\r"],
            "Name": "LoadCSV2",
            "Params": ["filePath", "delimiter", "workbookKey"],
            "ShortDescription": "Open a csv file separated by (, or ;) as a workbook.",
            "Syntax": ["LoadCSV2 \"<filePath>\" separated_by <delimiter> as <workbookKey>", "LoadCSV2 \"<filePath>\" separated_by <delimiter> as <workbookKey> CSVExclusive"],
            "SyntaxDetail": [{
                "Instruction": "LoadCSV2 \"<filePath>\" separated_by <delimiter> as <workbookKey>"
            }, {
                "Instruction": "LoadCSV2 \"<filePath>\" separated_by <delimiter> as <workbookKey> CSVExclusive"
            }]
        }, {
            "CreationDate": "2019-Jun-06",
            "Description": "Load a csv file separated by a delimiter (, or ;) as a workbook identified with a given workbook key.",
            "Example": ["LoadCSVFixed \"C:\\Users\\user.surname\\Desktop\\LoadCSV\\file.csv\" separated_by , as MyWorkBook\r"],
            "Name": "LoadCSVFixed",
            "Params": ["filePath", "delimeter", "workbookKey"],
            "ShortDescription": "Open a csv file separated by (, or ;) as a workbook.",
            "Syntax": ["LoadCSVFixed \"<filePath>\" separated_by <delimiter> as <workbookKey>"],
            "SyntaxDetail": [{
                "Instruction": "LoadCSVFixed \"<filePath>\" separated_by <delimiter> as <workbookKey>"
            }]
        }, {
            "CreationDate": "2018-Jan-20",
            "Description": "Loads a file inside a given the path, searching for up to two query parameters. Secondval can be EMPTY when there are no more search parameters left.",
            "Example": ["LoadFileFrom \"<<WorkBookDeck>>\" containing COBRO and Date{MMMM(-1) es} as WorkBookC\r"],
            "Name": "LoadFileFrom",
            "Params": ["workbookPath", "firstval", "secondval", "key"],
            "ShortDescription": "Loads a file based in up to two query parameters.",
            "Syntax": ["LoadFileFrom \"<workbookPath>\" containing <firstval> and <secondval> as <key>"],
            "SyntaxDetail": [{
                "Instruction": "LoadFileFrom \"<workbookPath>\" containing <firstval> and <secondval> as <key>"
            }]
        }, {
            "CreationDate": "2017-Aug-01",
            "Description": "Opens a given workbook and saves a variable for future reference. Optional parameters are: Password:\"<password>\", UpdateLinks:yes|no ",
            "Example": ["LoadWBook \"C:\\Users\\productivity\\Desktop\\Book1.xlsx\" as book1\r", "LoadWBook \"C:\\Users\\productivity\\Desktop\\SecretBook.xlsx\" as book1 with_parameters Password: \"1234\"\r", "LoadWBook \"C:\\Users\\productivity\\Desktop\\Summary.xlsx\" as book1 with_parameters UpdateLinks: yes\r"],
            "Name": "LoadWBook",
            "Params": ["workbookPath", "workbookKey", "password", "updateLinksAnswer", "updLinks"],
            "ShortDescription": "Open a workbook.",
            "Syntax": ["LoadWBook \"<workbookPath>\" as <workbookKey>", "LoadWBook \"<workbookPath>\" as <workbookKey> with_parameters UpdateLinks: <updLinks:yes|no>", "LoadWBook \"<workbookPath>\" as <workbookKey> with_parameters Password: \"<password>\"", "LoadWBook \"<workbookPath>\" as <workbookKey> with_parameters Password: \"<password>\" UpdateLinks: <updLinks:yes|no>"],
            "SyntaxDetail": [{
                "Instruction": "LoadWBook \"<workbookPath>\" as <workbookKey>"
            }, {
                "Constants": [{
                    "Options": ["yes", "no"],
                    "ParamName": "updLinks"
                }],
                "Instruction": "LoadWBook \"<workbookPath>\" as <workbookKey> with_parameters UpdateLinks: <updLinks:yes|no>"
            }, {
                "Instruction": "LoadWBook \"<workbookPath>\" as <workbookKey> with_parameters Password: \"<password>\""
            }, {
                "Constants": [{
                    "Options": ["yes", "no"],
                    "ParamName": "updLinks"
                }],
                "Instruction": "LoadWBook \"<workbookPath>\" as <workbookKey> with_parameters Password: \"<password>\" UpdateLinks: <updLinks:yes|no>"
            }]
        }, {
            "CreationDate": "2018-Jan-30",
            "Description": "Loads a Worksheet searching it by part of its name within a workbook.",
            "Example": ["LoadWSfrom WorkBookADC containing \"abl\" as TblWorkSheetADC\r"],
            "Name": "LoadWSfrom",
            "Params": ["workbookKey", "text", "worksheetKey"],
            "ShortDescription": "Loads a Worksheet searching it by part of its name within a workbook.",
            "Syntax": ["LoadWSfrom <workbookKey> containing \"<text>\" as <worksheetKey>"],
            "SyntaxDetail": [{
                "Instruction": "LoadWSfrom <workbookKey> containing \"<text>\" as <worksheetKey>"
            }]
        }, {
            "CreationDate": "2017-Aug-01",
            "Description": "Loads a Worksheet to a variable for future reference. Remember that index option is 1-based.",
            "Example": ["LoadWSheet Book1 sheet \"Sheet 1\" as Finanzas\r", "LoadWSheet Book1 sheet_index 1 as Finanzas\r"],
            "Name": "LoadWSheet",
            "Params": ["workbookKey", "sheetName", "sheetIndex", "worksheetKey"],
            "ShortDescription": "Loads a Worksheet to a variable.",
            "Syntax": ["LoadWSheet <workbookKey> sheet \"<sheetName>\" as <worksheetKey>", "LoadWSheet <workbookKey> sheet_index <sheetIndex> as <worksheetKey>", "LoadWSheet {<workbookKey>} sheet_exact {<sheetName>} as {<worksheetKey>}"],
            "SyntaxDetail": [{
                "Instruction": "LoadWSheet <workbookKey> sheet \"<sheetName>\" as <worksheetKey>"
            }, {
                "Instruction": "LoadWSheet <workbookKey> sheet_index <sheetIndex> as <worksheetKey>"
            }, {
                "Instruction": "LoadWSheet {<workbookKey>} sheet_exact {<sheetName>} as {<worksheetKey>}"
            }]
        }, {
            "CreationDate": "2020-Jun-19",
            "Description": "Loads an XML Map to the workbook for exporting data in an XML. When available load the schema (XSD) file, if not available an example output of the XML can be loaded. Refer to https://spreadsheeto.com/xml/ for excel usage",
            "Example": ["LoadXSD path \"C:\\templates\\facturaSchema.xsd\" to bookWB\r", "LoadXSD path \"C:\\templates\\factura.xml\" to bookWB\r"],
            "Name": "LoadXSD",
            "Params": ["path", "workbookKey"],
            "ShortDescription": "Loads an XML Map to the workbook for exporting data in an XML.",
            "Syntax": ["LoadXSD path \"<XML_or_XSD_path>\" to <workbookKey>"],
            "SyntaxDetail": [{
                "Instruction": "LoadXSD path \"<XML_or_XSD_path>\" to <workbookKey>"
            }]
        }, {
            "CreationDate": "2017-Oct-31",
            "Description": "Makes a zip file with the given workbook keys and saves it in the first workbook's location. Currently not working.",
            "Example": ["MakeZip [Book3, Wbook2] as \"Exceles\"\r"],
            "Name": "MakeZip",
            "Params": ["workbookKey1", "workbookKey2", "workbookKeyN", "zipName"],
            "ShortDescription": "Currently not working. Makes a zip file made out of workbooks.",
            "Syntax": ["MakeZip [<workbookKey1>, <workbookKey2>, ..., <workbookKeyN>] as \"<zipName>\""],
            "SyntaxDetail": [{
                "Instruction": "MakeZip [<workbookKey1>, <workbookKey2>, ..., <workbookKeyN>] as \"<zipName>\""
            }]
        }, {
            "CreationDate": "2017-Aug-01",
            "Description": "Moves a column to a diferent index. Indexes start with 1.",
            "Example": ["MoveCol WSheet2 from 5 to 9\r"],
            "Name": "MoveCol",
            "Params": ["worksheetKey", "originIndex", "destIndex"],
            "ShortDescription": "Moves a column to a diferent one.",
            "Syntax": ["MoveCol <worksheetKey> from <originIndex> to <destIndex>"],
            "SyntaxDetail": [{
                "Instruction": "MoveCol <worksheetKey> from <originIndex> to <destIndex>"
            }]
        }, {
            "CreationDate": "2020-Sep-01",
            "Description": "Move a pivot table field to another field type (row|column|value|filter). It can be moved using the field name or the PivotFieldKey.",
            "Example": ["MoveField pivotFieldKey1 to column\r", "MoveField from the pivottable PivotTableKey1 and name \"Names\" to row\r"],
            "Name": "MoveField",
            "Params": ["fieldType", "pivotTableKey", "fieldName", "pivotFieldKey"],
            "ShortDescription": "Move a pivot table field to another field type.",
            "Syntax": ["MoveField <pivotFieldKey> to <fieldType:row|column|value|filter>", "MoveField from the pivottable <pivotTableKey> and name \"<fieldName>\" to <fieldType:row|column|value|filter>"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["row", "column", "value", "filter"],
                    "ParamName": "fieldType"
                }],
                "Instruction": "MoveField <pivotFieldKey> to <fieldType:row|column|value|filter>"
            }, {
                "Constants": [{
                    "Options": ["row", "column", "value", "filter"],
                    "ParamName": "fieldType"
                }],
                "Instruction": "MoveField from the pivottable <pivotTableKey> and name \"<fieldName>\" to <fieldType:row|column|value|filter>"
            }]
        }, {
            "CreationDate": "2019-Oct-18",
            "Description": "Moves a row to a diferent index. Indexes start with 1.",
            "Example": ["MoveRow {sheet} from {5} to {2}\r", "MoveRow {sheet} from_column_index {4} start_with {BANCA} to_row {6}\r", "MoveRow {sheet} range_start {50} range_end {75} to_row {5}\r"],
            "Name": "MoveRow",
            "Params": ["worksheetKey", "originIndex", "destinyIndex", "columnIndex", "wordStart", "startRow", "endRow", "destinyRow"],
            "ShortDescription": "Moves a row to a diferent one.",
            "Syntax": ["MoveRow {<worksheetKey>} from {<originIndex>} to {<destinyIndex>}", "MoveRow {<worksheetKey>} range_start {<startRow>} range_end {<endRow>} to_row {<destinyRow>}"],
            "SyntaxDetail": [{
                "Instruction": "MoveRow {<worksheetKey>} from {<originIndex>} to {<destinyIndex>}"
            }, {
                "Instruction": "MoveRow {<worksheetKey>} range_start {<startRow>} range_end {<endRow>} to_row {<destinyRow>}"
            }]
        }, {
            "CreationDate": "2019-Nov-27",
            "Description": "Move a worksheet to a different position in the same workbook.",
            "Example": ["MoveSheet libro sheet_key mover before_key referencia\r", "MoveSheet Book sheet_key saldos before_name Sheet2\r", "MoveSheet miLibro sheet_key usuarios after_key hojaFija\r", "MoveSheet b1 sheet_key totales after_name November 2019\r", "MoveSheet cuentas sheet_key month toEnd\r"],
            "Name": "MoveSheet",
            "Params": ["workbookKey", "worksheetKey", "worksheetName", "worksheetKey2"],
            "ShortDescription": "Move a worksheet to a different position in the same workbook.",
            "Syntax": ["MoveSheet <workbookKey> sheet_key <worksheetKey> before_key <worksheetKey2>", "MoveSheet <workbookKey> sheet_key <worksheetKey> before_name <worksheetName>", "MoveSheet <workbookKey> sheet_key <worksheetKey> after_key <worksheetKey2>", "MoveSheet <workbookKey> sheet_key <worksheetKey> after_name <worksheetName>", "MoveSheet <workbookKey> sheet_key <worksheetKey> toEnd"],
            "SyntaxDetail": [{
                "Instruction": "MoveSheet <workbookKey> sheet_key <worksheetKey> before_key <worksheetKey2>"
            }, {
                "Instruction": "MoveSheet <workbookKey> sheet_key <worksheetKey> before_name <worksheetName>"
            }, {
                "Instruction": "MoveSheet <workbookKey> sheet_key <worksheetKey> after_key <worksheetKey2>"
            }, {
                "Instruction": "MoveSheet <workbookKey> sheet_key <worksheetKey> after_name <worksheetName>"
            }, {
                "Instruction": "MoveSheet <workbookKey> sheet_key <worksheetKey> toEnd"
            }]
        }, {
            "CreationDate": "2018-Mar-02",
            "Description": "Add a filter to the used range in a sheet with many criteria. Column index begins with 1 and indicates where the filter will be applied. \\nStart at is the row where the filter controls will be placed, and the lower rows will be subject to the filter. \\nThe criteria indicates filter values and it can have wildcards (*?). \\nThe third syntax allows to filter by more than 2 criteria, it is only needed to specify the column header where the criteria will apply. Using the same criteria and order in the third syntax may cause some troubles. \\nThe MANAGE CRITERIA option solves this problems reordering the criterias. \\nStart_at syntax can filter with excluding criteria. Date filtering may need to indicate the \"date source\" to filter it correctly. Default dates are considered in english format month,day,year. \\nFor more explanation reffer to Excel's advanced filters documentation.",
            "Example": ["MultiFilter from Sheet2 in_column_index 5 with_criteria [HEB, Home Depot]\r", "MultiFilter from Sheet2 in_column_index 5 with_criteria [venta-201512, venta-2016*]\r", "MultiFilter from Sheet2 in_column_index 5 start_at 2 with_criteria [HEB, Home Depot]\r", "MultiFilter from Sheet2 in_range A:B with_criteria [Apellidos, *Gonzalez*, *Gonzalo*, *Gonzo*; Nombres, *Gonzo*, Gonzalo, *Gonzalez*]\r", "MultiFilter from Sheet2 start_at 5 find with_criteria [Pais, Alemania, UK, Japon; Ciudad, Berlin, Londres, Tokio]\r", "MultiFilter from Sheet2 start_at 5 find with_criteria [Estatus,Pago; Importe,<0]\r", "MultiFilter from Sheet2 start_at 5 find with_criteria [FechaInicio, 06/05/2022, 07/05/2022] date source [FechaInicio,dd/MM/yyyy]\r", "MultiFilter from Sheet2 start_at 5 except with_criteria [Estatus, Cancelado, Vencido]\r", "MultiFilter from Sheet2 start_at 5 except with_criteria [Estatus, Cancelado, Vencido; Id,,,12314]\r"],
            "Name": "MultiFilter",
            "Params": ["worksheetKey", "columnIndex", "rowIndex", "headerRow", "criteria", "columnHeader"],
            "ShortDescription": "Filter a column with many criteria.",
            "Syntax": ["MultiFilter from <worksheetKey> in_column_index <columnIndex> with_criteria [<criteria 1, <criteria 2>]", "MultiFilter from <worksheetKey> in_column_index <columnIndex> start_at <rowIndex> with_criteria [<criteria 1, criteria 2>]", "MultiFilter from <worksheetKey> in_range <range|UsedRange> with_criteria [<columnHeader 1>, <criteria 1>, <criteria 2>,..., criteria n; <columnHeader 2>, <criteria 1>, <criteria 2>,..., <criteria n>;...; <columnHeader n>, <criteria 1>, <criteria 2>,..., <criteria n>]", "MultiFilter from <worksheetKey> in_range <range|UsedRange> with_criteria [<columnHeader 1>, <criteria 1>, <criteria 2>,..., criteria n; <columnHeader 2>, <criteria 1>, <criteria 2>,..., <criteria n>;...; <columnHeader n>, <criteria 1>, <criteria 2>,..., <criteria n>] -managecriteria", "MultiFilter from <worksheetKey> start_at <headerRow> <find|except> with_criteria [<columnHeader 1>, <criteria 1>, <criteria 2>,..., <criteria n>; <columnHeader 2>, <criteria 1>, <criteria 2>,..., <criteria n>;...; <columnHeader n>, <criteria 1>, <criteria 2>,..., <criteria n>]", "MultiFilter from <worksheetKey> start_at <headerRow> <find|except> with_criteria [<columnHeader 1>, <criteria 1>, <criteria 2>,..., <criteria n>; <columnHeader 2>, <criteria 1>, <criteria 2>,..., <criteria n>;...; <columnHeader n>, <criteria 1>, <criteria 2>,..., <criteria n>] date source [<columnHeader 1>,<criteria 1>;...;<columnHeader n>,<criteria n>]"],
            "SyntaxDetail": [{
                "Instruction": "MultiFilter from <worksheetKey> in_column_index <columnIndex> with_criteria [<criteria 1, <criteria 2>]"
            }, {
                "Instruction": "MultiFilter from <worksheetKey> in_column_index <columnIndex> start_at <rowIndex> with_criteria [<criteria 1, criteria 2>]"
            }, {
                "Instruction": "MultiFilter from <worksheetKey> in_range <range|UsedRange> with_criteria [<columnHeader 1>, <criteria 1>, <criteria 2>,..., criteria n; <columnHeader 2>, <criteria 1>, <criteria 2>,..., <criteria n>;...; <columnHeader n>, <criteria 1>, <criteria 2>,..., <criteria n>]"
            }, {
                "Instruction": "MultiFilter from <worksheetKey> in_range <range|UsedRange> with_criteria [<columnHeader 1>, <criteria 1>, <criteria 2>,..., criteria n; <columnHeader 2>, <criteria 1>, <criteria 2>,..., <criteria n>;...; <columnHeader n>, <criteria 1>, <criteria 2>,..., <criteria n>] -managecriteria"
            }, {
                "Instruction": "MultiFilter from <worksheetKey> start_at <headerRow> <find|except> with_criteria [<columnHeader 1>, <criteria 1>, <criteria 2>,..., <criteria n>; <columnHeader 2>, <criteria 1>, <criteria 2>,..., <criteria n>;...; <columnHeader n>, <criteria 1>, <criteria 2>,..., <criteria n>]"
            }, {
                "Instruction": "MultiFilter from <worksheetKey> start_at <headerRow> <find|except> with_criteria [<columnHeader 1>, <criteria 1>, <criteria 2>,..., <criteria n>; <columnHeader 2>, <criteria 1>, <criteria 2>,..., <criteria n>;...; <columnHeader n>, <criteria 1>, <criteria 2>,..., <criteria n>] date source [<columnHeader 1>,<criteria 1>;...;<columnHeader n>,<criteria n>]"
            }]
        }, {
            "CreationDate": "2017-Aug-01",
            "Description": "Creates a new Workbook in a path where the client wants (only creates file of type \"xlsx\"). You CANNOT use special characters that Windows does NOT allow. WorkbookName is also saved as a variable. \"Create in\" syntax will save the workbook without saving a variable.",
            "Example": ["NewWB in {C:\\Users\\user_name\\Desktop} as {Book_03-03-2019}\r", "NewWB create in {C:\\Users\\user_name\\Desktop\\Book_03-03-2019.xlsx}\r"],
            "Name": "NewWB",
            "Params": ["path", "workbookName", "pathWithName"],
            "ShortDescription": "Create a new workbook.",
            "Syntax": ["NewWB in \"<path>\" as <workbookName>", "NewWB in {<path>} as {<workbookName>}", "NewWB create in {<pathWithName>}"],
            "SyntaxDetail": [{
                "Instruction": "NewWB in \"<path>\" as <workbookName>"
            }, {
                "Instruction": "NewWB in {<path>} as {<workbookName>}"
            }, {
                "Instruction": "NewWB create in {<pathWithName>}"
            }]
        }, {
            "CreationDate": "2017-Aug-01",
            "Description": "Adds a new worksheet to a given workbook. With name sintax allows worksheetKeys to be different from the intended visible name of the sheet.",
            "Example": ["NewWs in Libro1 as Sheet1\r", "NewWs in_Wb Libro1 as WsSheet2 after Sheet1\r", "NewWs in_Wb {Libro1} as {WsSheet2} with name {Procesos en curso} after {Procesos pendientes}\r"],
            "Name": "NewWs",
            "Params": ["workbookKey", "worksheetKey", "worksheetName", "wsName"],
            "ShortDescription": "Add a new worksheet to the workbook.",
            "Syntax": ["NewWs in <workbookKey> as <worksheetKey>", "NewWs in_Wb <workbookKey> as <worksheetKey> after <wsName>", "NewWs in_Wb <workbookKey> as {<worksheetKey>} with name {<worksheetName>} after {<wsName>}"],
            "SyntaxDetail": [{
                "Instruction": "NewWs in <workbookKey> as <worksheetKey>"
            }, {
                "Instruction": "NewWs in_Wb <workbookKey> as <worksheetKey> after <wsName>"
            }, {
                "Instruction": "NewWs in_Wb <workbookKey> as {<worksheetKey>} with name {<worksheetName>} after {<wsName>}"
            }]
        }, {
            "CreationDate": "2020-Jan-10",
            "Description": "Process all the contents of a row, and format them so they are all in Uppercase and with no leading or trailing blank spaces. This works with the UsedRange, so be careful when indicating the row parameter.",
            "Example": ["NormalizeHeaders in mySheet row=5\r"],
            "Name": "NormalizeHeaders",
            "Params": ["sheetKey", "rowIndex"],
            "ShortDescription": "Uppercase all contents in a row.",
            "Syntax": ["NormalizeHeaders in <sheetKey> row=<rowIndex>"],
            "SyntaxDetail": [{
                "Instruction": "NormalizeHeaders in <sheetKey> row=<rowIndex>"
            }]
        }, {
            "CreationDate": "2022-May-17",
            "Description": "Set page properties for printing or saving to PDF. Many PageSetup instructions may be used per worksheet to set for example portrait orientation from range C30:lastT and with automatic scale.\\nOrientation values can be landscape or portrait. \\nScale values can be automatic or scalePercent.",
            "Example": ["PageSetup in {wssheet1} with orientation {landscape}\r", "PageSetup in {wssheet1} with print area {A3:J50}\r", "PageSetup in {wssheet1} with print area {A1:lastC}\r", "PageSetup in {wssheet1} with scale {automatic}\r", "PageSetup in {wssheet1} with scale {70}\r"],
            "Name": "PageSetup",
            "Params": ["worksheetKey", "orientation", "range", "scale"],
            "ShortDescription": "Setup Page properties",
            "Syntax": ["PageSetup in {<worksheetKey>} with orientation {<orientation:landscape|portrait>}", "PageSetup in {<worksheetKey>} with print area {<range>}", "PageSetup in {<worksheetKey>} with scale {<scale:automatic|scalePercent>}"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["landscape", "portrait"],
                    "ParamName": "orientation"
                }],
                "Instruction": "PageSetup in {<worksheetKey>} with orientation {<orientation:landscape|portrait>}"
            }, {
                "Instruction": "PageSetup in {<worksheetKey>} with print area {<range>}"
            }, {
                "Constants": [{
                    "Options": ["automatic", "scalePercent"],
                    "ParamName": "scale"
                }],
                "Instruction": "PageSetup in {<worksheetKey>} with scale {<scale:automatic|scalePercent>}"
            }]
        }, {
            "CreationDate": "2018-Mar-02",
            "Description": "Modify the pivot table's field design. Position can be changed, considering that the value stated is equal or lower than the amount of pivotFields in the same area. Meaning, if there are 2 fields in \"Filter\" type, position, can only be 1 or 2.\\n You can also change the Field Settings to repeat item labels, for example.",
            "Example": ["PivotFieldDesign estadoKey attribute position value 1\r", "PivotFieldDesign poblacionKey attribute subtotals value false\r", "PivotFieldDesign ciudad attribute layoutform value true\r", "PivotFieldDesign UN attribute RepeatItemLabels value true\r"],
            "ExtraDocs": "https://innotekfilestore.file.core.windows.net/frida-docs/Readers/Excel/Articles/Tablas%20Pivote.pdf",
            "Name": "PivotFieldDesign",
            "Params": ["pivotfieldKey", "attributeType", "value"],
            "ShortDescription": "Modify the pivot table's field design and field settings.",
            "Syntax": ["PivotFieldDesign <pivotfieldKey> attribute <attributeType:position|subtotals|layoutform|RepeatItemLabels> value <value>"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["position", "subtotals", "layoutform", "RepeatItemLabels"],
                    "ParamName": "attributeType"
                }],
                "Instruction": "PivotFieldDesign <pivotfieldKey> attribute <attributeType:position|subtotals|layoutform|RepeatItemLabels> value <value>"
            }]
        }, {
            "CreationDate": "2020-Jul-06",
            "Description": "Protects a given workbook or sheet. If there is no password, do not send a text in the password field. \"Book\" can either protect the book from opening or the structure (no other sheets inserted, deleted, etc) in the workbook. \"Sheet\" can protect from modifying images, or cell contents. \\n ProtectProperties values can be OpenBook or Structure",
            "Example": ["Protect {book} by_name {LibroUsado} with_password {secreto} properties [OpenBook]\r", "Protect {sheet} by_name {hoja} with_password {secreto} properties [DrawingObjects, Contents]\r", "Protect {sheet} by_name {hoja} with_password {secreto} properties [Contents]\r"],
            "Name": "Protect",
            "Params": ["item", "workbookKey", "worksheetKey", "password", "protectProperties", "structure"],
            "ShortDescription": "Protect a workbook or sheet.",
            "Syntax": ["Protect {book} by_name {<workbookKey>} with_password {<password>} properties [<protectProperties:OpenBook|Structure>]", "Protect {book} by_name {<workbookKey>} with_password {<password>} properties [<structure>]", "Protect {sheet} by_name {<worksheetKey>} with_password {<password>} properties [<protectProperties:DrawingObjects|Contents>]"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["OpenBook", "Structure"],
                    "ParamName": "protectProperties"
                }],
                "Instruction": "Protect {book} by_name {<workbookKey>} with_password {<password>} properties [<protectProperties:OpenBook|Structure>]"
            }, {
                "Instruction": "Protect {book} by_name {<workbookKey>} with_password {<password>} properties [<structure>]"
            }, {
                "Constants": [{
                    "Options": ["DrawingObjects", "Contents"],
                    "ParamName": "protectProperties"
                }],
                "Instruction": "Protect {sheet} by_name {<worksheetKey>} with_password {<password>} properties [<protectProperties:DrawingObjects|Contents>]"
            }]
        }, {
            "CreationDate": "2018-Jan-16",
            "Description": "Delete cells from a range or an individual cell. The cells will be deleted, therefore cells on the right will be moved.",
            "Example": ["RangeDelete from sheet in A1:B7\r", "RangeDelete from sheet in A5\r"],
            "Name": "RangeDelete",
            "Params": ["worksheetKey", "range"],
            "ShortDescription": "Delete cells from a range.",
            "Syntax": ["RangeDelete from <worksheetKey> in <range>"],
            "SyntaxDetail": [{
                "Instruction": "RangeDelete from <worksheetKey> in <range>"
            }]
        }, {
            "CreationDate": "2018-Jun-20",
            "Description": "Copies a given range in a worksheet to an image stored with a given name in a given path. It considers filters applied in the worksheet.",
            "Example": ["RangeToImage \"A1:C3\" FromSheet \"Sheet1\" FromBook bookWB ToImage \"evidencia.jpg\" InFolder \"C:espaldo\"\r"],
            "Name": "RangeToImage",
            "Params": ["range", "worksheetName", "workbookKey", "imageName", "folderPath"],
            "ShortDescription": "Copy a range of a worksheet to an image.",
            "Syntax": ["RangeToImage \"<range>\" FromSheet \"<worksheetName>\" FromBook <workbookKey> ToImage \"<imageName>\" InFolder \"<folderPath>\""],
            "SyntaxDetail": [{
                "Instruction": "RangeToImage \"<range>\" FromSheet \"<worksheetName>\" FromBook <workbookKey> ToImage \"<imageName>\" InFolder \"<folderPath>\""
            }]
        }, {
            "CreationDate": "2019-Jan-07",
            "Description": "Read a specific cell from a worksheet by its position {<Row>,<Column>}. The index of the column and the row start at 1. Indexes can be LastRow or LastCol and addition and substraction operations can be done within.",
            "Example": ["ReadCell from the worksheet WSheet1 from the cell {100,2} and save its value as {RUC} \r", "ReadCell from the worksheet WSheet1 from the cell {100+4,2-1} and save its value as {RUC} \r", "ReadCell from the worksheet WSheet1 from the cell {LastRow,2} and save its value as {RUC} \r", "ReadCell from the worksheet WSheet1 from the cell {100,LastCol} and save its value as {RUC} \r", "ReadCell from the worksheet WSheet1 from the cell {LastRow - 5,LastCol + 3} and save its value as {RUC}\r"],
            "Name": "ReadCell",
            "Params": ["worksheetKey", "Row", "Column", "variableKey"],
            "ShortDescription": "Read a cell from a worksheet and save it in a variable.",
            "Syntax": ["ReadCell from the worksheet <worksheetKey> from the cell {<Row>,<Column>} and save its value as {<variableKey>}", "ReadCell from the worksheet <worksheetKey> from the cell {LastRow,<Column>} and save its value as {<variableKey>}", "ReadCell from the worksheet <worksheetKey> from the cell {<Row>,LastCol} and save its value as {<variableKey>}", "ReadCell from the worksheet <worksheetKey> from the cell {<Row>-2,<Column>+3} and save its value as {<variableKey>}"],
            "SyntaxDetail": [{
                "Instruction": "ReadCell from the worksheet <worksheetKey> from the cell {<Row>,<Column>} and save its value as {<variableKey>}"
            }, {
                "Instruction": "ReadCell from the worksheet <worksheetKey> from the cell {LastRow,<Column>} and save its value as {<variableKey>}"
            }, {
                "Instruction": "ReadCell from the worksheet <worksheetKey> from the cell {<Row>,LastCol} and save its value as {<variableKey>}"
            }, {
                "Instruction": "ReadCell from the worksheet <worksheetKey> from the cell {<Row>-2,<Column>+3} and save its value as {<variableKey>}"
            }]
        }, {
            "CreationDate": "2019-Jun-07",
            "Description": "Read a specific cell form a Worksheet by position {<Row>,<Column>}, keeping the number format. The index of the column and the row start at 1.",
            "Example": ["ReadCellText from the worksheet {WSheet1} from the cell {100,2} and save its value as {RUC} \r", "ReadCellText from the worksheet {WSheet1} from the cell {100+4,2-1} and save its value as {RUC} \r", "ReadCellText from the worksheet {WSheet1} from the cell {LastRow,2} and save its value as {RUC} \r", "ReadCellText from the worksheet {WSheet1} from the cell {100,LastCol} and save its value as {RUC} \r", "ReadCellText from the worksheet {WSheet1} from the cell {LastRow - 5,LastCol + 3} and save its value as {RUC}\r"],
            "Name": "ReadCellText",
            "Params": ["worksheetKey", "Row", "Column", "varName"],
            "ShortDescription": "Read a cell's value and save it in a variable.",
            "Syntax": ["ReadCellText from the worksheet {<worksheetKey>} from the cell {<Row>,<Column>} and save its value as {<varName>}", "ReadCellText from the worksheet {<worksheetKey>} from the cell {LastRow,<Column>} and save its value as {<varName>}", "ReadCellText from the worksheet {<worksheetKey>} from the cell {<Row>,LastCol} and save its value as {<varName>}", "ReadCellText from the worksheet {<worksheetKey>} from the cell {<Row>-2,<Column>+3} and save its value as {<varName>}"],
            "SyntaxDetail": [{
                "Instruction": "ReadCellText from the worksheet {<worksheetKey>} from the cell {<Row>,<Column>} and save its value as {<varName>}"
            }, {
                "Instruction": "ReadCellText from the worksheet {<worksheetKey>} from the cell {LastRow,<Column>} and save its value as {<varName>}"
            }, {
                "Instruction": "ReadCellText from the worksheet {<worksheetKey>} from the cell {<Row>,LastCol} and save its value as {<varName>}"
            }, {
                "Instruction": "ReadCellText from the worksheet {<worksheetKey>} from the cell {<Row>-2,<Column>+3} and save its value as {<varName>}"
            }]
        }, {
            "CreationDate": "2018-Nov-06",
            "Description": "Read a given column indicated by index and save it in a variable. The index of the column starts at 1. First syntax saves only non-empty values. If the first columns are empty, columnIndex 1 will be the one with values.\\n \"With nulls\" syntax saves also empty values. \\n\"Visible\" syntax will consider filters, and save visible values, in this syntax start_at will read properly without considerations whether the column is empty or not. \\nWarning: Reading a large amount of information will take long to write in the log, consider turning log printing off for this instruction.",
            "Example": ["ReadColumn from the worksheet WS_Sheet with the column index {1} and save its value as {IDs}\r", "ReadColumn from the worksheet WS_Sheet with the column index {1} and save its value as {IDs} with nulls\r", "ReadColumn from the worksheet {banca} with the column index {3} start_at {7} and save its value as {pagos} visible\r", "ReadColumn from the worksheet {banca} with the column index {3} start_at {7} and save its value as {pagos} visible without nulls\r"],
            "Name": "ReadColumn",
            "Params": ["worksheetKey", "columnIndex", "rowIndex", "varName"],
            "ShortDescription": "Read a column and save it in a variable.",
            "Syntax": ["ReadColumn from the worksheet <worksheetKey> with the column index {<columnIndex>} and save its value as {<varName>}", "ReadColumn from the worksheet <worksheetKey> with the column index {<columnIndex>} and save its value as {<varName>} with nulls", "ReadColumn from the worksheet {<worksheetKey>} with the column index {<columnIndex>} start_at {<rowIndex>} and save its value as {<varName>} visible", "ReadColumn from the worksheet {<worksheetKey>} with the column index {<columnIndex>} start_at {<rowIndex>} and save its value as {<varName>} visible without nulls"],
            "SyntaxDetail": [{
                "Instruction": "ReadColumn from the worksheet <worksheetKey> with the column index {<columnIndex>} and save its value as {<varName>}"
            }, {
                "Instruction": "ReadColumn from the worksheet <worksheetKey> with the column index {<columnIndex>} and save its value as {<varName>} with nulls"
            }, {
                "Instruction": "ReadColumn from the worksheet {<worksheetKey>} with the column index {<columnIndex>} start_at {<rowIndex>} and save its value as {<varName>} visible"
            }, {
                "Instruction": "ReadColumn from the worksheet {<worksheetKey>} with the column index {<columnIndex>} start_at {<rowIndex>} and save its value as {<varName>} visible without nulls"
            }]
        }, {
            "CreationDate": "2020-Sep-01",
            "Description": "Read the name of the pivot table fields and save them in a list, this function may help if you are using the MoveField function.",
            "Example": ["ReadFields from PivotFieldKey1 and save as FieldNames        \r"],
            "Name": "ReadFields",
            "Params": ["PivotFieldKey", "VariableKey"],
            "ShortDescription": "Read the name of the pivot table fields and save them in a list.",
            "Syntax": ["ReadFields from <PivotFieldKey> and save as <VariableKey>"],
            "SyntaxDetail": [{
                "Instruction": "ReadFields from <PivotFieldKey> and save as <VariableKey>"
            }]
        }, {
            "CreationDate": "2018-Jun-20",
            "Description": "Loads existing pivot tables in a worksheet to a given pivotTableKey.",
            "Example": ["ReadPivotTable \"Tabla Pivote\" From wsKey As tblPivote\r"],
            "ExtraDocs": "https://innotekfilestore.file.core.windows.net/frida-docs/Readers/Excel/Articles/Tablas%20Pivote.pdf",
            "Name": "ReadPivotTable",
            "Params": ["pivotTableName", "worksheetKey", "pivotTableKey"],
            "ShortDescription": "Load existing pivot tables in a worksheet.",
            "Syntax": ["ReadPivotTable \"<pivotTableName>\" From <worksheetKey> As <pivotTableKey>"],
            "SyntaxDetail": [{
                "Instruction": "ReadPivotTable \"<pivotTableName>\" From <worksheetKey> As <pivotTableKey>"
            }]
        }, {
            "CreationDate": "2022-Sep-29",
            "Description": "Reads a Range of cells in a worksheet as a List of n elements (rows), containing m items (columns). The empty cells will be empty strings. Syntax with \"visible\" will only read the visible elements in filtered data. \\nRange values can use \"UsedRange\" or ranges using A1:lastF to get a range from A to the last row of F.",
            "Example": ["ReadRange from {sheetVar} in range {B2:D15} as var2DList\r", "ReadRange from {sheetVar} in range {B2:D15} visible as visible2DList\r", "ReadRange from {sheetVar} in range {UsedRange} visible as visible2DList\r", "ReadRange from {sheetVar} in range {A2:lastF} visible as visible2DList\r"],
            "Name": "ReadRange",
            "Params": ["worksheetKey", "cellRange", "varKey"],
            "ShortDescription": "Read a Range of a worksheet as a Row x Column List.",
            "Syntax": ["ReadRange from {<worksheetKey>} in range {<cellRange>} as <varKey>", "ReadRange from {<worksheetKey>} in range {<cellRange>} visible as <varKey>"],
            "SyntaxDetail": [{
                "Instruction": "ReadRange from {<worksheetKey>} in range {<cellRange>} as <varKey>"
            }, {
                "Instruction": "ReadRange from {<worksheetKey>} in range {<cellRange>} visible as <varKey>"
            }]
        }, {
            "CreationDate": "2018-Jun-12",
            "Description": "Reads the UsedRange of a worksheet as a List of n elements (rows), containing m items (columns). The empty cells will be strings = \"\". With the \"update\" function you can update the variable list with different values. Syntax with \"visible\" will only read the visible elements in filtered data.",
            "Example": ["ReadRows from yaraWS start_at 2 as data\r", "ReadRows from yaraWS start_at 2 as data cols [3,6,8]\r", "ReadRows from {contador} start_at {2} as {lista} update\r", "ReadRows from {WS} start_at {12} as {Datos} without nulls\r"],
            "Name": "ReadRows",
            "Params": ["worksheetKey", "rowIndex", "varKey", "col1", "col2"],
            "ShortDescription": "Read the Used Range of a worksheet as a RowxColumn List.",
            "Syntax": ["ReadRows from <worksheetKey> start_at <rowIndex> as <varKey>", "ReadRows v2 from <worksheetKey> start_at <rowIndex> as <varKey>", "ReadRows v2 from <worksheetKey> start_at <rowIndex> as <varKey> visible", "ReadRows from {<worksheetKey>} start_at {<rowIndex>} as {<varKey>} update", "ReadRows from {<worksheetKey>} start_at {<rowIndex>} as {<varKey>} without nulls", "ReadRows from <worksheetKey> start_at <rowIndex> as <varKey> cols [<col1>,<col2>...]", "ReadRows v2 from <worksheetKey> start_at <rowIndex> as <varKey> cols [<col1>,<col2>...]", "ReadRows v2 from <worksheetKey> start_at <rowIndex> as <varKey> visible cols [<col1>,<col2>...]", "ReadRows from {<worksheetKey>} start_at {<rowIndex>} as {<varKey>} update cols [<col1>,<col2>...]", "ReadRows from {<worksheetKey>} start_at {<rowIndex>} as {<varKey>} without nulls cols [<col1>,<col2>...]"],
            "SyntaxDetail": [{
                "Instruction": "ReadRows from <worksheetKey> start_at <rowIndex> as <varKey>"
            }, {
                "Instruction": "ReadRows v2 from <worksheetKey> start_at <rowIndex> as <varKey>"
            }, {
                "Instruction": "ReadRows v2 from <worksheetKey> start_at <rowIndex> as <varKey> visible"
            }, {
                "Instruction": "ReadRows from {<worksheetKey>} start_at {<rowIndex>} as {<varKey>} update"
            }, {
                "Instruction": "ReadRows from {<worksheetKey>} start_at {<rowIndex>} as {<varKey>} without nulls"
            }, {
                "Instruction": "ReadRows from <worksheetKey> start_at <rowIndex> as <varKey> cols [<col1>,<col2>...]"
            }, {
                "Instruction": "ReadRows v2 from <worksheetKey> start_at <rowIndex> as <varKey> cols [<col1>,<col2>...]"
            }, {
                "Instruction": "ReadRows v2 from <worksheetKey> start_at <rowIndex> as <varKey> visible cols [<col1>,<col2>...]"
            }, {
                "Instruction": "ReadRows from {<worksheetKey>} start_at {<rowIndex>} as {<varKey>} update cols [<col1>,<col2>...]"
            }, {
                "Instruction": "ReadRows from {<worksheetKey>} start_at {<rowIndex>} as {<varKey>} without nulls cols [<col1>,<col2>...]"
            }]
        }, {
            "CreationDate": "2019-Aug-27",
            "Description": "Reads all rows in a sheet and if posible it separetes lines using a delimiter character. Read values are stored in a list variable. It will not necesarily be of N x M dimension, it depends on the amount of delimiters in each row individualy. Empty cells will be stored as \"\". Row index starts at 1 and indicates where to start saving the list. Only one column must be filled per row, for delimiter separation. Otherwise each cell in the row will be saved in the list.",
            "Example": ["ReadRowsCSV from {sheetcsv} start_at {2} as {list} by {,}\r"],
            "Name": "ReadRowsCSV",
            "Params": ["worksheetKey", "rowIndex", "varKey", "delimiter"],
            "ShortDescription": "Read all rows in a sheet and separate the values by a delimiter.",
            "Syntax": ["ReadRowsCSV from {<worksheetKey>} start_at {<rowIndex>} as {<varKey>} by {<delimiter>}"],
            "SyntaxDetail": [{
                "Instruction": "ReadRowsCSV from {<worksheetKey>} start_at {<rowIndex>} as {<varKey>} by {<delimiter>}"
            }]
        }, {
            "CreationDate": "2018-Nov-05",
            "Description": "Apply a filter to a column A by the value given and read the value in the same row from the colum B saving it on a dictionary variable, in case it does not exist it saves -1. Indexes start with 1.",
            "Example": ["ReadValueThatMatch in the worksheet worksheetName at the column {1} maching the value \"111001110\" and read the column {3} and save it value as {TicketAuthor}\r"],
            "ExtraDocs": "https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/Excel Reader/ReadValueThatMatch.pdf",
            "Name": "ReadValueThatMatch",
            "Params": ["worksheetKey", "columnIndex1", "columnIndex2", "criteria", "varName"],
            "ShortDescription": "Filter a column by a value and read the corresponding value from another column.",
            "Syntax": ["ReadValueThatMatch in the worksheet <worksheetKey> at the column {<columnIndex1>} maching the value \"<criteria>\" and read the column {<columnIndex2>} and save it value as {<varName>}"],
            "SyntaxDetail": [{
                "Instruction": "ReadValueThatMatch in the worksheet <worksheetKey> at the column {<columnIndex1>} maching the value \"<criteria>\" and read the column {<columnIndex2>} and save it value as {<varName>}"
            }]
        }, {
            "CreationDate": "2018-Oct-29",
            "Description": "Get the latest data by refreshing all sources in the workbook. Expecting popups syntax will close emerging database messages popups, saving the RefreshStatus variable with either \"OK\" if there were no popups present or \"Error\" whenever data base error messages appeared and were taken care of.",
            "Example": ["RefreshAll Book1Key\r", "RefreshAll Book1Key expecting popups\r"],
            "Name": "RefreshAll",
            "Params": ["WorkbookKey"],
            "ShortDescription": "Get the latest data by refreshing all sources in the workbook.",
            "Syntax": ["RefreshAll <WorkbookKey>", "RefreshAll <WorkbookKey> expecting popups"],
            "SyntaxDetail": [{
                "Instruction": "RefreshAll <WorkbookKey>"
            }, {
                "Instruction": "RefreshAll <WorkbookKey> expecting popups"
            }]
        }, {
            "CreationDate": "2017-Aug-23",
            "Description": "Refresh all pivot tables that exist in a workbook.",
            "Example": ["RefreshAllPT workb\r"],
            "Name": "RefreshAllPT",
            "Params": ["WorkbookKey"],
            "ShortDescription": "Refresh all pivot tables that exist in a workbook.",
            "Syntax": ["RefreshAllPT <WorkbookKey>"],
            "SyntaxDetail": [{
                "Instruction": "RefreshAllPT <WorkbookKey>"
            }]
        }, {
            "CreationDate": "2017-Aug-23",
            "Description": "Refreh a given Pivot Table.",
            "Example": ["RefreshPivotTable pivotVariable\r"],
            "ExtraDocs": "https://innotekfilestore.file.core.windows.net/frida-docs/Readers/Excel/Articles/Tablas%20Pivote.pdf",
            "Name": "RefreshPivotTable",
            "Params": ["PivotTableKey"],
            "ShortDescription": "Refreh a given Pivot Table.",
            "Syntax": ["RefreshPivotTable <PivotTableKey>"],
            "SyntaxDetail": [{
                "Instruction": "RefreshPivotTable <PivotTableKey>"
            }]
        }, {
            "CreationDate": "2021-Jun-08",
            "Description": "Remove the existing filters in a worksheet that contains tables.",
            "Example": ["RemoveAllTableFilters from sheet1 with_name \"Table1\"\r"],
            "Name": "RemoveAllTableFilters",
            "Params": ["worksheetKey", "tableTitle"],
            "ShortDescription": "Remove the existing filters in a worksheet that contains tables.",
            "Syntax": ["RemoveAllTableFilters from <worksheetKey> with_name \"<tableTitle>\""],
            "SyntaxDetail": [{
                "Instruction": "RemoveAllTableFilters from <worksheetKey> with_name \"<tableTitle>\""
            }]
        }, {
            "CreationDate": "2018-May-22",
            "Description": "Remove a specific character or sequence of characters from a text file. Saves the content in UTF32.",
            "Example": ["RemoveCharacter from C:\\archivo.txt the character \\\r", "RemoveCharacter from C:\\archivo.txt the character .00\r"],
            "Name": "RemoveCharacter",
            "Params": ["filePath", "charString"],
            "ShortDescription": "Remove a set of character(s) from a text file.",
            "Syntax": ["RemoveCharacter from <filePath> the character <charString>"],
            "SyntaxDetail": [{
                "Instruction": "RemoveCharacter from <filePath> the character <charString>"
            }]
        }, {
            "CreationDate": "2017-Aug-01",
            "Description": "Deletes the specified columns. Index starts with 1.",
            "Example": ["RemoveCols from hoja1 at [3,4,8,10]\r", "RemoveCols from WSheet1 at [3,4]\r"],
            "Name": "RemoveCols",
            "Params": ["worksheetKey", "index"],
            "ShortDescription": "Delete the specified columns.",
            "Syntax": ["RemoveCols from <worksheetKey> at [<index1>,<index2>,...,<indexN>]"],
            "SyntaxDetail": [{
                "Instruction": "RemoveCols from <worksheetKey> at [<index1>,<index2>,...,<indexN>]"
            }]
        }, {
            "CreationDate": "2017-Nov-14",
            "Description": "Removes the duplicate rows from a given sheet. When many column indexes are specified, the deletion will be based on the repetition of values in all those columns. Indexes start with 1.",
            "Example": ["RemoveDuplicates from WSheet1\r", "RemoveDuplicates from WSheet1 at [2,8,9]\r", "RemoveDuplicates from WSheet1 at [1] with_header Y\r"],
            "Name": "RemoveDuplicates",
            "Params": ["worksheetKey", "columnIndex", "hasHeader"],
            "ShortDescription": "Remove the duplicate rows from a given sheet.",
            "Syntax": ["RemoveDuplicates from <worksheetKey>", "RemoveDuplicates from <worksheetKey> with_header <hasHeader:Y|N>", "RemoveDuplicates from <worksheetKey> at [<columnIndex1,columnIndex2,...,columnIndexn>]", "RemoveDuplicates from <worksheetKey> at [<columnIndex1,columnIndex2,...,columnIndexn>] with_header <hasHeader:Y|N>"],
            "SyntaxDetail": [{
                "Instruction": "RemoveDuplicates from <worksheetKey>"
            }, {
                "Constants": [{
                    "Options": ["Y", "N"],
                    "ParamName": "hasHeader"
                }],
                "Instruction": "RemoveDuplicates from <worksheetKey> with_header <hasHeader:Y|N>"
            }, {
                "Instruction": "RemoveDuplicates from <worksheetKey> at [<columnIndex1,columnIndex2,...,columnIndexn>]"
            }, {
                "Constants": [{
                    "Options": ["Y", "N"],
                    "ParamName": "hasHeader"
                }],
                "Instruction": "RemoveDuplicates from <worksheetKey> at [<columnIndex1,columnIndex2,...,columnIndexn>] with_header <hasHeader:Y|N>"
            }]
        }, {
            "CreationDate": "2019-Aug-29",
            "Description": "Deletes all empty rows from a desired work sheet.",
            "Example": ["RemoveEmptyRow from {hoja1}\r"],
            "Name": "RemoveEmptyRow",
            "Params": ["worksheetKey"],
            "ShortDescription": "Deles all empty rows from a worksheet.",
            "Syntax": ["RemoveEmptyRow from {<worksheetKey>}"],
            "SyntaxDetail": [{
                "Instruction": "RemoveEmptyRow from {<worksheetKey>}"
            }]
        }, {
            "CreationDate": "2017-Aug-23",
            "Description": "Remove the existing filters in a worksheet.",
            "Example": ["RemoveFilters from sheet1\r"],
            "Name": "RemoveFilters",
            "Params": ["worksheetKey"],
            "ShortDescription": "Remove the existing filters in a worksheet.",
            "Syntax": ["RemoveFilters from <worksheetKey>"],
            "SyntaxDetail": [{
                "Instruction": "RemoveFilters from <worksheetKey>"
            }]
        }, {
            "CreationDate": "2017-Aug-23",
            "Description": "Remove all the existing macros in a workbook.",
            "Example": ["RemoveMacros from WBook2\r"],
            "Name": "RemoveMacros",
            "Params": ["workbookKey"],
            "ShortDescription": "Remove all the existing macros in a workbook.",
            "Syntax": ["RemoveMacros from <workbookKey>"],
            "SyntaxDetail": [{
                "Instruction": "RemoveMacros from <workbookKey>"
            }]
        }, {
            "CreationDate": "2017-Aug-01",
            "Description": "Deletes rows that contain a given value in a column. It can also be used to delete row indicated by index. Indexes begin with 1, LastRow can be used instead of the index.",
            "Example": ["RemoveRows from hoja1 where 4 equals Error start_at 2\r", "RemoveRows from the worksheet hoja1 with the index 5\r", "RemoveRows from the worksheet hoja1 with the index LastRow\r", "RemoveRows from the worksheet hoja1 from the index 10 to 30\r", "RemoveRows from the worksheet hoja1 from the index 10 to LastRow\r", "RemoveRows from the worksheet {hoja1} in index_column {1} start_at {firstempty} to {lastrow}\r"],
            "Name": "RemoveRows",
            "Params": ["worksheetKey", "colIndex", "something", "rowIndex", "rowStartIndex", "rowEndIndex"],
            "ShortDescription": "Delete rows in a worksheet.",
            "Syntax": ["RemoveRows from <worksheetKey> where <colIndex> equals <something> start_at <rowIndex>", "RemoveRows from the worksheet <worksheetKey> with the index <rowIndex>", "RemoveRows from the worksheet <worksheetKey> with the index LastRow", "RemoveRows from the worksheet <worksheetKey> from the index <rowStartIndex> to <rowEndIndex>", "RemoveRows from the worksheet <worksheetKey> from the index <rowStartIndex> to LastRow", "RemoveRows from the worksheet {<worksheetKey>} in index_column {<colIndex>} start_at {firstempty} to {lastrow}"],
            "SyntaxDetail": [{
                "Instruction": "RemoveRows from <worksheetKey> where <colIndex> equals <something> start_at <rowIndex>"
            }, {
                "Instruction": "RemoveRows from the worksheet <worksheetKey> with the index <rowIndex>"
            }, {
                "Instruction": "RemoveRows from the worksheet <worksheetKey> with the index LastRow"
            }, {
                "Instruction": "RemoveRows from the worksheet <worksheetKey> from the index <rowStartIndex> to <rowEndIndex>"
            }, {
                "Instruction": "RemoveRows from the worksheet <worksheetKey> from the index <rowStartIndex> to LastRow"
            }, {
                "Instruction": "RemoveRows from the worksheet {<worksheetKey>} in index_column {<colIndex>} start_at {firstempty} to {lastrow}"
            }]
        }, {
            "CreationDate": "2017-Aug-01",
            "Description": "Deletes rows that contain a value in a column (by header). Index start with 1.",
            "Example": ["RemoveRowsHeader from SheetCostos where \"Totales\" equals \"0\" start_at 2\r"],
            "Name": "RemoveRowsHeader",
            "Params": ["worksheetKey", "colHeader", "something", "rowIndex"],
            "ShortDescription": "Deletes rows in a given column header.",
            "Syntax": ["RemoveRowsHeader from <worksheetKey> where \"<colHeader>\" equals \"<something>\" start_at <rowIndex>"],
            "SyntaxDetail": [{
                "Instruction": "RemoveRowsHeader from <worksheetKey> where \"<colHeader>\" equals \"<something>\" start_at <rowIndex>"
            }]
        }, {
            "CreationDate": "2017-Dec-29",
            "Description": "Remove worksheets from a workbook. \"except sheets\" syntax currently not working. Index begins with 1.",
            "Example": ["RemoveSheets from WBook2 sheet USA\r", "RemoveSheets from WBook3 all except \"Mex\"\r", "RemoveSheets from WBalance sheets [USA,Mex,Sheet1]\r", "RemoveSheets from WBFinal all except sheets [USA,Mex,Can]\r", "RemoveSheets from WBook sheet_index 2\r"],
            "Name": "RemoveSheets",
            "Params": ["workbookKey", "worksheetName", "worksheetKey", "worksheetIndex"],
            "ShortDescription": "Remove worksheets from a workbook.",
            "Syntax": ["RemoveSheets from <workbookKey> sheet <worksheetName>", "RemoveSheets from <workbookKey> sheet <worksheetKey>", "RemoveSheets from <workbookKey> all except \"<worksheetName>\"", "RemoveSheets from <workbookKey> sheets [<worksheetName1>,<worksheetName2>,<worksheetName3>,...]", "RemoveSheets from <workbookKey> all except sheets [<worksheetName1>,<worksheetName2>,<worksheetName3>,...]", "RemoveSheets from <workbookKey> sheet_index <worksheetIndex>"],
            "SyntaxDetail": [{
                "Instruction": "RemoveSheets from <workbookKey> sheet <worksheetName>"
            }, {
                "Instruction": "RemoveSheets from <workbookKey> sheet <worksheetKey>"
            }, {
                "Instruction": "RemoveSheets from <workbookKey> all except \"<worksheetName>\""
            }, {
                "Instruction": "RemoveSheets from <workbookKey> sheets [<worksheetName1>,<worksheetName2>,<worksheetName3>,...]"
            }, {
                "Instruction": "RemoveSheets from <workbookKey> all except sheets [<worksheetName1>,<worksheetName2>,<worksheetName3>,...]"
            }, {
                "Instruction": "RemoveSheets from <workbookKey> sheet_index <worksheetIndex>"
            }]
        }, {
            "Description": "Removes duplicate rows from all existing tables on a given sheet or sheet and table. When many column indexes are specified, the deletion will be based on the repetition of values in all those columns. Indexes start with 1 for each table. ",
            "Example": ["RemoveTableDuplicates from WSheet1\r", "RemoveTableDuplicates from WSheet1 in table Tabla1\r", "RemoveTableDuplicates from WSheet1 in table Tabla1 at [2,8,9]\r"],
            "Name": "RemoveTableDuplicates",
            "Params": ["worksheetKey", "tablename", "columnIndex"],
            "ShortDescription": "Remove the duplicate rows from a given sheet and table.",
            "Syntax": ["RemoveTableDuplicates from <worksheetKey>", "RemoveTableDuplicates from <worksheetKey> in table <tablename>", "RemoveTableDuplicates from <worksheetKey> in table <tablename> at [<columnIndex1,columnIndex2,...,columnIndexn>]"],
            "SyntaxDetail": [{
                "Instruction": "RemoveTableDuplicates from <worksheetKey>"
            }, {
                "Instruction": "RemoveTableDuplicates from <worksheetKey> in table <tablename>"
            }, {
                "Instruction": "RemoveTableDuplicates from <worksheetKey> in table <tablename> at [<columnIndex1,columnIndex2,...,columnIndexn>]"
            }]
        }, {
            "CreationDate": "2020-Aug-21",
            "Description": "Remove all connections in a workbook.",
            "Example": ["RemoveWorkbookConnections book1\r"],
            "Name": "RemoveWorkbookConnections",
            "Params": ["worksheetKey"],
            "ShortDescription": "Remove all connections in a workbook.",
            "Syntax": ["RemoveWorkbookConnections <worksheetKey>"],
            "SyntaxDetail": [{
                "Instruction": "RemoveWorkbookConnections <worksheetKey>"
            }]
        }, {
            "CreationDate": "2022-Oct-06",
            "Description": "Replace one text sequence with another in an entire worksheet. The replacement can be done in formulas. The replacement text can be exact or partially. \\nYou can make the replacement for an empty string. When specifing a range, A1:B2 style is accepted, also A1:lastF or with UsedRange.",
            "Example": ["ReplaceAll from {wsSheet} this exactly {OK} with {Approved} in range {B3:lastB}\r", "ReplaceAll from {wsSheet} this contains {NoOp} with {} in range {B2:D10}\r", "ReplaceAll from {wsSheet} this exactly {fill date} with {=TODAY()} in formulas\r", "ReplaceAll from {wsSheet} this contains {LEFT} with {RIGHT} in formulas\r", "ReplaceAll from {wsSheet} this contains {03-} with {processed-} in range formulas {UsedRange}\r"],
            "Name": "ReplaceAll",
            "Params": ["worksheetKey", "searchText", "typeSearch", "rangekey", "replacementText"],
            "ShortDescription": "Replace a text sequence for another one.",
            "Syntax": ["ReplaceAll from {<worksheetKey>} <typeSearch:contains|exacty> this {<searchText>} with {<replacementText>} in range {<rangekey>}", "ReplaceAll from {<worksheetKey>} <typeSearch:contains|exacty> this {<searchText>} with {<replacementText>} in formulas", "ReplaceAll from {<worksheetKey>} <typeSearch:contains|exacty> this {<searchText>} with {<replacementText>} in range formulas {<rangekey>}"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["contains", "exacty"],
                    "ParamName": "typeSearch"
                }],
                "Instruction": "ReplaceAll from {<worksheetKey>} <typeSearch:contains|exacty> this {<searchText>} with {<replacementText>} in range {<rangekey>}"
            }, {
                "Constants": [{
                    "Options": ["contains", "exacty"],
                    "ParamName": "typeSearch"
                }],
                "Instruction": "ReplaceAll from {<worksheetKey>} <typeSearch:contains|exacty> this {<searchText>} with {<replacementText>} in formulas"
            }, {
                "Constants": [{
                    "Options": ["contains", "exacty"],
                    "ParamName": "typeSearch"
                }],
                "Instruction": "ReplaceAll from {<worksheetKey>} <typeSearch:contains|exacty> this {<searchText>} with {<replacementText>} in range formulas {<rangekey>}"
            }]
        }, {
            "CreationDate": "2018-Sep-12",
            "Description": "Replaces a character or substring with another. Row o column indexes can be specified to delimit affected cells. Indexes start with 1. If newSubstring expected is \"\", write \"non\"  (syntax 1 and 4 have problems for now).",
            "Example": ["ReplaceCharacter \"?\" from the worksheet WSheet with \".\" in the row with the index 2\r", "ReplaceCharacter \"?\" from the worksheet WSheet with \".\" in the column with the index 3\r", "ReplaceCharacter \".00\" from the worksheet WSheet with \"non\" in the column with the index 3\r", "ReplaceCharacter {?} from the worksheet WSheet with \"\" in the row with the index 3\r", "ReplaceCharacter \"El\" from the worksheet WSheet with \"La\" from cell {1,1} up to the cell {\"C\",\"3\"}\r"],
            "Name": "ReplaceCharacter",
            "Params": ["worksheetKey", "oldSubstring", "newSubstring", "rowIndex", "colIndex", "rowStartIndex", "rowEndIndex"],
            "ShortDescription": "Replaces a character or substring with another.",
            "Syntax": ["ReplaceCharacter \"<oldSubstring>\" from the worksheet <worksheetKey> with \"<newSubstring>\" in the row with the index <rowIndex>", "ReplaceCharacter \"<oldSubstring>\" from the worksheet <worksheetKey> with \"<newSubstring>\" in the column with the index <colIndex>", "ReplaceCharacter {<oldSubstring>} from the worksheet <worksheetKey> with \"<newSubstring>\" in the column with the index <colIndex>", "ReplaceCharacter \"<oldSubstring>\" from the worksheet <worksheetKey> with \"<newSubstring>\" from cell {<colIndex>,<rowIndex>} up to the cell {\"<colIndex or Letter>\",\"<rowIndex or Letter>\"}"],
            "SyntaxDetail": [{
                "Instruction": "ReplaceCharacter \"<oldSubstring>\" from the worksheet <worksheetKey> with \"<newSubstring>\" in the row with the index <rowIndex>"
            }, {
                "Instruction": "ReplaceCharacter \"<oldSubstring>\" from the worksheet <worksheetKey> with \"<newSubstring>\" in the column with the index <colIndex>"
            }, {
                "Instruction": "ReplaceCharacter {<oldSubstring>} from the worksheet <worksheetKey> with \"<newSubstring>\" in the column with the index <colIndex>"
            }, {
                "Instruction": "ReplaceCharacter \"<oldSubstring>\" from the worksheet <worksheetKey> with \"<newSubstring>\" from cell {<colIndex>,<rowIndex>} up to the cell {\"<colIndex or Letter>\",\"<rowIndex or Letter>\"}"
            }]
        }, {
            "CreationDate": "2018-Mar-02",
            "Description": "Replace a text sequence for another one in a given worksheet column. Index starts with 1. Does not work well with filtered sheets.",
            "Example": ["ReplaceText from MyWS in_column_index 10 this \"OK\" by \"Approved\"\r", "ReplaceText from MyWS in_column_index 10 this \"Approved\" by \"\"\r"],
            "Name": "ReplaceText",
            "Params": ["WorksheetKey", "ColIndex", "Text", "NewText"],
            "ShortDescription": "Replace a text sequence for another one.",
            "Syntax": ["ReplaceText from <WorksheetKey> in_column_index <ColumnIndex> this \"<Text>\" by \"<NewText>\""],
            "SyntaxDetail": [{
                "Instruction": "ReplaceText from <WorksheetKey> in_column_index <ColumnIndex> this \"<Text>\" by \"<NewText>\""
            }]
        }, {
            "CreationDate": "2019-Sep-24",
            "Description": "Find the exact text in a visible cell and replace it for another. Index starts with 1.",
            "Example": ["ReplaceTextVisible from {hoja} in_column_index {6} this {Completado} by {Pendiente}\r"],
            "Name": "ReplaceTextVisible",
            "Params": ["worksheetKey", "columnIndex", "oldCharacters", "newCharacters"],
            "ShortDescription": "Replace the text in a visible cell and replace it for another.",
            "Syntax": ["ReplaceTextVisible from {<worksheetKey>} in_column_index {<columnIndex>} this {<oldCharacters>} by {<newCharacters>}"],
            "SyntaxDetail": [{
                "Instruction": "ReplaceTextVisible from {<worksheetKey>} in_column_index {<columnIndex>} this {<oldCharacters>} by {<newCharacters>}"
            }]
        }, {
            "CreationDate": "2018-Jun-20",
            "Description": "Run a macro in a workbook.",
            "Example": ["RunMacro \"Summarize\" InBook regiones\r"],
            "Name": "RunMacro",
            "Params": ["macroName", "workbookKey"],
            "ShortDescription": "Run a macro in a workbook.",
            "Syntax": ["RunMacro \"<macroName>\" InBook <workbookKey>"],
            "SyntaxDetail": [{
                "Instruction": "RunMacro \"<macroName>\" InBook <workbookKey>"
            }]
        }, {
            "CreationDate": "2017-Aug-23",
            "Description": "Saves the last edition of the workbook.",
            "Example": ["Save libro\r", "Save libro and close\r"],
            "Name": "Save",
            "Params": ["workbookKey"],
            "ShortDescription": "Save a workbook.",
            "Syntax": ["Save <workbookKey>", "Save <workbookKey> and close"],
            "SyntaxDetail": [{
                "Instruction": "Save <workbookKey>"
            }, {
                "Instruction": "Save <workbookKey> and close"
            }]
        }, {
            "CreationDate": "2017-Aug-23",
            "Description": "Save a file from dictionary with new name but don't add it to the dictionary. DO NOT include special characters like [, ], \\, *, :, ?, <, >, |, / or \" in the name. \\nPDF syntax will save a pdf file with the contents o the book. \\nXLSX syntax may be used to convert an open csv file to xlsx.",
            "Example": ["SaveAs Libro1 as \"MiLibro\" in \"C:\\Users\\productivity\\Desktop\"\r", "SaveAs Libro1 as \"MiLibro\" in_base Libro3\r", "SaveAs PDF Libro1 as \"MiLibro\" in \"C:\\Users\\productivity\\Desktop\"\r", "SaveAs PDF Libro1 as \"reporte hojas1y2\" in \"C:\\Users\\productivity\\Desktop\" from sheet {WSHoja1} to {WSHoja2} autoscale\r", "SaveAs PDF Libro1 as \"reporte hoja3\" in \"C:\\Users\\productivity\\Desktop\" from sheet {WSHoja3} to {WSHoja3} no scale\r", "SaveAs XLSX csvBook as \"xlsBook\" in \"C:\\Users\\productivity\\Desktop\"\r"],
            "Name": "SaveAs",
            "Params": ["workbookKey", "name", "folder", "initialSheetVar", "endSheetVar"],
            "ShortDescription": "Save a workbook as a different file.",
            "Syntax": ["SaveAs <workbookKey> as \"<name>\" in \"<folder>\"", "SaveAs <workbookKey> as <name> in <folder>", "SaveAs <workbookKey> as \"<name>\" in_base <workbookKey>", "SaveAs PDF <workbookKey> as \"<name>\" in \"<folder>\"", "SaveAs PDF <workbookKey> as \"<name>\" in \"<folder>\" from sheet {<initialSheetVar>} to {<endSheetVar>} autoscale", "SaveAs PDF <workbookKey> as \"<name>\" in \"<folder>\" from sheet {<initialSheetVar>} to {<endSheetVar>} no scale", "SaveAs XLSX <workbookKey> as \"<name>\" in \"<folder>\""],
            "SyntaxDetail": [{
                "Instruction": "SaveAs <workbookKey> as \"<name>\" in \"<folder>\""
            }, {
                "Instruction": "SaveAs <workbookKey> as <name> in <folder>"
            }, {
                "Instruction": "SaveAs <workbookKey> as \"<name>\" in_base <workbookKey>"
            }, {
                "Instruction": "SaveAs PDF <workbookKey> as \"<name>\" in \"<folder>\""
            }, {
                "Instruction": "SaveAs PDF <workbookKey> as \"<name>\" in \"<folder>\" from sheet {<initialSheetVar>} to {<endSheetVar>} autoscale"
            }, {
                "Instruction": "SaveAs PDF <workbookKey> as \"<name>\" in \"<folder>\" from sheet {<initialSheetVar>} to {<endSheetVar>} no scale"
            }, {
                "Instruction": "SaveAs XLSX <workbookKey> as \"<name>\" in \"<folder>\""
            }]
        }, {
            "CreationDate": "2019-Sep-24",
            "Description": "Save the active worksheet of a given workbook key to a CSV file. This does not save the file inside the dictionary. If you want to use the saved file use the LoadCSV function. DO NOT include special characters like [, ], \\, *, :, ?, <, >, |, / or \" at the folder name to avoid error messages.",
            "Example": ["SaveAsCSV {consolidado} as {PPView} in {C:\\Users\\user.user\\Documents\\Folder}\r"],
            "Name": "SaveAsCSV",
            "Params": ["workbookKey", "fileName", "path"],
            "ShortDescription": "Save the active worksheet as a CSV file.",
            "Syntax": ["SaveAsCSV {<workbookKey>} as {<fileName>} in {<path>}"],
            "SyntaxDetail": [{
                "Instruction": "SaveAsCSV {<workbookKey>} as {<fileName>} in {<path>}"
            }]
        }, {
            "CreationDate": "2017-Sep-07",
            "Description": "Save workbook with the name of the current month. Currently not working.",
            "Example": ["SaveWBMonth\r"],
            "Name": "SaveWBMonth",
            "Params": ["There", "are", "no", "parameters"],
            "ShortDescription": "Currently not working. Save workbook with the name of the current month.",
            "Syntax": ["(Deprecated)SaveWBMonth"]
        }, {
            "CreationDate": "2020-Oct-19",
            "Description": "Enable the running Excel Application to check the opened Workbooks for errors. Currently, the option NumberAsText is supported.",
            "Example": ["SetErrorChecking option={NumberAsText} value={false}\r"],
            "Name": "SetErrorChecking",
            "Params": ["opt", "boolValue"],
            "ShortDescription": "Enable or disable an ErrorCheckingOption.",
            "Syntax": ["SetErrorChecking option={<opt>} value={<boolValue>}"],
            "SyntaxDetail": [{
                "Instruction": "SetErrorChecking option={<opt>} value={<boolValue>}"
            }]
        }, {
            "CreationDate": "2020-Oct-16",
            "Description": "Show al the data hiden in a worksheet. This function can be used to remove advanced filters. If no filters are applied, the function will return an error.",
            "Example": ["ShowAllData in sheet1\r"],
            "Name": "ShowAllData",
            "Params": ["worksheetKey"],
            "ShortDescription": "Show all data in worksheet.",
            "Syntax": ["ShowAllData in <worksheetKey>"],
            "SyntaxDetail": [{
                "Instruction": "ShowAllData in <worksheetKey>"
            }]
        }, {
            "CreationDate": "2021-Feb-12",
            "Description": "Show the data lables from a given series in a chart with some options of presentation. Series are identified by index begining with 1. Optional parameters can be Rotation with the angle and Position with the following options [above, below, center].",
            "Example": ["ShowChartDataLabels in graf series 1 with {Rotation: 90}\r", "ShowChartDataLabels in graf series 2 with {Rotation: 45 ; Position : above}\r"],
            "ExtraDocs": "https://innotekfilestore.file.core.windows.net/frida-docs/Readers/Excel/Articles/ShowChartDataLabels.pdf",
            "Name": "ShowChartDataLabels",
            "Params": ["path", "chartKey", "properties"],
            "ShortDescription": "Show the data labels in a chart",
            "Syntax": ["ShowChartDataLabels in <chartKey> series <seriesNumber> with {<properties>}"],
            "SyntaxDetail": [{
                "Instruction": "ShowChartDataLabels in <chartKey> series <seriesNumber> with {<properties>}"
            }]
        }, {
            "CreationDate": "2019-Jan-11",
            "Description": "Sort by a Column. Maximum 3 columns to sort in a worksheet. Order direction must be set (ascending/descending). If header is Yes, it will not sort the first value, since it considers it to be a header.",
            "Example": ["SortColumns in WSName1 by column {10} ascending header Yes\r", "SortColumns in WSName1 in UsedRange by columns {1/ascending,2/descending,3/descending} header Yes\r", "SortColumns in WSName1 in B10:D18 by columns {1/asc,2/desc} header No\r"],
            "Name": "SortColumns",
            "Params": ["worksheetKey", "colIndex", "order", "isHeader"],
            "ShortDescription": "Sort by a Column.",
            "Syntax": ["SortColumns in <worksheetKey> by column {<colindex>} <order:ascending|descending> header <isHeader:Yes|No>", "SortColumns in <worksheetKey> in UsedRange by columns {<colindex1|order1>,<colindex2|order2>,<colindex3|order3>} header <isHeader:Yes|No>  --Function still under development"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["ascending", "descending"],
                    "ParamName": "order"
                }, {
                    "Options": ["Yes", "No"],
                    "ParamName": "isHeader"
                }],
                "Instruction": "SortColumns in <worksheetKey> by column {<colindex>} <order:ascending|descending> header <isHeader:Yes|No>"
            }, {
                "Constants": [{
                    "Options": ["Yes", "No"],
                    "ParamName": "isHeader"
                }],
                "Instruction": "SortColumns in <worksheetKey> in UsedRange by columns {<colindex1|order1>,<colindex2|order2>,<colindex3|order3>} header <isHeader:Yes|No>  --Function still under development"
            }]
        }, {
            "CreationDate": "2018-Mar-02",
            "Description": "Make changes in cell properties such as font color, size, cell alignment, cell color, typographical emphasis and Font Family. It can be applied to a range of cells or starting from a cell until the end of the column. Name: changes the font type, or sets the text on Bold, Italic or Underline. Size: changes the font size. Textcolor: changes the font color. Color: change the color of the BACKGROUND of the selected cell. Alignments: changes the alignment of the desired range. FontFamily: changes the font family of the desired range, the font must be installed in Office",
            "Example": ["SpecificFontValues from_sheet hoja1 range A1 condition textcolor values [255,0,0]\r", "SpecificFontValues from_sheet hoja1 range A1:A5 condition name values \"Bold\"\r", "SpecificFontValues from_sheet hoja1 range A1:A5 condition fontfamily values \"Arial\"\r", "SpecificFontValues from_sheet Sheet1 range A1:J4 condition alignment values \"top\"\r"],
            "Name": "SpecificFontValues",
            "Params": ["worksheetKey", "cellRange", "condition", "value", "fontProperties", "alignment", "R", "G", "B"],
            "ShortDescription": "Change cell properties such as font color, size, etc.",
            "Syntax": ["SpecificFontValues from_sheet <worksheetKey> range <cellRange:cell1|cell1:cell2> condition name values \"<fontProperties:Bold|Italic|Underline>\"", "SpecificFontValues from_sheet <worksheetKey> range <cellRange:cell1|cell1:cell2> condition alignment values \"<alignment:top|middle|bottom|left|center|right|justify>\"", "SpecificFontValues from_sheet <worksheetKey> range <cellRange:cell1|cell1:cell2> condition size values <value>", "SpecificFontValues from_sheet <worksheetKey> range <cellRange:cell1|cell1:cell2> condition fontfamily values <value>", "SpecificFontValues from_sheet <worksheetKey> range <cellRange:cell1|cell1:cell2> condition color values [<R>,<G>,<B>]", "SpecificFontValues from_sheet <worksheetKey> range <cellRange:cell1|cell1:cell2> condition textcolor values [<R>,<G>,<B>]", "SpecificFontValues from_sheet <worksheetKey> start_at <cellRange:cell1|cell1:cell2> condition <condition:name|size|color|textcolor> values <value>"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["cell1", "cell1"],
                    "ParamName": "cellRange"
                }, {
                    "Options": ["Bold", "Italic", "Underline"],
                    "ParamName": "fontProperties"
                }],
                "Instruction": "SpecificFontValues from_sheet <worksheetKey> range <cellRange:cell1|cell1:cell2> condition name values \"<fontProperties:Bold|Italic|Underline>\""
            }, {
                "Constants": [{
                    "Options": ["cell1", "cell1"],
                    "ParamName": "cellRange"
                }, {
                    "Options": ["top", "middle", "bottom", "left", "center", "right", "justify"],
                    "ParamName": "alignment"
                }],
                "Instruction": "SpecificFontValues from_sheet <worksheetKey> range <cellRange:cell1|cell1:cell2> condition alignment values \"<alignment:top|middle|bottom|left|center|right|justify>\""
            }, {
                "Constants": [{
                    "Options": ["cell1", "cell1"],
                    "ParamName": "cellRange"
                }],
                "Instruction": "SpecificFontValues from_sheet <worksheetKey> range <cellRange:cell1|cell1:cell2> condition size values <value>"
            }, {
                "Constants": [{
                    "Options": ["cell1", "cell1"],
                    "ParamName": "cellRange"
                }],
                "Instruction": "SpecificFontValues from_sheet <worksheetKey> range <cellRange:cell1|cell1:cell2> condition fontfamily values <value>"
            }, {
                "Constants": [{
                    "Options": ["cell1", "cell1"],
                    "ParamName": "cellRange"
                }],
                "Instruction": "SpecificFontValues from_sheet <worksheetKey> range <cellRange:cell1|cell1:cell2> condition color values [<R>,<G>,<B>]"
            }, {
                "Constants": [{
                    "Options": ["cell1", "cell1"],
                    "ParamName": "cellRange"
                }],
                "Instruction": "SpecificFontValues from_sheet <worksheetKey> range <cellRange:cell1|cell1:cell2> condition textcolor values [<R>,<G>,<B>]"
            }, {
                "Constants": [{
                    "Options": ["cell1", "cell1"],
                    "ParamName": "cellRange"
                }, {
                    "Options": ["name", "size", "color", "textcolor"],
                    "ParamName": "condition"
                }],
                "Instruction": "SpecificFontValues from_sheet <worksheetKey> start_at <cellRange:cell1|cell1:cell2> condition <condition:name|size|color|textcolor> values <value>"
            }]
        }, {
            "CreationDate": "2017-Aug-23",
            "Description": "Split file into files named with the value of a column. Second syntax doesn't work.",
            "Example": ["SplitInFiles WSheet1 by column 3 start_at 2\r", "SplitInFiles WSheet1 by column 3 start_at 2 with elements from WSOrigin in column 2 and with variables \"MX\"\r"],
            "Name": "SplitInFiles",
            "Params": ["worksheetKey", "worksheetKey2", "columnIndex", "rowIndex", "columnOriginIndex", "variable"],
            "ShortDescription": "Split file into other files.",
            "Syntax": ["SplitInFiles <worksheetKey> by column <columnIndex> start_at <rowIndex>", "SplitInFiles <worksheetKey> by column <columnIndex> start_at <rowIndex> with elements from <worksheetKey2> in column <columnOriginIndex> and with variables \"<variable>\""],
            "SyntaxDetail": [{
                "Instruction": "SplitInFiles <worksheetKey> by column <columnIndex> start_at <rowIndex>"
            }, {
                "Instruction": "SplitInFiles <worksheetKey> by column <columnIndex> start_at <rowIndex> with elements from <worksheetKey2> in column <columnOriginIndex> and with variables \"<variable>\""
            }]
        }, {
            "CreationDate": "2020-Sep-03",
            "Description": "Calculate subtotal by column grouping. Syntax 1: Groups a range of cells, divides them according to the specified column and sums the last specified for each range. If the table range goes from columns A to J but the column to be summed is E, then that should be the column stated as last in the range. Syntax 2: Select a particular or the whole used range and indicate the grouping column and all the subtotal columns to be calculated. Function indicates the type of operation to perform on the corresponding grouped columns (SUM|COUNT|AVG|MAX|MIN|PRODUCT|COUNTNUM|STDEV|STDEVP|VAR|VARP). Indexes are 1-based.",
            "Example": ["Subtotal in sheet range a1:e26 split by 4\r", "Subtotal in WS range UsedRange group by 1 add subtotal to [7] use function SUM\r", "Subtotal in WS range A1:U2037 group by 2 add subtotal to [8, 10] use function AVG\r"],
            "Name": "Subtotal",
            "Params": ["worksheetKey", "range", "firstCell", "lastCell", "UsedRange", "column", "grpColumnIndex", "subtColumnIndex1", "subtColumnIndex2", "subtColumnIndexn", "functionName"],
            "ShortDescription": "Calculate the subtotal within a range.",
            "Syntax": ["Subtotal in <worksheetKey> range <range:firstCell:column to sum> split by <column>", "Subtotal in <worksheetKey> range <range:firstCell:lastCell|UsedRange> group by <grpColumnIndex> add subtotal to [<subtColumnIndex1>,<subtColumnIndex2>,<subtColumnIndexn>] use function <functionName:SUM|COUNT|AVG|MAX|MIN|PRODUCT|COUNTNUM|STDEV|STDEVP|VAR|VARP>"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["firstCell"],
                    "ParamName": "range"
                }],
                "Instruction": "Subtotal in <worksheetKey> range <range:firstCell:column to sum> split by <column>"
            }, {
                "Constants": [{
                    "Options": ["firstCell"],
                    "ParamName": "range"
                }, {
                    "Options": ["SUM", "COUNT", "AVG", "MAX", "MIN", "PRODUCT", "COUNTNUM", "STDEV", "STDEVP", "VAR", "VARP"],
                    "ParamName": "functionName"
                }],
                "Instruction": "Subtotal in <worksheetKey> range <range:firstCell:lastCell|UsedRange> group by <grpColumnIndex> add subtotal to [<subtColumnIndex1>,<subtColumnIndex2>,<subtColumnIndexn>] use function <functionName:SUM|COUNT|AVG|MAX|MIN|PRODUCT|COUNTNUM|STDEV|STDEVP|VAR|VARP>"
            }]
        }, {
            "CreationDate": "2019-Nov-13",
            "Description": "Sum all the values on a column. Index starts with 1.",
            "Example": ["SumAllColumnValues in Hoja1 in the column_index \"4\" and save as \"FilaCuatro\"\r"],
            "Name": "SumAllColumnValues",
            "Params": ["worksheetKey", "columnIndex", "variableName"],
            "ShortDescription": "Sum all the values on a column.",
            "Syntax": ["SumAllColumnValues in <worksheetKey> in the column_index \"<columnIndex>\" and save as \"<variableName>\""],
            "SyntaxDetail": [{
                "Instruction": "SumAllColumnValues in <worksheetKey> in the column_index \"<columnIndex>\" and save as \"<variableName>\""
            }]
        }, {
            "CreationDate": "2017-Aug-01",
            "Description": "Defines how the fields for a given pivot table are used. This corresponds to the pivot table area, where different filtering methods are applied to pivot table fields. FieldType valid values are row,column,filter. FunctionName valid values are average, sum, count, countnums, distinctcount, max, min, product, stdev, stdevp, unknown, var, varp.\\nFieldName is the name of the Column Title in the input table. PivotFieldKey is the variable name of each particular field.",
            "Example": ["TableField row from PivotTable fname \"Nombre del pagador\" as PivotFieldRow1        \r", "TableField column from PivotTable fname \"Elemento PEP\" as PivotFieldRow2\r", "TableField value function sum from PivotTable fname \"Ingresos\" as PivotFieldRow3\r"],
            "Name": "TableField",
            "Params": ["fieldType", "pivotTableKey", "functionName", "fieldName", "pivotFieldKey"],
            "ShortDescription": "Define how the fields for a given pivot table are used.",
            "Syntax": ["TableField <fieldType:row|column|filter> from <pivotTableKey> fname \"<fieldName>\" as <pivotFieldKey>", "TableField value function <functionName:average|sum|count|countnums|distinctcount|max|min|product|stdev|stdevp|unknown|var|varp> from <pivotTableKey> fname \"<fieldName>\" as <pivotFieldKey>"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["row", "column", "filter"],
                    "ParamName": "fieldType"
                }],
                "Instruction": "TableField <fieldType:row|column|filter> from <pivotTableKey> fname \"<fieldName>\" as <pivotFieldKey>"
            }, {
                "Constants": [{
                    "Options": ["average", "sum", "count", "countnums", "distinctcount", "max", "min", "product", "stdev", "stdevp", "unknown", "var", "varp"],
                    "ParamName": "functionName"
                }],
                "Instruction": "TableField value function <functionName:average|sum|count|countnums|distinctcount|max|min|product|stdev|stdevp|unknown|var|varp> from <pivotTableKey> fname \"<fieldName>\" as <pivotFieldKey>"
            }]
        }, {
            "CreationDate": "2021-Nov-22",
            "Description": "Saves in a variable, the index of a column or row of a table, where a certain statement is located. The instruction can be lastRow, lastCell. ",
            "Example": ["TableGetSpecial lastRow from wsheet table Table2 and save as LRow\r", "TableGetSpecial lastCol from wsheet table Table2 and save as LCol\r"],
            "Name": "TableGetSpecial",
            "Params": ["instruction", "worksheetKey", "tablekey", "variableKey"],
            "ShortDescription": "Get the location of a cell indicated in a table by \"special\" identifiers such as lastCell.",
            "Syntax": ["TableGetSpecial <instruction:lastRow|lastCol> from <worksheetKey> table <tablekey> and save as <variableKey>"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["lastRow", "lastCol"],
                    "ParamName": "instruction"
                }],
                "Instruction": "TableGetSpecial <instruction:lastRow|lastCol> from <worksheetKey> table <tablekey> and save as <variableKey>"
            }]
        }, {
            "CreationDate": "2017-Aug-01",
            "Description": "Sets a text format to a given column by index. Index starts with 1.",
            "Example": ["TextFormat in sheet1 in column 3\r"],
            "Name": "TextFormat",
            "Params": ["worksheetKey", "indexcol"],
            "ShortDescription": "Set a text format to a given column.",
            "Syntax": ["TextFormat in <worksheetKey> in column <indexColum>"],
            "SyntaxDetail": [{
                "Instruction": "TextFormat in <worksheetKey> in column <indexColum>"
            }]
        }, {
            "CreationDate": "2017-Aug-01",
            "Description": "Set a text format to a given column by header name.",
            "Example": ["TextFormat2 in Sheet1 in column Clientes\r"],
            "Name": "TextFormat2",
            "Params": ["worksheetKey", "header"],
            "ShortDescription": "Set a text format to a given column by header name.",
            "Syntax": ["TextFormat2 in <worksheetKey> in column <headerName>"],
            "SyntaxDetail": [{
                "Instruction": "TextFormat2 in <worksheetKey> in column <headerName>"
            }]
        }, {
            "CreationDate": "2017-Aug-01",
            "Description": "Set a text format to all the sheet.",
            "Example": ["TextFormatAll in sheet1\r"],
            "Name": "TextFormatAll",
            "Params": ["worksheetKey"],
            "ShortDescription": "Set a text format to all the sheet.",
            "Syntax": ["TextFormatAll in <worksheetKey>"],
            "SyntaxDetail": [{
                "Instruction": "TextFormatAll in <worksheetKey>"
            }]
        }, {
            "CreationDate": "2020-Nov-25",
            "Description": "Separates a character delimited text in a given range to columns with defined formats. Tab delimiter must specify TAB. Permited formats are Text,General,YMD,MDY,DMY,Skip. Optional DelimiterBehaviour can be \"consecutive\" which will consider consecutive delimiters as one. In fixed columns must be one fewer than the formats because the first column is from 0 to the first position. If everything needs to be of a certain format then only one format is allowed. When nothing is specified in format, it will be interpreted by Excel",
            "Example": ["TextToColumns sheetKey in column range A2:A20 delimited by {,} with format [Text,General,YMD,MDY,Skip,DMY]\r", "TextToColumns sheetKey in column range A2:A20 delimited by {TAB} with format [ Text ] consecutive\r", "TextToColumns sheetKey in column range A2:A20 delimited by {|} with format [ ] consecutive\r", "TextToColumns sheetKey in column range A2:A20 fixed [2,6,14,22,24] with format [Text,General,YMD,MDY,Skip,DMY]\r", "TextToColumns sheetKey in column range A2:A20 fixed [2,4,6,8] with format [ General ]\r"],
            "Name": "TextToColumns",
            "Params": ["worksheetKey", "range", "delimiter", "posibleFormats", "columns", "delimiterBehaviour"],
            "ShortDescription": "Separate text in a range to columns",
            "Syntax": ["TextToColumns <worksheetKey> in column range <range> delimited by {<delimiter>} with format [<posibleFormats:Text,General,YMD,MDY,Skip,DMY>] <delimiterBehaviour:consecutive|>", "TextToColumns <worksheetKey> in column range <range> fixed [<columns>] with format [<posibleFormats:Text,General,YMD,MDY,Skip,DMY>]"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["Text,General,YMD,MDY,Skip,DMY"],
                    "ParamName": "posibleFormats"
                }, {
                    "Options": ["consecutive", ""],
                    "ParamName": "delimiterBehaviour"
                }],
                "Instruction": "TextToColumns <worksheetKey> in column range <range> delimited by {<delimiter>} with format [<posibleFormats:Text,General,YMD,MDY,Skip,DMY>] <delimiterBehaviour:consecutive|>"
            }, {
                "Constants": [{
                    "Options": ["Text,General,YMD,MDY,Skip,DMY"],
                    "ParamName": "posibleFormats"
                }],
                "Instruction": "TextToColumns <worksheetKey> in column range <range> fixed [<columns>] with format [<posibleFormats:Text,General,YMD,MDY,Skip,DMY>]"
            }]
        }, {
            "CreationDate": "2019-Jun-28",
            "Description": "Turn Excel displayed alerts on or off. Set this property to false to suppress prompts and alert messages while a macro is running.",
            "Example": ["TurnAlertsTo true\r", "TurnAlertsTo false\r"],
            "Name": "TurnAlertsTo",
            "Params": ["alertValue"],
            "ShortDescription": "Turn Excel displayed alerts on or off.",
            "Syntax": ["TurnAlertsTo <alertValue:true|false>"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["true", "false"],
                    "ParamName": "alertValue"
                }],
                "Instruction": "TurnAlertsTo <alertValue:true|false>"
            }]
        }, {
            "CreationDate": "2019-Jun-19",
            "Description": "Turn the headless flag to true or false just for the excel processes. If it is true then the excel windows will hide and if it is false the excel windows will appear.",
            "Example": ["TurnHeadlessTo true\r", "TurnHeadlessTo false\r"],
            "Name": "TurnHeadlessTo",
            "Params": ["headlessFlag"],
            "ShortDescription": "Turn the headless flag to true or false just for the excel processes. If it is true then the excel windows will hide and if it is false the excel windows will appear.",
            "Syntax": ["TurnHeadlessTo <headlessFlag:true|false>"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["true", "false"],
                    "ParamName": "headlessFlag"
                }],
                "Instruction": "TurnHeadlessTo <headlessFlag:true|false>"
            }]
        }, {
            "CreationDate": "2021-Nov-17",
            "Description": "Unhide all rows or columns from a worksheet in a given range",
            "Example": ["Unhide all from hoja1key\r", "Unhide from hoja1key all columns\r", "Unhide from hoja1key all rows\r"],
            "Name": "Unhide",
            "Params": ["worksheetKey"],
            "ShortDescription": "Unhide all rows or columns in a given range.",
            "Syntax": ["Unhide all from <worksheetKey>", "Unhide from <worksheetKey> all columns", "Unhide from <worksheetKey> all rows"],
            "SyntaxDetail": [{
                "Instruction": "Unhide all from <worksheetKey>"
            }, {
                "Instruction": "Unhide from <worksheetKey> all columns"
            }, {
                "Instruction": "Unhide from <worksheetKey> all rows"
            }]
        }, {
            "CreationDate": "2020-Jun-19",
            "Description": "Unload the XSD schema or XML from a workbook. This operation will also unbind all fields.",
            "Example": ["UnloadXSD in FacturasWB\r"],
            "Name": "UnloadXSD",
            "Params": ["workbookKey", "path"],
            "ShortDescription": "Unload the XSD schema or XML from a workbook.",
            "Syntax": ["UnloadXSD in <workbookKey>"],
            "SyntaxDetail": [{
                "Instruction": "UnloadXSD in <workbookKey>"
            }]
        }, {
            "CreationDate": "2017-Aug-23",
            "Description": "Unmerge all cells from the worksheet.",
            "Example": ["Unmerge WSheet2\r"],
            "Name": "Unmerge",
            "Params": ["worksheetKey"],
            "ShortDescription": "Unmerge all cells from the worksheet.",
            "Syntax": ["Unmerge <worksheetKey>"],
            "SyntaxDetail": [{
                "Instruction": "Unmerge <worksheetKey>"
            }]
        }, {
            "CreationDate": "2019-Jun-21",
            "Description": "Unlock the protection from the desired workbook or sheet. If there is no password, use \"none\" at the password field.",
            "Example": ["Unprotect {book} by_name {LibroUsado} with_password {secreto}\r", "Unprotect {sheet} by_name {hoja} with_password {secreto}\r", "Unprotect {sheet} by_name {hoja} with_password {none}\r"],
            "Name": "Unprotect",
            "Params": ["item", "workbookKey", "worksheetKey", "password"],
            "ShortDescription": "Unlock the protection from a workbook or sheet.",
            "Syntax": ["Unprotect {book} by_name {<workbookKey>} with_password {<password>}", "Unprotect {sheet} by_name {<worksheetKey>} with_password {<password>}"],
            "SyntaxDetail": [{
                "Instruction": "Unprotect {book} by_name {<workbookKey>} with_password {<password>}"
            }, {
                "Instruction": "Unprotect {sheet} by_name {<worksheetKey>} with_password {<password>}"
            }]
        }, {
            "CreationDate": "2017-Sep-09",
            "Description": "Update the pivot table range of a given pivot table key. New_sheet is the sheet where the input table is located. Ranges are defined with UsedRange or notation as R=<relative rows> C=<relative columns>, where \"-1\" indicates one column or row less from the original range, and \"1\" is one column or row additional from the original range.",
            "Example": ["UpdatePT PivotTable new_sheet GE new_range UsedRange\r", "UpdatePT PivotTable new_sheet GE new_range R=-2 C=-1\r", "UpdatePT PivotTable new_sheet GE new_range R=-2\r", "UpdatePT PivotTable new_sheet GE new_range C=-1\r"],
            "ExtraDocs": "https://innotekfilestore.file.core.windows.net/frida-docs/Readers/Excel/Articles/Tablas%20Pivote.pdf",
            "Name": "UpdatePT",
            "Params": ["pivotTableKey", "worksheetKey", "rangeKey"],
            "ShortDescription": "Update the pivot table range.",
            "Syntax": ["UpdatePT <pivotTableKey> new_sheet <worksheetKey> new_range <rangeKey>"],
            "SyntaxDetail": [{
                "Instruction": "UpdatePT <pivotTableKey> new_sheet <worksheetKey> new_range <rangeKey>"
            }]
        }, {
            "CreationDate": "2018-Jan-30",
            "Description": "Updates a Pivot table by name in a specific worksheet changing the data source. Range can only change in columns taken and input tables must start from A1.",
            "Example": ["UpdatePTChangingSource \"Tabla din\u00e1mica11\" sheet IniciativaWorkSheet from DeckWorkSheet range C33\r"],
            "Name": "UpdatePTChangingSource",
            "Params": ["pivotTableName", "worksheetKey", "worksheetSourceKey", "column"],
            "ShortDescription": "Update a Pivot table by name changing the data source.",
            "Syntax": ["UpdatePTChangingSource <pivotTableName> sheet <worksheetKey> from <worksheetSourceKey> range <column>"],
            "SyntaxDetail": [{
                "Instruction": "UpdatePTChangingSource <pivotTableName> sheet <worksheetKey> from <worksheetSourceKey> range <column>"
            }]
        }, {
            "CreationDate": "2017-Aug-01",
            "Description": "Write something in a given cell in a worksheet. ColRow can take values such as A1, D15, etc. RowIndex and colIndex must take numerical values and it starts from 1, or either \"lastrow\" or \"lastcol\". Format will be applied to the cell after writting the text. Original format is mainly intended for dates, to identify the origin date parts in the text. Excel formats are different from this, refer to https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings for further information.",
            "Example": ["Write \"Nombres\" in hoja1 cell E1\r", "Write \"05/07/2020\" in hoja1 cell E1 with format dd/mm/yyyy\r", "Write \"05-07-2020 14:10\" in hoja1 cell E1 with format dd/mm/yyyy hh:mm source dd-MM-yyyy hh:mm\r", "Write \"115\" in hoja1 cell F3 with format[Red][< 100]0;[Blue] [>=100]0 \r", "Write \"12345678\" in hoja1 cell F1 with format #,###.00\r", "Write \"Nombres\" in hoja1 row 1 and column 5\r", "Write \"Nombres\" in hoja1 row lastrow and column lastcol\r"],
            "Name": "Write",
            "Params": ["something", "worksheetKey", "ColRow", "rowIndex", "colIndex", "format", "originalFormat"],
            "ShortDescription": "Write something in a given cell in a worksheet.",
            "Syntax": ["Write \"<something>\" in <worksheetKey> cell <ColRow>", "Write \"<something>\" in <worksheetKey> cell <ColRow> with format <format>", "Write \"<something>\" in <worksheetKey> cell <ColRow> with format <format> source <originalFormat>", "Write \"<something>\" in <worksheetKey> row <rowIndex> and column <colIndex>"],
            "SyntaxDetail": [{
                "Instruction": "Write \"<something>\" in <worksheetKey> cell <ColRow>"
            }, {
                "Instruction": "Write \"<something>\" in <worksheetKey> cell <ColRow> with format <format>"
            }, {
                "Instruction": "Write \"<something>\" in <worksheetKey> cell <ColRow> with format <format> source <originalFormat>"
            }, {
                "Instruction": "Write \"<something>\" in <worksheetKey> row <rowIndex> and column <colIndex>"
            }]
        }, {
            "CreationDate": "2017-Aug-01",
            "Description": "Write something in all the cells of a given column. The flag -visible limits the writing to those cells that are visible (i.e., after a filter). \\nOriginal format is mainly intended for dates, to identify the origin date parts in the text. Excel formats are different from this, refer to https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings for further information. Take notice that month in \"format\" is mm, and in \"source\" is MM.\\nIndexes start with 1.",
            "Example": ["WriteAll \"Tiendas\" in Sheet4 start_at B4\r", "WriteAll \"25-01-1985\" in Sheet4 start_at B4 with format dd/mm/yyyy source dd-MM-yyyy \r", "WriteAll \"Filtrada\" in Sheet4 start_at B4 -visible\r"],
            "Name": "WriteAll",
            "Params": ["something", "worksheetKey", "cell", "format", "originalFormat"],
            "ShortDescription": "Write something in all the cells of a given column.",
            "Syntax": ["WriteAll \"<something>\" in <worksheetKey> start_at <cell>", "WriteAll \"<something>\" in <worksheetKey> start_at <cell> -visible", "WriteAll \"<something>\" in <worksheetKey> start_at <cell> with format <format> source <originalFormat>", "WriteAll \"<something>\" in <worksheetKey> start_at <cell> with format <format> source <originalFormat> -visible"],
            "SyntaxDetail": [{
                "Instruction": "WriteAll \"<something>\" in <worksheetKey> start_at <cell>"
            }, {
                "Instruction": "WriteAll \"<something>\" in <worksheetKey> start_at <cell> -visible"
            }, {
                "Instruction": "WriteAll \"<something>\" in <worksheetKey> start_at <cell> with format <format> source <originalFormat>"
            }, {
                "Instruction": "WriteAll \"<something>\" in <worksheetKey> start_at <cell> with format <format> source <originalFormat> -visible"
            }]
        }, {
            "CreationDate": "2017-Aug-23",
            "Description": "Write a formula in a given cell or range of visible cells. Use \"LastRow\" when the last row is unknown. Values hidden due to applied filters will not be affected. \"Paste only value\" syntax will not paste formulas, but the result value instead. When the formula uses quotation marks (\"), it is best to use key syntax ({}). [IMPORTANT] In runtime, Excel formulas are expected in English and with the comma as separator: Example: =IF(A1>10,\"Correct\",\"Incorrect\")",
            "Example": ["WriteFormula WSExampleName in Q2:Q400 formula =IF(A2 > 10 , \"Correct\" , \"Incorrect\")\r", "WriteFormula WSExampleName in Q2:LastRow formula =IF(A2 > 10 , \"Correct\" , \"Incorrect\")\r", "WriteFormula sociedadesS in B9 formula \"=VLOOKUP(A1, $A$1:$G$15,7,FALSE)\"\r", "WriteFormula sociedadesS in B9:LastRow formula {=TEXT(\"42801\",\"AAAA/MM/DD\")}\r", "WriteFormula sociedadesS in B9:B15 formula =VLOOKUP(A1,'[Archivo de Configuracion Tarjetas.xlsx]Cuentas a iterar'!$A$1:$G$15,2,FALSE)\r"],
            "Name": "WriteFormula",
            "Params": ["worksheetKey", "rangeKey", "formula"],
            "ShortDescription": "Write a formula in a given cell or range of visible cells.",
            "Syntax": ["WriteFormula <worksheetKey> in <rangeKey> formula \"<formula>\"", "WriteFormula <worksheetKey> in <rangeKey> formula <formula>", "WriteFormula <worksheetKey> in <rangeKey> formula {<formula>}", "WriteFormula <worksheetKey> in <rangeKey> formula \"<formula>\" paste only value", "WriteFormula <worksheetKey> in <rangeKey> formula <formula> paste only value", "WriteFormula <worksheetKey> in <rangeKey> formula {<formula>} paste only value"],
            "SyntaxDetail": [{
                "Instruction": "WriteFormula <worksheetKey> in <rangeKey> formula \"<formula>\""
            }, {
                "Instruction": "WriteFormula <worksheetKey> in <rangeKey> formula <formula>"
            }, {
                "Instruction": "WriteFormula <worksheetKey> in <rangeKey> formula {<formula>}"
            }, {
                "Instruction": "WriteFormula <worksheetKey> in <rangeKey> formula \"<formula>\" paste only value"
            }, {
                "Instruction": "WriteFormula <worksheetKey> in <rangeKey> formula <formula> paste only value"
            }, {
                "Instruction": "WriteFormula <worksheetKey> in <rangeKey> formula {<formula>} paste only value"
            }]
        }, {
            "CreationDate": "2019-Oct-18",
            "Description": "Write a formula in a specified cell or range, it works if you have a filter applied. \"LastRow\" can be used when the last cell is unknown. \"Paste only value\" will apply the formula and paste the result. [IMPORTANT] In runtime, Excel formulas are expected in English and with the comma as separator: Example: =IF(A1>10,\"Correct\",\"Incorrect\")",
            "Example": ["WriteFormulaVisible WSExampleName in Q2:Q400 formula =IF(A2 > 10 , \"Correct\" , \"Incorrect\")\r", "WriteFormulaVisible WSExampleName in Q2:LastRow formula =IF(A2 > 10 , \"Correct\" , \"Incorrect\")\r", "WriteFormulaVisible sociedadesS in B9 formula =VLOOKUP(A1, $A$1:$G$15,7,FALSE)\r", "WriteFormulaVisible sociedadesS in B9:B15 formula =VLOOKUP(A1,'[Archivo de Configuracion Tarjetas.xlsx]Cuentas a iterar'!$A$1:$G$15,2,FALSE)\r"],
            "Name": "WriteFormulaVisible",
            "Params": ["worksheetKey", "cell", "range", "formula"],
            "ShortDescription": "Write a formula in a cell or range.",
            "Syntax": ["WriteFormulaVisible <worksheetKey> in <cell or range> formula \"<formula>\"", "WriteFormulaVisible <worksheetKey> in <cell or range> formula \"<formula>\" paste only value", "WriteFormulaVisible <worksheetKey> in <cell or range> formula <formula>", "WriteFormulaVisible <worksheetKey> in <cell or range> formula <formula> paste only value"],
            "SyntaxDetail": [{
                "Instruction": "WriteFormulaVisible <worksheetKey> in <cell or range> formula \"<formula>\""
            }, {
                "Instruction": "WriteFormulaVisible <worksheetKey> in <cell or range> formula \"<formula>\" paste only value"
            }, {
                "Instruction": "WriteFormulaVisible <worksheetKey> in <cell or range> formula <formula>"
            }, {
                "Instruction": "WriteFormulaVisible <worksheetKey> in <cell or range> formula <formula> paste only value"
            }]
        }, {
            "CreationDate": "2018-Sep-12",
            "Description": "Write a value on an especific range of cells. In the end cell LastCol and LastRow can be used. Indexes start with 1.",
            "Example": ["WriteInRange from the worksheet worksheetName the value \"10/10/2018\" from the cell {2,4} up to the cell {4000,5}\r", "WriteInRange from the worksheet worksheetName the value \"10/10/2018\" from the cell {2,4} up to the cell {4000,LastCol}\r", "WriteInRange from the worksheet worksheetName the value \"10/10/2018\" from the cell {2,4} up to the cell {LastRow,6}\r", "WriteInRange from the worksheet worksheetName the value \"10/10/2018\" from the cell {2,4} up to the cell {LastRow,LastCol}\r"],
            "Name": "WriteInRange",
            "Params": ["worksheetKey", "Value", "StartCol", "StartRow", "EndCol", "EndRow"],
            "ShortDescription": "Write a value on an especific range of cells.",
            "Syntax": ["WriteInRange from the worksheet <worksheetKey> the value \"<value>\" from the cell {<StartRowIndex>,<StartColIndex>} up to the cell {<EndRowIndex>,<EndColIndex>}"],
            "SyntaxDetail": [{
                "Instruction": "WriteInRange from the worksheet <worksheetKey> the value \"<value>\" from the cell {<StartRowIndex>,<StartColIndex>} up to the cell {<EndRowIndex>,<EndColIndex>}"
            }]
        }, {
            "CreationDate": "2017-Aug-23",
            "Description": "Write a list of values from a list variable into a range or column. Starting row can be indicated with start_at. Indexes start with 1.",
            "Example": ["WriteList Nombres in WSheet3 col_index 10 start_at 2\r", "WriteList Nombres in WSMex col_header Nombres start_at 2\r"],
            "Name": "WriteList",
            "Params": ["varKey", "worksheetKey", "columnIndex", "colummnHeader", "rowIndex"],
            "ShortDescription": "Write a list of values from a list variable into a range or column.",
            "Syntax": ["WriteList <varKey> in <worksheetKey> col_index <columnIndex> start_at <rowIndex>", "WriteList <varKey> in <worksheetKey> col_header <colummnHeader> start_at <rowIndex>"],
            "SyntaxDetail": [{
                "Instruction": "WriteList <varKey> in <worksheetKey> col_index <columnIndex> start_at <rowIndex>"
            }, {
                "Instruction": "WriteList <varKey> in <worksheetKey> col_header <colummnHeader> start_at <rowIndex>"
            }]
        }, {
            "CreationDate": "2019-Mar-27",
            "Description": "Write the values in a List Variable to a column on a worksheet. Indexes start at 1. If \"visible\" flag is on, values will only be written in not filtered cells.",
            "Example": ["WriteListOnColumn in WSName the variable \"Datos\" on the column \"2\"\r", "WriteListOnColumn in WSName the variable \"Acceptados\" on the column \"2\" visible\r", "WriteListOnColumn in WSName the variable \"Actividad\" on the column \"3\" start_at row 4\r"],
            "Name": "WriteListOnColumn",
            "Params": ["worksheetKey", "variableKey", "columnIndex", "rowIndex", "visibleFlag"],
            "ShortDescription": "Write the values in a List Variable to a column on a worksheet.",
            "Syntax": ["WriteListOnColumn in <worksheetKey> the variable \"<variableKey>\" on the column \"<columnIndex>\" <visibleFlag:visible|>", "(Deprecated)WriteListOnColumn in <worksheetKey> the variable \"<variableKey>\" on the column \"<columnIndex>\" start_at <rowIndex> <visibleFlag:visible|>", "WriteListOnColumn in <worksheetKey> the variable \"<variableKey>\" on the column \"<columnIndex>\" start_at row <rowIndex> <visibleFlag:visible|>"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["visible", ""],
                    "ParamName": "visibleFlag"
                }],
                "Instruction": "WriteListOnColumn in <worksheetKey> the variable \"<variableKey>\" on the column \"<columnIndex>\" <visibleFlag:visible|>"
            }, {
                "Constants": [{
                    "Options": ["visible", ""],
                    "ParamName": "visibleFlag"
                }],
                "Instruction": "(Deprecated)WriteListOnColumn in <worksheetKey> the variable \"<variableKey>\" on the column \"<columnIndex>\" start_at <rowIndex> <visibleFlag:visible|>"
            }, {
                "Constants": [{
                    "Options": ["visible", ""],
                    "ParamName": "visibleFlag"
                }],
                "Instruction": "WriteListOnColumn in <worksheetKey> the variable \"<variableKey>\" on the column \"<columnIndex>\" start_at row <rowIndex> <visibleFlag:visible|>"
            }]
        }, {
            "CreationDate": "2020-Nov-18",
            "Description": "Write the values in a List Variable to a row on a worksheet. Available syntax to indicate a starting column index. Indexes start at 1.",
            "Example": ["WriteListOnRow in WSName the variable \"Datos\" on the row \"2\"\r", "WriteListOnRow in WSName the variable \"Actividad\" on the row \"3\" start_at 4\r"],
            "Name": "WriteListOnRow",
            "Params": ["worksheetKey", "variableKey", "columnIndex", "rowIndex"],
            "ShortDescription": "Write the values in a List Variable to a row on a worksheet.",
            "Syntax": ["WriteListOnRow in <worksheetKey> the variable \"<variableKey>\" on the row \"<rowIndex>\"", "WriteListOnRow in <worksheetKey> the variable \"<variableKey>\" on the row \"<rowIndex>\" start_at <columnIndex>"],
            "SyntaxDetail": [{
                "Instruction": "WriteListOnRow in <worksheetKey> the variable \"<variableKey>\" on the row \"<rowIndex>\""
            }, {
                "Instruction": "WriteListOnRow in <worksheetKey> the variable \"<variableKey>\" on the row \"<rowIndex>\" start_at <columnIndex>"
            }]
        }, {
            "CreationDate": "2017-Nov-06",
            "Description": "Write a table in the last row of a worksheet using the given variable. Index starts with 1.",
            "Example": ["WriteTable in WSheet2 the values of \"Lista\" in last row and column 8\r"],
            "Name": "WriteTable",
            "Params": ["worksheetKey", "variableKey", "columnIndex"],
            "ShortDescription": "Write a table in the last row of a worksheet using the given variable.",
            "Syntax": ["WriteTable in <worksheetKey> the values of \"<variableKey>\" in last row and column <columnIndex>"],
            "SyntaxDetail": [{
                "Instruction": "WriteTable in <worksheetKey> the values of \"<variableKey>\" in last row and column <columnIndex>"
            }]
        }, {
            "CreationDate": "2019-Mar-14",
            "Description": "Write a list starting in A1 from a given worksheet.",
            "Example": ["WriteTableVariable in the worksheet WSExampleName write the variable \"Nombres\"\r"],
            "Name": "WriteTableVariable",
            "Params": ["worksheetKey", "VariableName"],
            "ShortDescription": "Write a list starting in A1 from a given worksheet.",
            "Syntax": ["WriteTableVariable in the worksheet <worksheetKey> write the variable \"<VariableName>\""],
            "SyntaxDetail": [{
                "Instruction": "WriteTableVariable in the worksheet <worksheetKey> write the variable \"<VariableName>\""
            }]
        }, {
            "CreationDate": "2018-Nov-05",
            "Description": "Apply a filter to a column A and write the given value in the same row but in another column (column B), in case it does not exist it writes the filter in column A and the value in column B at the end of the file. \"Single value\" syntax will only write the first instance of the searched value. \\nThe column where you expect it to write must be visible to the used range, i.e. there must be at least a value somewhere in that column, for example the header.",
            "Example": ["WriteValueThatMatch in the worksheet wsheet at the column {1} matching the value \"111001110\" and writing in the column {3} the value {TicketAuthor}\r", "WriteValueThatMatch in the worksheet wsheet at the column {1} matching the value \"111001110\" starting at {2} and writing in the column {8} the value {TicketAuthor}\r", "WriteValueThatMatch in the worksheet wsheet at the column {1} matching the value \"Entregado\" and writing in the column {2} the single value {OK}   \r", "WriteValueThatMatch in the worksheet wsheet at the column {1} matching the value \"true\" and writing in cells starting at {2} the values {Aceptado,20200501,<<<varPropia>>>}\r"],
            "Name": "WriteValueThatMatch",
            "Params": ["worksheetKey", "ColumnAIndex", "ColumnBIndex2", "ColumnBStartIndex2", "Criteria", "value", "value1", "value2", "valueN"],
            "ShortDescription": "Apply a filter to a column and write the given value to a corresponding row in another column.",
            "Syntax": ["WriteValueThatMatch in the worksheet <worksheetKey> at the column {<ColumnAIndex>} matching the value \"<Criteria>\" and writing in the column {<ColumnBIndex2>} the value {<value>}", "WriteValueThatMatch in the worksheet <worksheetKey> at the column {<ColumnAIndex>} matching the value \"<Criteria>\" starting at {<ColumnBStartIndex2>} and writing in the column {<ColumnBIndex2>} the value {<value>}", "WriteValueThatMatch in the worksheet <worksheetKey> at the column {<ColumnAIndex>} matching the value \"<Criteria>\" and writing in the column {<ColumnBIndex2>} the single value {<value>}", "WriteValueThatMatch in the worksheet <worksheetKey> at the column {<ColumnAIndex>} matching the value \"<Criteria>\" and writing in column starting at {<ColumnBStartIndex2>} the values {<value1>,<value2>....,<valueN>}"],
            "SyntaxDetail": [{
                "Instruction": "WriteValueThatMatch in the worksheet <worksheetKey> at the column {<ColumnAIndex>} matching the value \"<Criteria>\" and writing in the column {<ColumnBIndex2>} the value {<value>}"
            }, {
                "Instruction": "WriteValueThatMatch in the worksheet <worksheetKey> at the column {<ColumnAIndex>} matching the value \"<Criteria>\" starting at {<ColumnBStartIndex2>} and writing in the column {<ColumnBIndex2>} the value {<value>}"
            }, {
                "Instruction": "WriteValueThatMatch in the worksheet <worksheetKey> at the column {<ColumnAIndex>} matching the value \"<Criteria>\" and writing in the column {<ColumnBIndex2>} the single value {<value>}"
            }, {
                "Instruction": "WriteValueThatMatch in the worksheet <worksheetKey> at the column {<ColumnAIndex>} matching the value \"<Criteria>\" and writing in column starting at {<ColumnBStartIndex2>} the values {<value1>,<value2>....,<valueN>}"
            }]
        }, {
            "CreationDate": "2019-Jun-04",
            "Description": "Write the data saved in a variable, to a given cell location. Indexes start with 1. Row index can be \"LastRow\".",
            "Example": ["WriteVariableValue {filtrado} in {wsheet1} start_at_row {1} start_at_column {1}\r", "WriteVariableValue {filtrado} in {wsheet1} start_at_row {LastRow} start_at_column {1}\r"],
            "Name": "WriteVariableValue",
            "Params": ["worksheetKey", "columnIndex", "rowIndex", "variableName"],
            "ShortDescription": "Write the data saved in a variable, to a given cell location.",
            "Syntax": ["WriteVariableValue {<variableName>} in {<worksheetKey>} start_at_row {<rowIndex>} start_at_column {<columnIndex>}"],
            "SyntaxDetail": [{
                "Instruction": "WriteVariableValue {<variableName>} in {<worksheetKey>} start_at_row {<rowIndex>} start_at_column {<columnIndex>}"
            }]
        }, {
            "CreationDate": "2018-Mar-02",
            "Description": "Apply Zoom in a given worksheet.",
            "Example": ["Zoom in workSheet number 80\r"],
            "Name": "Zoom",
            "Params": ["worksheetKey", "number"],
            "ShortDescription": "Apply Zoom in a given worksheet.",
            "Syntax": ["Zoom in <worksheetKey> number <number>"],
            "SyntaxDetail": [{
                "Instruction": "Zoom in <worksheetKey> number <number>"
            }]
        }],
        "ID": 0,
        "Keyword": "Excel",
        "Name": "Excel Reader",
        "_FAdminKey": "Excel"
    },
    "1": {
        "Description": "With Titanium you will have the ability to type text and to move the cursor interacting with the elements active on your screen. Incorporating functions that will let you take screenshots or detect events such as error messages, letting you take actions and automate all your process as well as its business rules. Titanium is so powerful that you will be able to create a robotic programing automation (RPA) without needing to see the source code of the project by applying computer vision algorithms, you only need to supply an image sample of the element you are searching for. Also you can try its OCR capabilities as see how fast you can start making your own RPA.",
        "Function": [{
            "CreationDate": "2019-Feb-20",
            "Description": "Takes a screenshot of the whole screen and saves it in the application location (App\\screenshots\\ImageCapture.png) unless other specified.",
            "Example": ["Titanium CaptureImage\r", "Titanium CaptureImage and save as C:\\Users\\user\\Pictures\\Image.png\r"],
            "Name": "CaptureImage",
            "Params": ["ImagePath"],
            "ShortDescription": "Take a screenshot.",
            "Syntax": ["CaptureImage", "CaptureImage and save as <ImagePath>"],
            "SyntaxDetail": [{
                "Instruction": "CaptureImage and save as <ImagePath>"
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/Titanium/2022/CaptureImage_Recording.mp4"]
        }, {
            "CreationDate": "2019-Feb-15",
            "Description": "Make one or more clicks on the desired coordinates (x,y). For a right click, use -1 as the number of clicks.",
            "Example": ["Titanium ClickCoord -x 414 -y 456 -clicks 1\r", "Titanium ClickCoord -x 550 -y 550 -clicks -1\r"],
            "Name": "ClickCoord",
            "Params": ["xCoord", "yCoord", "NumberClicks"],
            "ShortDescription": "Click on the (x,y) coordinates.",
            "Syntax": ["ClickCoord -x <xCoord> -y <yCoord> -clicks <NumberClicks>"],
            "SyntaxDetail": [{
                "Instruction": "ClickCoord -x <xCoord> -y <yCoord> -clicks <NumberClicks>"
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/Titanium/2022/ClickCoord_Recording.mp4"]
        }, {
            "CreationDate": "2018-May-11",
            "Description": "Make one or more clicks on the image in the active screen. To make a right click send 4 as param in the NumberClicks variable. Also you can add similarity and click position as optional parameters. For click position you have this options (TOP_LEFT,TOP_CENTER,TOP_RIGHT,CENTER_LEFT,CENTER,CENTER_RIGHT,BOTTOM_LEFT,BOTTOM_CENTER,BOTTOM_RIGHT). Default similarity 0.7. Offset coordinates are relative to the click position and can be used to position the click based on where a known image is.",
            "Example": ["Titanium ClickImage test.PNG Timeout= 10000 NumberClicks= 1\r", "Titanium ClickImage test.PNG Timeout= 10000 NumberClicks= 1 Sim= 0.9\r", "Titanium ClickImage test.PNG Timeout= 10000 NumberClicks= 1 ClickPosition= CENTER_LEFT\r", "Titanium ClickImage test.PNG Timeout= 10000 NumberClicks= 1 ClickButton= CENTER_LEFT\r"],
            "Name": "ClickImage",
            "Params": ["ImageName", "Time", "NumberClicks", "ClickPosition", "Similarity", "ClickButton"],
            "ShortDescription": "Click on an image in the active screen.",
            "Syntax": ["ClickImage <ImageName> Timeout= <Time>", "ClickImage <ImageName> Timeout= <Time> NumberClicks= <NumberClicks>", "ClickImage <ImageName> Timeout= <Time> NumberClicks= <NumberClicks> Sim= <Similarity>", "ClickImage <ImageName> Timeout= <Time> NumberClicks= <NumberClicks> ClickPosition= <ClickPosition>", "ClickImage <ImageName> Timeout= <Time> NumberClicks= <NumberClicks> ClickPosition= <ClickPosition> OffsetX= <OffsetCoordX> OffsetY= <OffsetCoordY>", "ClickImage <ImageName> Timeout= <Time> NumberClicks= <NumberClicks> ClickButton= <ClickButton>"],
            "SyntaxDetail": [{
                "Instruction": "ClickImage <ImageName> Timeout= <Time>"
            }, {
                "Instruction": "ClickImage <ImageName> Timeout= <Time> NumberClicks= <NumberClicks>"
            }, {
                "Instruction": "ClickImage <ImageName> Timeout= <Time> NumberClicks= <NumberClicks> Sim= <Similarity>"
            }, {
                "Instruction": "ClickImage <ImageName> Timeout= <Time> NumberClicks= <NumberClicks> ClickPosition= <ClickPosition>"
            }, {
                "Instruction": "ClickImage <ImageName> Timeout= <Time> NumberClicks= <NumberClicks> ClickPosition= <ClickPosition> OffsetX= <OffsetCoordX> OffsetY= <OffsetCoordY>"
            }, {
                "Instruction": "ClickImage <ImageName> Timeout= <Time> NumberClicks= <NumberClicks> ClickButton= <ClickButton>"
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/Titanium/2022/ClickImage_Recording.mp4"]
        }, {
            "CreationDate": "2021-Jul-28",
            "Description": "Using OCR, search on screen for a word or phrase, if it exists, a click (Use optional parameter NumberClicks to make more than 1. For a right click use -1) is given on it. By default, the click is made in the center of the text but optional parameter ClickPosition allows the use of predifined positions or a word/phrase contained in the SearchString; optional parameters XOffset and YOffset can be defined for position adjustments in pixels. If there are various matches of the SearchString, the optional parameter Index can be used to indicate the number of coincidence to be clicked; if the given Index is greater than the number of matches found, an error is thrown. By default, MatchCase is true, which means the letter casing matters when searching for matches. SpecialCharacters is set to false by default, which means language related characters such as \u00e1,\u00e9,\u00ed,\u00f3,\u00fa,\u00e4,\u00eb,\u00ef,\u00fc,\u00f6 will be interpreted as a,e,i,o,u from the SearchString as well from the OCR result. If Turing Titanium Debug Mode is on, an additional screenshot will be taken showing the detected text and the point clicked.",
            "Example": ["Titanium ClickOnText \"PEREZ VAZQUEZ AIDA MARA\"\r", "Titanium ClickOnText \"PEREZ VAZQUEZ AIDA MARA\" MatchCase= False\r", "Titanium ClickOnText \"PEREZ VAZQUEZ AIDA MARA\" MatchCase= False ClickPosition= TOP_RIGHT\r", "Titanium ClickOnText \"PEREZ VAZQUEZ AIDA MARA\" NumberClicks= 2 ClickPosition= \"VAZQUEZ\"\r", "Titanium ClickOnText \"VAZQUEZ\" NumberClicks= 2 ClickPosition= BOTTOM Index= 3\r", "Titanium ClickOnText \"PEREZ VAZQUEZ AIDA MARA\" MatchCase= True XOffset= 20\r", "Titanium ClickOnText \"PEREZ VAZQUEZ AIDA MARA\" MatchCase= True ClickPosition= CENTER_RIGHT XOffset= 20 YOffset= 20\r", "Titanium ClickOnText \"P\u00c9REZ V\u00c1ZQUEZ\" SpecialCharacters= True\r"],
            "Name": "ClickOnText",
            "Params": ["SearchString", "MatchCase", "NumberClicks", "ClickPosition", "XOffset", "YOffset", "Index", "SpecialCharacters"],
            "ShortDescription": "Click on a word or phrase.",
            "Syntax": ["ClickOnText \"<SearchString>\" MatchCase= <MatchCase:True|False> NumberClicks= <NumberClicks> ClickPosition= <ClickPosition:TOP_LEFT|TOP_CENTER|TOP_RIGHT|CENTER_LEFT|CENTER|CENTER_RIGHT|BOTTOM_LEFT|BOTTOM_CENTER|BOTTOM_RIGHT|\"TextContainedInSearchString\"> XOffset= <XOffset> YOffset= <YOffset> Index= <Index> SpecialCharacters= <SpecialCharacters:True|False>"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["True", "False"],
                    "ParamName": "MatchCase"
                }, {
                    "Options": ["TOP_LEFT", "TOP_CENTER", "TOP_RIGHT", "CENTER_LEFT", "CENTER", "CENTER_RIGHT", "BOTTOM_LEFT", "BOTTOM_CENTER", "BOTTOM_RIGHT", "\"TextContainedInSearchString\""],
                    "ParamName": "ClickPosition"
                }, {
                    "Options": ["True", "False"],
                    "ParamName": "SpecialCharacters"
                }],
                "Instruction": "ClickOnText \"<SearchString>\" MatchCase= <MatchCase:True|False> NumberClicks= <NumberClicks> ClickPosition= <ClickPosition:TOP_LEFT|TOP_CENTER|TOP_RIGHT|CENTER_LEFT|CENTER|CENTER_RIGHT|BOTTOM_LEFT|BOTTOM_CENTER|BOTTOM_RIGHT|\"TextContainedInSearchString\"> XOffset= <XOffset> YOffset= <YOffset> Index= <Index> SpecialCharacters= <SpecialCharacters:True|False>"
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/Titanium/2022/ClickOnText_Recording.mp4"]
        }, {
            "CreationDate": "2018-Dec-11",
            "Description": "This Function is used to crop an image by inputting the cropping percentages desired and creating a copy of it in the \"screenshots\" Turing folder.",
            "Example": ["Titanium CropImage C:\\Users\\user\\Pictures\\Image.PNG WidthPercentage= 50 HeightPercentage= 50 and save as CropImagePath\r", "Titanium CropImage C:\\Users\\user\\Pictures\\Image.PNG Top= 20 Bottom= 40 Left= 30 Right= 10 and save as CropImagePath\r"],
            "Name": "CropImage",
            "Params": ["ImagePathToBeCropped", "CropImagePath"],
            "ShortDescription": "Crop an image using percentages of the screen.",
            "Syntax": ["CropImage <ImagePathToBeCropped> WidthPercentage= <Width> HeightPercentage= <Height> and save as <CropImagePath>", "CropImage <ImagePathToBeCropped> Top= <TopPercentage> Bottom= <BottomPercentage> Left= <LeftPercentage> Right= <RightPercentage> and save as <CropImagePath>"],
            "SyntaxDetail": [{
                "Instruction": "CropImage <ImagePathToBeCropped> WidthPercentage= <Width> HeightPercentage= <Height> and save as <CropImagePath>"
            }, {
                "Instruction": "CropImage <ImagePathToBeCropped> Top= <TopPercentage> Bottom= <BottomPercentage> Left= <LeftPercentage> Right= <RightPercentage> and save as <CropImagePath>"
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/Titanium/2022/CropImage_Recording.mp4"]
        }, {
            "CreationDate": "2021-Apr-19",
            "Description": "This function crops an image, given the pixel coordinates (x,y) of the top-left and the bottom-right. Additionally, this function can also rotate the image if specified.",
            "Example": ["Titanium CropImageExact src={c:/Users/gilberto.isida/Downloads/image.png} out={c:/Users/gilberto.isida/Downloads/cropped.png} top={10} left={50} bottom={120} right={250}\r", "Titanium CropImageExact src={c:/Users/gilberto.isida/Downloads/image.png} out={c:/Users/gilberto.isida/Downloads/cropped.png} top={10} left={50} bottom={120} right={250} angle={90}\r"],
            "Name": "CropImageExact",
            "Params": ["pathIn", "pathOut", "topPx", "leftPx", "bottomPx", "rightPx", "angle"],
            "ShortDescription": "Crop an image using the exact pixel coordinates to crop the image.",
            "Syntax": ["CropImageExact src={<pathIn>} out={<pathOut>} top={<topPx>} left={<leftPx>} bottom={<bottomPx>} right={<rightPx>}", "CropImageExact src={<pathIn>} out={<pathOut>} top={<topPx>} left={<leftPx>} bottom={<bottomPx>} right={<rightPx>} angle={<angle:0|90|180|270>)}"],
            "SyntaxDetail": [{
                "Instruction": "CropImageExact src={<pathIn>} out={<pathOut>} top={<topPx>} left={<leftPx>} bottom={<bottomPx>} right={<rightPx>}"
            }, {
                "Constants": [{
                    "Options": ["0", "90", "180", "270"],
                    "ParamName": "angle"
                }],
                "Instruction": "CropImageExact src={<pathIn>} out={<pathOut>} top={<topPx>} left={<leftPx>} bottom={<bottomPx>} right={<rightPx>} angle={<angle:0|90|180|270>)}"
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/Titanium/2022/CropImageExact_Recording.mp4"]
        }, {
            "CreationDate": "2019-Jul-04",
            "Description": "Click over the image <SelectImageName> and without releasing the button drag and drop it over the image <DropImageName>",
            "Example": ["Titanium DragAndDrop select Image.PNG and drop in Image2.PNG Timeout= 20000\r", "Titanium DragAndDrop select Image.PNG and drop in Image2.PNG Timeout= 20000 Sim= 0.7\r"],
            "Name": "DragAndDrop",
            "Params": ["SelectImageName", "DropImageName", "Time", "Sim"],
            "ShortDescription": "Click over an image and drag it to another image.",
            "Syntax": ["DragAndDrop select <SelectImageName> and drop in <DropImageName> Timeout= <Time>", "DragAndDrop select <SelectImageName> adn drop in <DropImageName> Timeout= <Time> Sim= <Sim>"],
            "SyntaxDetail": [{
                "Instruction": "DragAndDrop select <SelectImageName> and drop in <DropImageName> Timeout= <Time>"
            }, {
                "Instruction": "DragAndDrop select <SelectImageName> adn drop in <DropImageName> Timeout= <Time> Sim= <Sim>"
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/Titanium/2022/DragAndDrop_Recording.mp4"]
        }, {
            "CreationDate": "2019-Apr-17",
            "Description": "Method to extract with OCR the text presented in a .png or .jpg image. Images must be at least 50 pixels in width and height. Version=read option will use an improved OCR algorithm.",
            "Example": ["Titanium GetLines C:\\Users\\user\\Pictures\\TestImage.png and save as ListResultVar\r", "Titanium GetLines C:\\Users\\user\\Pictures\\TestImage.png and save as ListResultVar version=read\r"],
            "Name": "GetLines",
            "Params": ["ImagePath", "ResultListName"],
            "ShortDescription": "Extract text from an image (FRIDA CLOUD).",
            "Syntax": ["GetLines <ImagePath> and save as <ResultListName>", "GetLines <ImagePath> and save as <ResultListName> version=read"],
            "SyntaxDetail": [{
                "Instruction": "GetLines <ImagePath> and save as <ResultListName>"
            }, {
                "Instruction": "GetLines <ImagePath> and save as <ResultListName> version=read"
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/Titanium/2022/GetLines_Recording.mp4"]
        }, {
            "CreationDate": "2018-Jun-13",
            "Description": " Method to know by OCR if a phrases exist on the active screen containing the words in <searchString>.It generate a list<string> in vars",
            "Example": ["GetLinesWithSubstring \"Error Message\" MatchCase= false and save as errorList\r", "GetLinesWithSubstring from \"C:\\Users\\innovation\\Desktop\\Document.png\" with \"Error\" MatchCase= false and save as errorList\r"],
            "Name": "GetLinesWithSubstring",
            "Params": ["searchString", "MatchCase", "varID"],
            "ShortDescription": " Search for phrases with OCR and save it in a list.",
            "Syntax": ["GetLinesWithSubstring \"<searchString>\" MatchCase= <MatchCase> and save as <VarName>", "GetLinesWithSubstring from \"<ImagePath>\" with \"<searchString>\" MatchCase= <MatchCase> and save as <VarName>"],
            "SyntaxDetail": [{
                "Instruction": "GetLinesWithSubstring \"<searchString>\" MatchCase= <MatchCase> and save as <VarName>"
            }, {
                "Instruction": "GetLinesWithSubstring from \"<ImagePath>\" with \"<searchString>\" MatchCase= <MatchCase> and save as <VarName>"
            }]
        }, {
            "CreationDate": "2018-Jun-13",
            "Description": "Search for an specific period of time if an image appear or can be found on the screen.",
            "Example": ["Titanium ImageAppears Image.PNG Timeout= 30000\r", "Titanium ImageAppears Image.PNG Timeout= 30000 Sim= 0.8\r", "Titanium ImageAppears MenuOpen.PNG Timeout= 15000 Sim= 0.85 and save result as Success\r", "Titanium ImageAppears MenuOpen.PNG Timeout= 15000 Sim= 0.85 and save result as \"Success\"\r"],
            "Name": "ImageAppears",
            "Params": ["ImageName", "Time", "Similarity"],
            "ShortDescription": "Search for an image when it appears on the screen.",
            "Syntax": ["ImageAppears <ImageName> Timeout= <Time>", "ImageAppears <ImageName> Timeout= <Time> Sim= <Similarity>", "ImageAppears <ImageName> Timeout= <Time> Sim= <Similarity> and save result as <varName>", "ImageAppears <ImageName> Timeout= <Time> Sim= <Similarity> and save result as \"<varName>\""],
            "SyntaxDetail": [{
                "Instruction": "ImageAppears <ImageName> Timeout= <Time>"
            }, {
                "Instruction": "ImageAppears <ImageName> Timeout= <Time> Sim= <Similarity>"
            }, {
                "Instruction": "ImageAppears <ImageName> Timeout= <Time> Sim= <Similarity> and save result as <varName>"
            }, {
                "Instruction": "ImageAppears <ImageName> Timeout= <Time> Sim= <Similarity> and save result as \"<varName>\""
            }]
        }, {
            "CreationDate": "2018-Jun-13",
            "Description": " Search for a specific period of time if an image appear or can be found on the screen, it generated an error if the image is found.",
            "Example": ["Titanium ImageAppearsError Image.PNG Timeout= 3000\r", "Titanium ImageAppearsError Image.PNG Timeout= 3000 Sim= 0.9\r"],
            "Name": "ImageAppearsError",
            "Params": ["ImageName", "Time", "Similarity"],
            "ShortDescription": " Expect for an image to not show, if it shows an error is generated.",
            "Syntax": ["ImageAppearsError <ImageName> Timeout= <Time>", "ImageAppearsError <ImageName> Timeout= <Time> Sim= <Similarity>"],
            "SyntaxDetail": [{
                "Instruction": "ImageAppearsError <ImageName> Timeout= <Time>"
            }, {
                "Instruction": "ImageAppearsError <ImageName> Timeout= <Time> Sim= <Similarity>"
            }]
        }, {
            "CreationDate": "2018-Jun-13",
            "Description": "Method to know by OCR if a word or phrase exists on the active screen or in a specific image.",
            "Example": ["Titanium LineExists \"ThisWord\" MatchCase= true\r", "Titanium LineExists from \"C:\\Users\\user\\Desktop\\Document.png\" with \"This Word\" MatchCase= true\r"],
            "Name": "LineExists",
            "Params": ["SearchString", "MatchCase"],
            "ShortDescription": "Search with OCR if a word or phrase exists.",
            "Syntax": ["LineExists \"<SearchString>\" MatchCase= <MatchCase>", "LineExists from \"<ImagePath>\" with \"<searchString>\" MatchCase= <MatchCase>"],
            "SyntaxDetail": [{
                "Instruction": "LineExists \"<SearchString>\" MatchCase= <MatchCase>"
            }, {
                "Instruction": "LineExists from \"<ImagePath>\" with \"<searchString>\" MatchCase= <MatchCase>"
            }]
        }, {
            "CreationDate": "2019-Dec-10",
            "Description": "Move the mouse to the desired coordinates (x,y).",
            "Example": ["MoveMouse -x 414 -y 456\r"],
            "Name": "MoveMouse",
            "Params": ["xCoord", "yCoord", "nClicks"],
            "ShortDescription": "Move the mouse to the (x,y) coordinates.",
            "Syntax": ["MoveMouse -x <xCoord> -y <yCoord>"],
            "SyntaxDetail": [{
                "Instruction": "MoveMouse -x <xCoord> -y <yCoord>"
            }]
        }, {
            "CreationDate": "2020-Nov-24",
            "Description": "Method to extract with OCR the text presented in a .png or .jpg image. If no file parameter is given, we will capture a screenshot.",
            "Example": ["Titanium OCR_GetLines and save as {lines}\r", "Titanium OCR_GetLines file={C:\\Users\\gilberto.isida\\Pictures\\OCReceipt.png} and save as {lines}\r"],
            "Name": "OCR_GetLines",
            "Params": ["varName", "filePath"],
            "ShortDescription": "Extract text from an image (local computer).",
            "Syntax": ["OCR_GetLines and save as \"<varName>\"", "OCR_GetLines and save as {<varName>}", "OCR_GetLines file=\"<filePath>\" and save as \"<varName>\"", "OCR_GetLines file={<filePath>} and save as {<varName>}"],
            "SyntaxDetail": [{
                "Instruction": "OCR_GetLines and save as \"<varName>\""
            }, {
                "Instruction": "OCR_GetLines and save as {<varName>}"
            }, {
                "Instruction": "OCR_GetLines file=\"<filePath>\" and save as \"<varName>\""
            }, {
                "Instruction": "OCR_GetLines file={<filePath>} and save as {<varName>}"
            }]
        }, {
            "CreationDate": "2021-May-10",
            "Description": "This function will process an image and search for the location of a QRCode, then it will read it and get its content. An error will be thrown if no QRCode is detected.",
            "Example": ["ReadQRCode img={C:\\Users\\gilberto.isida\\Pictures\\someQRcode.png} result={content}\r"],
            "Name": "ReadQRCode",
            "Params": ["imagePath", "varName"],
            "ShortDescription": "Searches a QRCode in an image and gets its content.",
            "Syntax": ["ReadQRCode img={<imagePath>} result={<varName>}"],
            "SyntaxDetail": [{
                "Instruction": "ReadQRCode img={<imagePath>} result={<varName>}"
            }]
        }, {
            "CreationDate": "2019-Sep-13",
            "Description": "Fix the resolution.",
            "Example": ["ResolutionFix \"<SolutionKey>\"\r"],
            "Name": "ResolutionFix",
            "Params": ["SolutionKey"],
            "ShortDescription": "Fix the resolution.",
            "Syntax": ["ResolutionFix \"<SolutionKey>\""],
            "SyntaxDetail": [{
                "Instruction": "ResolutionFix \"<SolutionKey>\""
            }]
        }, {
            "CreationDate": "2018-Jun-13",
            "Description": "Crop a certain area contained in the space between the two images , being the top left corner the first image and the bottom right corner the second. It save the image in the path where the application it's installed + \"\\screenshotses.png , and also add it to the clipboard.",
            "Example": ["Titanium ScreenSnipping Corner1.PNG , Corner2.PNG Timeout= 20000\r", "Titanium ScreenSnipping Corner1.PNG , Corner2.PNG Timeout= 20000 Sim= 0.7\r"],
            "Name": "ScreenSnipping",
            "Params": ["ImageNameCornerOne", "ImageNameCornerTwo", "Time", "Sim"],
            "ShortDescription": "Crop an area contained in the space between two images.",
            "Syntax": ["ScreenSnipping <ImageNameCornerOne> , <ImageNameCornerTwo> Timeout= <Time>", "ScreenSnipping <ImageNameCornerOne> , <ImageNameCornerTwo> Timeout= <Time> Sim= <Sim>"],
            "SyntaxDetail": [{
                "Instruction": "ScreenSnipping <ImageNameCornerOne> , <ImageNameCornerTwo> Timeout= <Time>"
            }, {
                "Instruction": "ScreenSnipping <ImageNameCornerOne> , <ImageNameCornerTwo> Timeout= <Time> Sim= <Sim>"
            }]
        }, {
            "CreationDate": "2019-Dec-10",
            "Description": "Simulate a MouseWheel event, to scroll up or down.",
            "Example": ["Scroll 5 up\r", "Scroll 10 down\r"],
            "Name": "Scroll",
            "Params": ["ImgToBeSolve", "Solution"],
            "ShortDescription": "Simulate a MouseWheel scroll.",
            "Syntax": ["Scroll <times> <direction>"],
            "SyntaxDetail": [{
                "Instruction": "Scroll <times> <direction>"
            }]
        }, {
            "CreationDate": "2018-Jun-13",
            "Description": "Method to generate a pause delimited in Milliseconds.",
            "Example": ["Titanium Sleep 1000\r", "Titanium Sleep = 1000\r"],
            "Name": "Sleep",
            "Params": ["Time"],
            "ShortDescription": "Make a pause in the process.",
            "Syntax": ["Sleep <Time>", "Sleep = <Time>"],
            "SyntaxDetail": [{
                "Instruction": "Sleep <Time>"
            }, {
                "Instruction": "Sleep = <Time>"
            }]
        }, {
            "CreationDate": "2018-Dec-11",
            "Description": "This function can solve a captcha by using a FRIDA web service. Taking an image as an input, and returning the captcha's text. It needs internet connection in order to work, it will not succeed if it is being run as Turing Offline.",
            "Example": ["Titanium SolveCAPTCHA C:\\Users\\user\\Pictures\\CaptchaImage.png and save as VariableName\r", "Titanium SolveCAPTCHA C:\\Users\\faustino.villarreal\\Pictures\\CaptchaImage.jpg and save as VariableName\r"],
            "ExtraDocs": "https://innotekfilestore.file.core.windows.net/frida-docs/Readers/Titanium/Articles/SolveCAPTCHA.pdf",
            "Name": "SolveCAPTCHA",
            "Params": ["ImagePathToBeSolved", "VariableName"],
            "ShortDescription": "Solve a captcha in an image.",
            "Syntax": ["SolveCAPTCHA <ImagePathToBeSolved> and save as <VariableName>"],
            "SyntaxDetail": [{
                "Instruction": "SolveCAPTCHA <ImagePathToBeSolved> and save as <VariableName>"
            }]
        }, {
            "CreationDate": "2018-Jun-13",
            "Description": "Type a text or special keys as written with the keyboard's SendKeys. Reference for the syntax of sendkeys in https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.sendkeys?redirectedfrom=MSDN&view=net-5.0",
            "Example": ["Titanium Type Text goes here \r", "Titanium Type Text goes here BloqMayus= True\r"],
            "ExtraDocs": "https://innotekfilestore.file.core.windows.net/frida-docs/Readers/Titanium/Articles/Type.pdf",
            "Name": "Type",
            "Params": ["Text", "Bool"],
            "ShortDescription": "Type a text as written with the keyboard.",
            "Syntax": ["Type <Text>", "Type <Text> BloqMayus= <Bool>"],
            "SyntaxDetail": [{
                "Instruction": "Type <Text>"
            }, {
                "Instruction": "Type <Text> BloqMayus= <Bool>"
            }]
        }, {
            "CreationDate": "2019-Aug-23",
            "Description": "Text to be written using the Clipboard as an auxiliary. The specified text is loaded to the clipboard and then Titanium.",
            "Example": ["Titanium TypeBlock Text goes here\r"],
            "Name": "TypeBlock",
            "Params": ["Text"],
            "ShortDescription": "Text to be written using the Clipboard as an auxiliary.",
            "Syntax": ["TypeBlock <Text>"],
            "SyntaxDetail": [{
                "Instruction": "TypeBlock <Text>"
            }]
        }, {
            "CreationDate": "2018-Jun-13",
            "Description": "Text to be written with SimulateInput.",
            "Example": ["Titanium TypeVirtual Text Goes Here\r"],
            "Name": "TypeVirtual",
            "Params": ["Text"],
            "ShortDescription": "Text to be written with SimulateInput.",
            "Syntax": ["TypeVirtual <Text>"],
            "SyntaxDetail": [{
                "Instruction": "TypeVirtual <Text>"
            }]
        }],
        "ID": 1,
        "Keyword": "Titanium",
        "Name": "Titanium Reader",
        "_FAdminKey": "Titanium"
    },
    "2": {
        "Description": "This is magic",
        "Function": [{
            "Description": "The action of navigating to a web page",
            "Example": ["Navigate to www.google.com", "Navigate to https://help.softtek.com/sm/detail.do", "navigate to https://google.com"],
            "Name": "Navigate",
            "Syntax": ["Navigate to <WebPage>"]
        }, {
            "Description": "The action of mouse clicking a web element",
            "Example": ["Click on Tecnolog\u00eda", "Click in tecnologia", "Click the UserName", "Click the uSeRnAmE", "Click on the Subject", "Click in the sUbJeCt", "Click Login"],
            "Name": "Click",
            "Syntax": ["The action Click + the preposition + the element to click", "Available prepositions: in, on, in, the, in the and on the", "The element's identifier can be either identical or similar case insensitive", "Available attributes: id, name, placeholder, title, value, label, innerHTML and aria-label"]
        }, {
            "Description": "To type a given value, sentence, characters and/or numbers inside a field. In case instruction does not contain the identifier for the field. The text or value will be typed into the first field in the web page.",
            "Example": ["Type name in username", "Type $3ink in password", "Type user", "Type password", "Type random number [8110000000-8119999999] in cell phone", "Type random number in pages", "Type random number [5 digits] in Postal Code"],
            "Name": "Type",
            "Syntax": ["The Type action + the text or value to type into the field + the preposition + the reference to the element in which to type into", "Available prepositions: in, on, to", "The Type action + the text or value to type into the field", " The type action + type of entry: random number + [lower limit-major limit] + preposition + the reference to the element in which to type into", "The type action + input type: random number + [number of digits] + preposition + field"]
        }, {
            "Description": "Action of selecting an element from a group or list of elements. This action works for selecting options on radio buttons, checkboxes and select type elements.",
            "Example": ["Select Client BSDG in Client Types", "Select Female in Sex"],
            "Name": "Select",
            "Syntax": ["The Select action + the option to select + the preposition + the element to select from", "Available prepositions: in, on, to"]
        }, {
            "Description": "Extract the text you want to obtain and save it as a variable to use elsewhere in the script. In the case of contains, the extracted text will be the first ocurrence of the text that contains given identifier. It is preferable to write as much text as possible in order to obtain the desired text to extract.",
            "Example": ["Extract user and save as username", "Extract contains report number 54674 and save as report"],
            "Name": "Extract",
            "Syntax": ["The Extract action + the text to extract + and save as + name of the variable", "The Extract action contains + part of the text to extract + and save as + the name of the variable"]
        }, {
            "Description": "Paste the text or value stored in a variable inside a field. The value or text to be pasted as well as the variable name, were obtained from a previously extraction instruction. The instruction must contain a reference to the element to paste into. If a reference to the element is not found, then the value or text will be pasted into the first field on the webpage.",
            "Example": ["paste user to username", "paste user in username", "Paste user on username"],
            "Name": "Paste",
            "Syntax": ["The Paste action + the variable name + the preposition + the reference of the element to paste into"]
        }, {
            "Description": "To clear a field of it's value.",
            "Example": ["Clear username", "Clear Date"],
            "Name": "Clear",
            "Syntax": ["The Clear action + the reference of the field to clear"]
        }, {
            "Description": "Takes a screenshot of the web site. (Pending to define)",
            "Example": ["ScreenShot"],
            "Name": "ScreenShot",
            "Syntax": ["The ScreenShot action"]
        }, {
            "Description": "Waits for a given time. This action can be useful if the website has very high load or reaction times",
            "Example": ["Wait 3000"],
            "Name": "Wait",
            "Syntax": ["The Wait action + the given time in miliseconds"]
        }, {
            "Description": "Accept or cancel an alert or dialog box that appears as a pop up",
            "Example": ["Dialog Accept", "Dialog Cancel"],
            "Name": "Dialog",
            "Syntax": ["The Dialog action + the action to take on the pop up dialog"]
        }, {
            "Description": "The keyboard action of pressing enter",
            "Example": ["Enter"],
            "Name": "Enter",
            "Syntax": ["The Enter action by itself"]
        }, {
            "Description": "The action of going back to the previous page",
            "Example": ["Back"],
            "Name": "Back",
            "Syntax": ["The Back action by itself"]
        }, {
            "Description": "The keyboard action making a tab",
            "Example": ["Tab"],
            "Name": "Tab",
            "Syntax": ["Tab"]
        }, {
            "Description": "Simulates the action of hovering an element by placing the cursor over it. By using the 'with reaction' instruction, we can validate if an event was triggered after hovering the element.",
            "Example": ["Hover on Company Name without reaction", "Hover on Logo with reaction"],
            "Name": "Hover",
            "Syntax": ["The Hover action + the preposition 'on' or 'in' + the element on which to apply the action + without reaction", "The Hover action + the preposition 'on' or 'in' + the element on which to apply the action + with reaction"]
        }, {
            "Description": "Uses key actions. In the case the instruction doesn't contain the element in which to apply the action, the action will be applied on the current active element. At the end of the instruction we can specify the number of times we want this action to be produced. The now available key actions are, Down, Up, Right and Left for arrow movement, Tab, Escape, Backspace and Space",
            "Example": ["Key Down", "Key Down in Look In", "Key Down in Look in 3 times", "Key Esc"],
            "Name": "Key",
            "Syntax": ["The Key action + the desired key to use", "The Key action + the desired key to use + the preposition 'in' or 'on' + the element in which to apply the action", "The Key action + the desired key to use + the preposition 'in' or 'on' + the element in which to apply the action + the number of times to produce the action + times", "The Key action + the desired key to use + the number of times to produce this action + times"]
        }, {
            "Description": "The action of closing the browser, explicitly closes the instance of the driver in use. ",
            "Example": ["Close browser"],
            "Name": "Close",
            "Syntax": ["Close action + application"]
        }, {
            "Description": "The action of holding the navigator keeps the driver active when the process is finished.",
            "Example": ["Hold browser"],
            "Name": "Hold",
            "Syntax": ["Hold action + application"]
        }, {
            "Description": "The switch action allows you to navigate between the active browser tabs.",
            "Example": ["Switch window 2", "Switch tab 3", "Switch window Inicio", "Switch tab Production"],
            "Name": "Switch",
            "Syntax": ["Switch action + browser element + name", "Switch action + browser element +  identifier number"]
        }],
        "ID": 2,
        "Keyword": "##deprecated",
        "Name": "MagicSelenium",
        "_FAdminKey": "Magic"
    },
    "3": {
        "Description": "With SAP Reader you will be able to automate your SAP Logon\u2019s activities such as capturing multiple data or getting it form your sap transactions, making it easier for you to replicate your business process. Powered by Sapscripting, SAP Reader will help you connect without access to the backend source code, performing the same actions you would do as a user. Try out our recorder and see how easy and fast is to start automating your SAP daily tasks.",
        "Function": [{
            "Description": "Changes the session to a differente one triggered by a button, menu or another event in a different session.\r",
            "Example": ["ChangeSession SessionId /app/con[0]/ses[0]\r"],
            "Name": "ChangeSession\r",
            "Params": ["SessionId"],
            "ShortDescription": "Changes the working session by Id.\r",
            "Syntax": ["ChangeSession SessionId <SessionId>\r"]
        }, {
            "Description": "Clicks a button based on the type and identifier.\r",
            "Example": ["ClickButton id btn[0]\r", "ClickButton te Continue\r", "ClickButton tt \"Continue   (f8)\"\r"],
            "Name": "ClickButton\r",
            "Params": ["Type", "Identifier"],
            "ShortDescription": "Click a button.\r",
            "Syntax": ["ClickButton <Type> <Identifier>\r"]
        }, {
            "Description": "Clicks a button inside a grid cell selecting by row and column of a Grid.\r",
            "Example": ["ClickGridButton GridId /app/con[0]/ses[0]/wnd[0]/usr/cntlGO_CONT_D0100/shellcont/shell RowN 0 Column \"CHECK\"\r", "ClickGridButton GridId /app/con[0]/ses[0]/wnd[0]/usr/cntlGO_CONT_D0100/shellcont/shell RowN 0 Column \"CHECK\"\r"],
            "Name": "ClickGridButton\r",
            "Params": ["GridId", "Row", "ColumnName", "Value"],
            "ShortDescription": "Click a button inside a grid cell.\r",
            "Syntax": ["ClickGridButton GridId <GridId> RowN <Row>\r", "ClickGridButton GridId <GridId> RowN <Row> Column \"<ColumnName>\"\r"]
        }, {
            "Description": "Click toolbutton of Grid.\r",
            "Example": ["ClickGridToolBtn GridId wnd[0]/usr/cntlALV/shellcont/shell ButtonId Btn[1]\r"],
            "Name": "ClickGridToolBtn\r",
            "Params": ["GridId", "ButtonId"],
            "ShortDescription": "Click the toolbutton of a Grid.\r",
            "Syntax": ["ClickGridToolBtn GridId <GridId> ButtonId <ButtonId>\r"]
        }, {
            "Description": "Click selected cell of a grid by Id.\r",
            "Example": ["ClickSelectedCell GridId wnd[0]/usr/cntlALV/shellcont/shell\r"],
            "Name": "ClickSelectedCell\r",
            "Params": ["GridId"],
            "ShortDescription": "Click a selected cell.\r",
            "Syntax": ["ClickSelectedCell GridId <GridId>\r"]
        }, {
            "Description": "Clicks a given button from a toolbar control.\r",
            "Example": ["ClickToolBarButton ToolBarId ToolBarId[1] ButtonId \"SAVE_AS\"\r"],
            "Name": "ClickToolBarButton\r",
            "Params": ["ToolBarId", "ButtonId"],
            "ShortDescription": "Click a given button from a toolbar.\r",
            "Syntax": ["ClickToolBarButton ToolBarId <ToolBarId> ButtonId <ButtonId>\r"]
        }, {
            "Description": "Clicks a link on a Treeviw of SAP.\r",
            "Example": ["ClickTreeLink TreeId \"wnd[0]/usr/cntlTREE_CONTROL_CONTAINER/shellcont/shell\" Node \"02*1*2\" Item \"1\"\r", "ClickTreeLink TreeId \"wnd[0]/usr/cntlTREE_CONTROL_CONTAINER/shellcont/shell\" Node \"*****2\" Item \"1\"\r"],
            "Name": "ClickTreeLink\r",
            "Params": ["TreeId", "Node"],
            "ShortDescription": "Click a link on a Treeview of SAP.\r",
            "Syntax": ["ClickTreeLink TreeId <TreeId> Node \"<NodeKey>\" Item \"<ItemName>\"\r"]
        }, {
            "Description": "Closes a SAP instance.\r",
            "Example": ["CloseSap\r"],
            "Name": "CloseSap\r",
            "ShortDescription": "Closes a SAP instance.\r",
            "Syntax": ["CloseSap\r"]
        }, {
            "Description": "Closes the current transaction.\r",
            "Example": ["CloseTrans\r"],
            "Name": "CloseTrans\r",
            "ShortDescription": "Close the current transaction.\r",
            "Syntax": ["CloseTrans\r"]
        }, {
            "Description": "Clicks an element when a window appears, repeating the action until it appears the number of times stated.\r",
            "Example": ["ConditionalClick if window \"Window[0]\" click on Button \\\"Button[2]\" repeat 5\r"],
            "Name": "ConditionalClick\r",
            "Params": ["Window", "ButtonId", "RepeatTime"],
            "ShortDescription": "Click an element when a window appears, repeating the action until it appears the number of times stated.\r",
            "Syntax": ["ConditionalClick if window \"<Window>\" click on Button \\\"<ButtonId>\" repeat <RepeatTime>\r"]
        }, {
            "Description": "Clicks an element when a SAP window appears, repeating the action until it appears the number of times stated.\r",
            "Example": ["ConditionalClickSAP if window \"Window[0]\" click on Button \\\"Button[2]\" repeat 5\r"],
            "Name": "ConditionalClickSAP\r",
            "Params": ["Window", "ButtonId", "RepeatTime"],
            "ShortDescription": "Click an element when a SAP window appears, repeating the action until it appears the number of times stated.\r",
            "Syntax": ["ConditionalClickSAP if window \"<Window>\" click on Button \\\"<ButtonId>\" repeat <RepeatTime>\r"]
        }, {
            "Description": "Copy multiple Grid cells to Clipboard or a given variable. It can take rows from begin an end (1-7) or copy a list of specific rows (1,5,7)\r",
            "Example": ["CopyGridCells GridId GridId[1] Rows \"1-7\" Column NAME\r", "CopyGridCells GridId GridId[1] Rows \"1, 5, 7\" Column NAME\r", "CopyGridCells GridId GridId[1] Rows \"1-7\" Column NAME as List\r", "CopyGridCells GridId GridId[1] Rows \"1, 5, 7\" Column NAME as List\r"],
            "Name": "CopyGridCells\r",
            "Params": ["GridId", "RowsRange", "Column", "VarName"],
            "ShortDescription": "Copy multiple Grid cells to Clipboard.\r",
            "Syntax": ["CopyGridCells GridId <GridId> Rows \"<RowsRange>\" Column <Column>\r", "CopyGridCells GridId <GridId> Rows \"<RowsRange>\" Column <Column> as <VarName>\r"]
        }, {
            "Description": "Copy multiple Grid cells and saves the result as a list of strings. It can take rows from begin an end (1-7) or copy a list of specific rows (1,5,7).\r",
            "Example": ["CopyGridCellsToList GridId GridId[1] Rows \"1-7\" Column NAME As ListResults\r"],
            "Name": "CopyGridCellsToList\r",
            "Params": ["GridId", "RowsRange", "Column", "ListName"],
            "ShortDescription": "Copy multiple Grid cells to a given variable.\r",
            "Syntax": ["CopyGridCellsToList GridId <GridId> Rows \"<RowsRange>\" Column <Column> as <ListName>\r"]
        }, {
            "Description": "Copy multiple list cells to the Clipboard. It can take rows from begin an end (1-7) or copy a list of specific rows (1,5,7)\r",
            "Example": ["CopyListValues Rows \"16-20\" Column \"Nombre\"\r"],
            "Name": "CopyListValues\r",
            "Params": ["Rows", "ColummName"],
            "ShortDescription": "Copy multiple list cells to the Clipboard.\r",
            "Syntax": ["CopyListValues Rows \"<Rows>\" Column \"<ColummName>\"\r"]
        }, {
            "Description": "Deselects a CheckBox looking control by Id or text of control.\r",
            "Example": ["DeselectCheckBox id chkbox[1]\r", "DeselectCheckBox te \"unchek this box.\" \r"],
            "Name": "DeselectCheckBox\r",
            "Params": ["Type", "Identifyer"],
            "ShortDescription": "Deselect a CheckBox.\r",
            "Syntax": ["DeselectCheckBox <Type> <Identifyer>\r"]
        }, {
            "Description": "Performs double click on an element looking for it's Id.\r",
            "Example": ["DoubleClick ElementId wnd[0]/sbar\r"],
            "Name": "DoubleClick\r",
            "Params": ["ElementId"],
            "ShortDescription": "Perform a double click on an element.\r",
            "Syntax": ["DoubleClick ElementId <ElementId>\r"]
        }, {
            "Description": "Performs a double click a node from the tree control.\r",
            "Example": ["DoubleClickTreeLink TreeId wnd[0]/usr/cntlTREE_CONTROL_CONTAINER/shellcont/shell Node \"02*1*2\"\r", "DoubleClickTreeLink TreeId wnd[0]/usr/cntlTREE_CONTROL_CONTAINER/shellcont/shell Node \"*****2\"\r"],
            "Name": "DoubleClickTreeLink\r",
            "Params": ["TreeId", "Node"],
            "ShortDescription": "Perform a double click to a node from the tree control.\r",
            "Syntax": ["DoubleClickTreeLink TreeId .+? Node \".+?\"\r"]
        }, {
            "Description": "Sets the focus to a specific element found by Id.\r",
            "Example": ["ElementFocus ElementId wnd[0]/tbar[1]/btn[8]\r"],
            "Name": "ElementFocus\r",
            "Params": ["ElementId"],
            "ShortDescription": "Set the focus to a specific element.\r",
            "Syntax": ["ElementFocus ElementId <ElementId>\r"]
        }, {
            "Description": "Expands tree node from SAP connection.\r",
            "Example": ["ExpandNode TreeId wnd[0]/usr/cntlTREE_CONTROL_CONTAINER/shellcont/shell Node \"02*1*2\"\r", "ExpandNode TreeId wnd[0]/usr/cntlTREE_CONTROL_CONTAINER/shellcont/shell Node \"*******2\"\r"],
            "Name": "ExpandNode\r",
            "Params": ["TreeId", "Node"],
            "ShortDescription": "Expand the tree node from SAP connection.\r",
            "Syntax": ["ExpandNode TreeId <TreeId> Node \"<Node>\"\r"]
        }, {
            "Description": "Find a text in the window and saves a variable with the element Id.\r",
            "Example": ["FindText \"Error\" as ElementId\r"],
            "Name": "FindText\r",
            "Params": ["text", "VarName"],
            "ShortDescription": "Find a text in the window.\r",
            "Syntax": ["FindText \"<text>\" as <VarName>\r"]
        }, {
            "Description": "Gets the number of rows in an array of controls like labels or text fields.\r",
            "Example": ["GetArrayRowNumber LabelId wnd[0]/usr/cntlALV/shellcont/lblId as Rows\r", "GetArrayRowNumber LabelId wnd[0]/usr/cntlALV/shellcont/lblId RowB 3 ColB 0 as Rows\r"],
            "Name": "GetArrayRowNumber\r",
            "Params": ["LabelId", "Variable", "RowBegin", "ColumnBegin"],
            "ShortDescription": "Get the number of rows in an array.\r",
            "Syntax": ["GetArrayRowNumber LabelId <LabelId> as <Variable>\r", "GetArrayRowNumber LabelId <LabelId> RowB <RowBegin> ColB <ColumnBegin> as <Variable>\r"]
        }, {
            "Description": "Gets the value of the given checkbox by Id.\r",
            "Example": ["GetCheckBoxValue CheckBoxId chkbox[1] as Var\r"],
            "Name": "GetCheckBoxValue\r",
            "Params": ["CheckBoxId", "Value"],
            "ShortDescription": "Gets the value of the given checkbox by Id.\r",
            "Syntax": ["GetCheckBoxValue CheckBoxId <CheckBoxId> as <Value>\r"]
        }, {
            "Description": "Gets the icon name from an elemet found by Id and saves a variable with the text.\r",
            "Example": ["GetElementIcoName ElementId as VarName\r"],
            "Name": "GetElementIcoName\r",
            "Params": ["ElementId", "VarName"],
            "ShortDescription": "Get the icon name from an elemet.\r",
            "Syntax": ["GetElementIcoName <ElementId> as <VarName>\r"]
        }, {
            "Description": "Shows information of a given element in a windows popup.\r",
            "Example": ["GetElementInfo Id \"<ElementId>\"\r"],
            "Name": "GetElementInfo\r",
            "Params": ["ElementId"],
            "ShortDescription": "Show information of a given element in a windows popup.\r",
            "Syntax": ["GetElementInfo Id \"IdElement[1]\"\r"]
        }, {
            "Description": "Gets the number of rows in a Grid by the GridId.\r",
            "Example": ["GetGridRowNumber GridId wnd[0]/usr/cntlALV/shellcont/shell as Rows\r"],
            "Name": "GetGridRowNumber\r",
            "Params": ["GridId", "Variable"],
            "ShortDescription": "Gets the number of rows in a Grid.\r",
            "Syntax": ["GetGridRowNumber GridId <GridId> as <Variable>\r"]
        }, {
            "Description": "Gets the title shown in a Grid and saves it in the given variable.\r",
            "Example": ["GetGridTitle GridId wnd[0]/usr/cntlALV/shellcont/shell as VarTitle\r"],
            "Name": "GetGridTitle\r",
            "Params": ["GridId", "Variable"],
            "ShortDescription": "Gets the title shown in a Grid.\r",
            "Syntax": ["GetGridTitle GridId <GridId> as <Variable>\r"]
        }, {
            "Description": "Sets the focus to a specific element found by Id.\r",
            "Example": ["GetHTMLViewerText HTMLViewerId wnd[0]/usr/cntlALV/shellcont/lblId output \"text\" as Output\r", "GetHTMLViewerText HTMLViewerId wnd[0]/usr/cntlALV/shellcont/lblId output \"html\" as Output\r", "IsElementEnabled ElementId wnd[0]/tbar[1]/btn[8] as VarEnabled\r"],
            "Name": "GetHTMLViewerText\r",
            "Params": ["HTMLViewerId", "OutputType", "Variable", "ElementId", "Variable"],
            "ShortDescription": "Set the focus to a specific element.\r",
            "Syntax": ["GetHTMLViewerText HTMLViewerId <HTMLViewerId> output <OutputType> as <Variable>\r", "IsElementEnabled ElementId <ElementId> as <Variable>\r"]
        }, {
            "Description": "Gets the maximun numer of scroll clicks of a table, list or user area and saves it in the given variable.\r",
            "Example": ["GetMaxVerticalScroll ElementId wnd[0]/usr/cntlALV/shellcont/shell as ScrollNum\r"],
            "Name": "GetMaxVerticalScroll\r",
            "Params": ["ElementId", "Position"],
            "ShortDescription": "Gets the maximun numer of scroll clicks of a table, list or user area and saves it in the given variable.\r",
            "Syntax": ["GetMaxVerticalScroll ElementId <ElementId> as <Variable>\r"]
        }, {
            "Description": "Gets the status information such as the message, message Id etc. The result is a list with the status info. 0 - StatusMessage; 1 - MessageId/MessageNumber; 2 - MessageType\r",
            "Example": ["GetStatusInfo as StatInfo\r"],
            "Name": "GetStatusInfo\r",
            "Params": ["VarName"],
            "ShortDescription": "Get the status information such as the message, message Id etc.\r",
            "Syntax": ["GetStatusInfo as <VarName>\r"]
        }, {
            "Description": "Gets the number of rows in an Table that can contains labels or another type of controls.\r",
            "Example": ["GetTableRowNumber TableId wnd[0]/usr/cntlALV/shellcont/lblId as Rows\r"],
            "Name": "GetTableRowNumber\r",
            "Params": ["TableId", "Variable"],
            "ShortDescription": "Get the number of rows in a table.\r",
            "Syntax": ["GetTableRowNumber TableId <TableId> as <Variable>\r"]
        }, {
            "Description": "Gets the text from an item of a Tree by tree id, item Key and name of column. Saves the result in a given variable.\r",
            "Example": ["GetTreeItemText TreeId[0] Key \"FAX\" Name \"Waiting\" as Value\r"],
            "Name": "GetTreeItemText\r",
            "Params": ["TreeId", "ItemKey", "ColName", "Variable"],
            "ShortDescription": "Get the text from an item of a Tree.\r",
            "Syntax": ["GetTreeItemText <TreeId> Key \"<ItemKey>\" Name \"<ColName>\" as <Variable>\r"]
        }, {
            "Description": "Gets the number of visible rows in a Grid by the GridId.\r",
            "Example": ["GetVisibleGridRowNumber GridId wnd[0]/usr/cntlALV/shellcont/shell as Rows\r"],
            "Name": "GetVisibleGridRowNumber\r",
            "Params": ["GridId", "Variable"],
            "ShortDescription": "Gets the number of visible rows in a Grid.\r",
            "Syntax": ["GetVisibleGridRowNumber GridId <GridId> as <Variable>\r"]
        }, {
            "Description": "Performs a double click on a cell of a grid by Id.\r",
            "Example": ["GridCellDoubleClick GridId wnd[0]/usr/cntlALV/shellcont/shell Row 1 Column HKONT\r"],
            "Name": "GridCellDoubleClick\r",
            "Params": ["GridId", "ColumnId", "RowNumber"],
            "ShortDescription": "Perform a double click on a cell of a grid.\r",
            "Syntax": ["GridCellDoubleClick GridId <GridId> Row <RowNumber> Column <ColumnId>\r"]
        }, {
            "Description": "Makes visible a row from the Grid looking for row number.\r",
            "Example": ["MakeGridRowVisible GridId wnd[0]/usr/cntlALV/shellcont/shell RowN 0\r"],
            "Name": "MakeGridRowVisible\r",
            "Params": ["GridId", "RowN"],
            "ShortDescription": "Make visible a row from the Grid.\r",
            "Syntax": ["MakeGridRowVisible GridId <GridId> RowN <RowN>\r"]
        }, {
            "Description": "Manages windows pop ups to save or find files. This is a listener beacuse SAP waits untile the popup is closed to continue it means that ManageWinCtl has to be placed before the instruction that triggers the pop up.\r",
            "Example": ["ManageWinCtl Window Confirm Save Script \"Send {ENTER}\"\r"],
            "Name": "ManageWinCtl\r",
            "Params": ["WindowTitle", "Script"],
            "ShortDescription": "Manages windows pop ups to save or find files.\r",
            "Syntax": ["ManageWinCtl Window <WindowTitle> Script \"<Script>\"\r"]
        }, {
            "Description": "Manages windows pop ups to save or find files. This is a listener beacuse SAP waits untile the popup is closed to continue it means that ManageWinCtl has to be placed before the instruction that triggers the pop up.\r",
            "Example": ["ManageWinCtl2 Window Confirm Save Script \"Send {ENTER}\"\r"],
            "Name": "ManageWinCtl2\r",
            "Params": ["WindowTitle", "Script"],
            "ShortDescription": "Manages windows pop ups to save or find files.\r",
            "Syntax": ["ManageWinCtl2 Window <WindowTitle> Script \"<Script>\"\r"]
        }, {
            "Description": "Clicks a given context button from a grid control.\r",
            "Example": ["ClickToolBarButton ToolBarId GridId[1] ButtonId \"SAVE_AS\"\r"],
            "Name": "PressGridContextButton\r",
            "Params": ["GridId", "ButtonId"],
            "Syntax": ["ClickToolBarButton GridId <GridId> ButtonId \"<ButtonId>\"\r"]
        }, {
            "Description": "Clicks a given context button from a toolbar control.\r",
            "Example": ["PressToolControlContextButton ToolControlId ToolCtlId[1] ButtonId \"CREATE_ATTA\"\r"],
            "Name": "PressToolControlContextButton\r",
            "Params": ["ToolCtlId", "ButtonId"],
            "Syntax": ["PressToolControlContextButton ToolControlId <ToolCtlId> ButtonId \"<ButtonId>\"\r"]
        }, {
            "Description": "Gets the text from an element found by Id and saves a variable with the text.\r",
            "Example": ["ReadElement ElementId as VarName\r", "ReadElement ElementId with format \"Take only .+?\" as VarName\r"],
            "Name": "ReadElement\r",
            "Params": ["ElementId", "VarName", "format"],
            "ShortDescription": "Get the text from an element.\r",
            "Syntax": ["ReadElement <ElementId> as <VarName>\r", "ReadElement <ElementId> with format \"<format>\" as <VarName>\r"]
        }, {
            "Description": "Gets the text from a cell in a grid found by GridId, column name and Row. Saves the result in a given variable.\r",
            "Example": ["ReadGridCell GRIDID[0] Column DOCNUM Row 10 as Value\r"],
            "Name": "ReadGridCell\r",
            "Params": ["GridId", "ColumnName", "RowNumber", "Variable"],
            "ShortDescription": "Get the text from a cell in a grid found.\r",
            "Syntax": ["ReadGridCell <GridId> Column <ColumnName> Row <RowNumber> as <Variable>\r"]
        }, {
            "Description": "Gets the status from the status bar and saves a variable with the message.\r",
            "Example": ["ReadStatus as StatusMessage\r", "ReadStatus  with format \"Get only this .+?\" as StatusMessage\r"],
            "Name": "ReadStatus\r",
            "Params": ["text", "VarName"],
            "ShortDescription": "Get the status from the status bar.\r",
            "Syntax": ["ReadStatus as <VarName>\r", "ReadStatus with format \"<format>\" as <VarName>\r"]
        }, {
            "Description": "Runs a SAP instance and opens a new SAP conneciton to desired server.\r",
            "Example": ["RunSapInstance \"CC DEV\" 010 <<SapUsr>> <<SAPPwd>> ES\r", "RunSapInstance \"CC DEV\" 010 <<SapUsr>> <<SAPPwd>> ES HideMessage\r", "RunSapInstance \"CC DEV\" 010 <<SapUsr>> <<SAPPwd>> ES graphic\r", "RunSapInstance \"CC DEV\" 010 <<SapUsr>> <<SAPPwd>> ES graphic HideMessage\r"],
            "Name": "RunSapInstance\r",
            "Params": ["SapServer", "Mand", "SapUser", "SapPassword", "Lang", "Instance", "Type", "HideMessage"],
            "Syntax": ["RunSapInstance \"<SapServer>\" <Mand> <SapUser> <SapPassword> <Lang>\r", "RunSapInstance \"<SapServer>\" <Mand> <SapUser> <SapPassword> <Lang> <Instance Type>\r", "RunSapInstance \"<SapServer>\" <Mand> <SapUser> <SapPassword> <Lang> <Instance Type> <HideMessage>\r"]
        }, {
            "Description": "Move the grid's scroll to make a desired column visible. Finds the grid and column by Id.\r",
            "Example": ["ScrollToCol id grid[1] \"VSTEL\"\r"],
            "Name": "ScrollToCol\r",
            "Params": ["Type", "Identifier", "ColumnId"],
            "ShortDescription": "Move the grid's scroll to make a desired column visible.\r",
            "Syntax": ["ScrollToCol <Type> <Identifier> <ColumnId>\r"]
        }, {
            "Description": "Selects all columns from a given Grid. Finds the grid by Id.\r",
            "Example": ["SelectAllGridCols id grid[1]\r"],
            "Name": "SelectAllGridCols\r",
            "Params": ["Type", "Identifier"],
            "ShortDescription": "Select all columns from a given Grid.\r",
            "Syntax": ["SelectAllGridCols <Type> <Identifier>\r"]
        }, {
            "Description": "Selects a CheckBox looking control by Id or text of control.\r",
            "Example": ["SelectCheckBox id chkbox[1]\r", "SelectCheckBox te \"Chek this box.\" \r"],
            "Name": "SelectCheckBox\r",
            "Params": ["Type", "Identifyer"],
            "ShortDescription": "Select a CheckBox.\r",
            "Syntax": ["SelectCheckBox <Type> <Identifyer>\r"]
        }, {
            "Description": "Selects a ComboBox option looking control by Id or text of control and selecting the desired item.\r",
            "Example": ["SelectComboBox id cmb[1] \"1\"\r", "SelectComboBox an \"Select combo.\" \"1\" 1\r"],
            "Name": "SelectComboBox\r",
            "Params": ["Type", "Identifyer", "Option", "Pos"],
            "ShortDescription": "Select a ComboBox.\r",
            "Syntax": ["SelectComboBox <Type> <Identifyer> <Option>\r", "SelectComboBox <Type> <Identifyer> <Option> <Pos>\r"]
        }, {
            "Description": "Selects a context menu of a given grid. Grid and Context menu are selected by Id.\r",
            "Example": ["SelectContextMenu id grid[1] &XXL\r"],
            "Name": "SelectContextMenu\r",
            "Params": ["Type", "Identifier", "ctxMenu"],
            "ShortDescription": "Selects a context menu of a given grid.\r",
            "Syntax": ["SelectContextMenu <Type> <Identifier> <ctxMenu>\r"]
        }, {
            "Description": "Selects a context menu of a given element. Element and Context menu are selected by Id.\r",
            "Example": ["SelectElementCM ElementId Element[1] CmId &XXL\r"],
            "Name": "SelectElementCM\r",
            "Params": ["ElementId", "CmId"],
            "ShortDescription": "Selects a context menu of a given element.\r",
            "Syntax": ["SelectElementCM ElementId <ElementId> CmId <CmId>\r"]
        }, {
            "Description": "Selects a cell from the Grid looking for row and column.\r",
            "Example": ["SelectGridCell GridId wnd[0]/usr/cntlALV/shellcont/shell Row 0 Column CHAIN\r"],
            "Name": "SelectGridCell\r",
            "Params": ["ElementId", "Row", "Column"],
            "ShortDescription": "Select a cell from the Grid.\r",
            "Syntax": ["SelectGridCell GridId <GridId> Row <Row> Column <Column>\r"]
        }, {
            "Description": "Selects a cell from the Grid looking for row and column and triggers SAP action.\r",
            "Example": ["SelectGridCellTrigger GridId wnd[0]/usr/cntlALV/shellcont/shell Row 0 Column CHAIN\r"],
            "Name": "SelectGridCellTrigger\r",
            "Params": ["ElementId", "Row", "Column"],
            "ShortDescription": "Select a cell from the Grid to trigger a SAP action.\r",
            "Syntax": ["SelectGridCellTrigger GridId <GridId> Row <Row> Column <Column>\r"]
        }, {
            "Description": "Selects CheckBox control in a given row and column of a Grid.\r",
            "Example": ["SelectGridChk GridId /app/con[0]/ses[0]/wnd[0]/usr/cntlGO_CONT_D0100/shellcont/shell RowN 0 Column \"CHECK\" Value false\r"],
            "Name": "SelectGridChk\r",
            "Params": ["GridId", "Row", "ColumnName", "Value"],
            "ShortDescription": "Select a CheckBox in a Grid.\r",
            "Syntax": ["SelectGridChk GridId <GridId> RowN <Row> Column <\"ColumnName\"> Value <Value>\r"]
        }, {
            "Description": "Selects CheckBox control in a given row and column of a Grid and triggers SAP action linked to the selection event.\r",
            "Example": ["SelectGridChkTrigger GridId wnd[0]/usr/cntlGO_CONT_D0100/shellcont/shell RowN 0 Column \"CHECK\" Value false\r"],
            "Name": "SelectGridChkTrigger\r",
            "Params": ["GridId", "Row", "ColumnName", "Value"],
            "ShortDescription": "Select a CheckBox to trigger a SAP action linked.\r",
            "Syntax": ["SelectGridChkTrigger GridId <GridId> RowN <Row> Column <\"ColumnName\"> Value <Value>\r"]
        }, {
            "Description": "Selects a Grid column looking control by Id of control and selects the given column by Id.\r",
            "Example": ["SelectGridCol id grid[1] \"NAME1\"\r"],
            "Name": "SelectGridCol\r",
            "Params": ["Type", "Identifier", "ColumnId"],
            "ShortDescription": "Select a Grid column.\r",
            "Syntax": ["SelectGridCol <Type> <Identifier> <ColumnId>\r"]
        }, {
            "Description": "Selects a label text of a text grid.\r",
            "Example": ["SelectGridLabel id TitleLabelId(1)\r", "SelectGridLabel te \"Title label 1\"\r"],
            "Name": "SelectGridLabel\r",
            "Params": ["Type", "Identifier"],
            "ShortDescription": "Select a label text of a text grid.\r",
            "Syntax": ["SelectGridLabel <Type> <Identifier>\r"]
        }, {
            "Description": "Selects entire row from the Grid looking for row number.\r",
            "Example": ["SelectGridRow GridId wnd[0]/usr/cntlALV/shellcont/shell RowN 0\r", "SelectGridRow GridId wnd[0]/usr/cntlALV/shellcont/shell RowN 0,2,8,10\r", "SelectGridRow GridId wnd[0]/usr/cntlALV/shellcont/shell RowN 0-10\r"],
            "Name": "SelectGridRow\r",
            "Params": ["GridId", "RowN"],
            "ShortDescription": "Select the entire row from the Grid.\r",
            "Syntax": ["SelectGridRow GridId <GridId> RowN <RowN>\r"]
        }, {
            "Description": "Selects a list view item.\r",
            "Example": ["SelectListItem id ListItemId[1]\r", "SelectListItem te \"Item 1\"\r"],
            "Name": "SelectListItem\r",
            "Params": ["Type", "Identifier"],
            "ShortDescription": "Select a list view item.\r",
            "Syntax": ["SelectListItem <Type> <Identifier>\r"]
        }, {
            "Description": "Selects a menu option from a SAP menu.\r",
            "Example": ["SelectMenu id menu[1,1]\r", "SelectMenu te \"Export to excel\"\r", "SelectMenu tt \"Excel (Alt+f8)\"\r"],
            "Name": "SelectMenu\r",
            "Params": ["Type", "Identifier"],
            "ShortDescription": "Select a menu option from a SAP menu.\r",
            "Syntax": ["SelectMenu <Type> <Identifier>\r"]
        }, {
            "Description": "Selects a RadioButton looking control by Id or text of control.\r",
            "Example": ["SelectRb id radiobt[1]\r", "SelectRb te \"Option 1.\"\r"],
            "Name": "SelectRb\r",
            "Params": ["Type", "Identifyer"],
            "ShortDescription": "Select a RadioButton.\r",
            "Syntax": ["SelectRb <Type> <Identifyer>\r"]
        }, {
            "Description": "Selects an element from a Shell a listview of menu for example.\r",
            "Example": ["SelectShellItem Id wnd[0]/usr/cntlALV/shellcont/shell Row 12\r"],
            "Name": "SelectShellItem\r",
            "Params": ["shellId", "Row"],
            "ShortDescription": "Select an element from a Shell.\r",
            "Syntax": ["SelectShellItem Id <shellId> Row <Row>\r"]
        }, {
            "Description": "Selects a Tab looking control by Id or text of control.\r",
            "Example": ["SelectTab id Tab[1]\r", "SelectTab te \"Tab 1.\" \r"],
            "Name": "SelectTab\r",
            "Params": ["Type", "Identifyer"],
            "ShortDescription": "Select a Tab.\r",
            "Syntax": ["SelectTab <Type> <Identifyer>\r"]
        }, {
            "Description": "Selects entire row from the table looking for Id.\r",
            "Example": ["SelectTableRow TableId wnd[0]/usr/cntlALV/shellcont/shell RowN 0\r"],
            "Name": "SelectTableRow\r",
            "Params": ["TableId", "RowN"],
            "ShortDescription": "Select the entire row from the table.\r",
            "Syntax": ["SelectTableRow TableId <TableId> RowN <RowN>\r"]
        }, {
            "Description": "Selects tree item from a tree node by tree id, node and item.\r",
            "Example": ["SelectTreeItem TreeId wnd[0]/usr/cntlTREE_CONTROL_CONTAINER/shellcont/shell Node \"02*1*2\" Item \"Item 1\"\r", "SelectTreeItem TreeId wnd[0]/usr/cntlTREE_CONTROL_CONTAINER/shellcont/shell Node \"*****2\" Item \"Item 1\"\r"],
            "Name": "SelectTreeItem\r",
            "Params": ["TreeId", "Node", "Item"],
            "ShortDescription": "Select a tree item from a tree node.\r",
            "Syntax": ["SelectTreeItem TreeId <TreeId> Node \"<NodeKey>\" Item \"<ItemName>\"\r"]
        }, {
            "Description": "Sends the desired key from Keyboard.\r",
            "Example": ["SendKey 0\r"],
            "Name": "SendKey\r",
            "Params": ["Key"],
            "ShortDescription": "Type a key from the Keyboard.\r",
            "Syntax": ["SendKey <Key>\r"]
        }, {
            "Description": "Sets the column to select a cell using it.\r",
            "Example": ["SetCurrentCellColumn Grid[0] ColumnId MNS\r"],
            "Name": "SetCurrentCellColumn\r",
            "Params": ["GridId", "ColumnId"],
            "ShortDescription": "Set the column to select a cell using it.\r",
            "Syntax": ["SetCurrentCellColumn <GridId> ColumnId <ColumnId>\r"]
        }, {
            "Description": "Set all required parameters to manage SAP connection and Actions.\r",
            "Example": ["SetSAPParameters SAPConRetries 1 SAPConnTime 3\r"],
            "Name": "SetSAPParameters\r",
            "ShortDescription": "Set all required parameters to manage SAP connection and Actions.\r",
            "Syntax": ["SetSAPParameters SAPConRetries 1 SAPConnTime 3\r"]
        }, {
            "Description": "Gets all sap sessions and shows the id's in the log file.\r",
            "Example": ["ShowAllSAPSessions\r"],
            "Name": "ShowAllSAPSessions\r",
            "ShortDescription": "Gets all sap sessions and shows the id's in the log file.\r",
            "Syntax": ["ShowAllSAPSessions\r"]
        }, {
            "Description": "Saves a file with all elements of the current page.\r",
            "Example": ["ShowElements\r"],
            "Name": "ShowElements\r",
            "ShortDescription": "Save a file with all elements of the current page.\r",
            "Syntax": ["ShowElements\r"]
        }, {
            "Description": "Starts a SAP transaction.\r",
            "Example": ["StartTransaction MB52\r"],
            "Name": "StartTransaction\r",
            "Params": ["Trans"],
            "ShortDescription": "Start a SAP transaction.\r",
            "Syntax": ["StartTransaction <Trans>\r"]
        }, {
            "Description": "Takes a screenshot of current page and save it in the given path.\r",
            "Example": ["TakeScreenShot and save in \"C:\\Images\" with filename \"ErrorImage.jpg\"\r"],
            "Name": "TakeScreenShot\r",
            "Params": ["FilePath", "FileName"],
            "ShortDescription": "Take a screenshot of current page.\r",
            "Syntax": ["TakeScreenShot and save in \"<FilePath>\" with filename \"<FileName>\"\r"]
        }, {
            "Description": "Moves the list one or more positions down.\r",
            "Example": ["VerticalScroll GridId wnd[0]/usr/cntlALV/shellcont/shell Pos 1\r"],
            "Name": "VerticalScroll\r",
            "Params": ["GridId", "Position"],
            "ShortDescription": "Move the list one or more positions down.\r",
            "Syntax": ["VerticalScroll GridId <GridId> Pos <Position>\r"]
        }, {
            "Description": "Waits for an element to appear in the window or for a specific amount of time.\r",
            "Example": ["Wait s 10\r", "Wait e id \"LabelId[1]\" 5 3\r", "Wait e te \"Title Label\" 5 3\r"],
            "Name": "Wait\r",
            "Params": ["Mode", "Type", "Identifier", "Time", "RetryNo"],
            "ShortDescription": "Wait for an element to appear.\r",
            "Syntax": ["Wait <Mode> <Time>\r", "Wait <Mode> <Type> <Identifier> <Time> <RetryNo>\r"]
        }, {
            "Description": "Writes a text in a TextBox looking control by Id and anchor (reference control at the left of the control).\r",
            "Example": ["Write id txtbx[1] \"Test data to write.\" \r", "Write an \"write at the left\" \"Test data to write.\" 1\r"],
            "Name": "Write\r",
            "Params": ["Type", "Identifyer", "Text", "Pos"],
            "ShortDescription": "Write a text in a TextBox.\r",
            "Syntax": ["Write <Type:id|an> <Identifyer> <Text>\r", "Write <Type:id|an> <Identifyer> <Text> <Pos>        \r"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["id", "an"],
                    "ParamName": "Type"
                }],
                "Instruction": "Write <Type:id|an> <Identifyer> <Text>\r"
            }, {
                "Constants": [{
                    "Options": ["id", "an"],
                    "ParamName": "Type"
                }],
                "Instruction": "Write <Type:id|an> <Identifyer> <Text> <Pos>        \r"
            }]
        }, {
            "Description": "Writes a value in a given gridcell.\r",
            "Example": ["WriteGridCell GridId GridId[0] Column \"NAME1\" Row 0 Value \"Person\"\r"],
            "Name": "WriteGridCell\r",
            "Params": ["GridId", "Column", "Row", "Value"],
            "ShortDescription": "Write a value in a given gridcell.\r",
            "Syntax": ["WriteGridCell GridId <GridId> Column \"<Column>\" Row <Row> Value \"<Value>\"\r"]
        }],
        "ID": 3,
        "Keyword": "SAP",
        "Name": "SAP Reader",
        "_FAdminKey": "SAP"
    },
    "4": {
        "Description": "This is powerpoint",
        "Function": [{
            "Description": "Remove shapes of a slide by name",
            "Example": ["        Ppt DeleteShapes in \"PDeck\" slide 8 named \"Picture\" "],
            "Name": "DeleteShapes",
            "Params": ["presentation", "slidenum", "text"],
            "ShortDescription": "Delete a shape.",
            "Syntax": ["DeleteShapes in <presentation> slide <slidenum> named <text> "]
        }, {
            "Description": "Gets the number of a slide that contains a given text",
            "Example": ["        Ppt GetSlide in \"PDeck\" containing \"Rol Classification\""],
            "Name": "GetSlide",
            "Params": ["presentation", "text"],
            "ShortDescription": "Gets the slides that contains a given text.",
            "Syntax": ["GetSlide in <presentation> containing <text>"]
        }, {
            "Description": "Paste values from worksheet \"Iniciativa\" to presentation",
            "Example": ["Date{d-dd-ddd-dddd en}  ---  9-09-Mon-Monday", "Date{dddd(-3)-MMMM(-2)-yyyy(-3) es} ---  jueves-junio-2014", "Date{1}  ---  9-09-Mon-Monday", "Date{2}  ---  jueves-junio-2014", "Date{MMMM(-1)'yy en}  ---  July'17", "LoadFileFrom \"<<WorkBookDeck>>\" containing COBRO and Date{MMMM(-1) es} as WorkBookC"],
            "Name": "LoadFileFrom",
            "Params": ["wb", "path", "firstval", "secondval", "key"],
            "ShortDescription": "Loads a PowerPoint file.",
            "Syntax": ["LoadFileFrom <wb_path> containing <firstval> and <secondval> as <key>"]
        }, {
            "Description": "Sets Effort and Spend tables from excel in presentation",
            "Example": ["        Ppt PasteShape in \"PResumen\" slide 3 position \"46,100,370,440\""],
            "Name": "PasteShape",
            "Params": ["presentation", "slidenum", "position", "lpos", "tpos", "h", "w"],
            "ShortDescription": "Paste a shape from the clipboard into a slide.",
            "Syntax": ["PasteShape in <presentation> slide <slidenum> position <lpos,tpos,h,w>"]
        }, {
            "Description": "Find a given shape into a prsentation slide",
            "Example": ["ReplaceChart \"Gr\u00e1fico 1\" from FinancialsWorkSheet  in_slide 3 of PDeck change \"Gr\u00e1fico 1\" with \"FinancialsChart\" in \"502,358,125,214\""],
            "Name": "ReplaceChart",
            "Params": ["chartname", "worksheet", "slidenum", "presentation", "objectname", "newobjectname", "lpos", "tpos", "hpos", "wpos"],
            "ShortDescription": "Copy or replace a chart from Excel to a slide.",
            "Syntax": ["ReplaceChart <chartname> from <worksheet> in_slide <slidenum> of <presentation> change <objectname> with <newobjectname> in <lpos,tpos,hpos,wpos>"]
        }, {
            "Description": "Save a powerpoint presentation",
            "Example": ["Save PDeck"],
            "Name": "Save",
            "Params": ["Key", "presentation"],
            "ShortDescription": "Save a PPT.",
            "Syntax": ["Save <key_presentation>"]
        }],
        "ID": 4,
        "Keyword": "PPT",
        "Name": "Powerpoint Reader",
        "_FAdminKey": "PPT"
    },
    "5": {
        "Description": "Mix-Reader is the most powerful of all the readers, its design allows you to create RPAs (Robotic Process Automations) by using the instructions available in all the other readers and even more, like form example \u201ctry catch\u201d and \u201cfor\u201d logic instructions as if you were using a programming language. It has its own functions to really put the readers potential to the highest point and to be able to create any type of RPAs without the limitation of the technologies involved, the amount of time you need to do a task, or the diversification of the flows as a consequence of an error, you can even declare variables in the script to store information and share it with other readers. ",
        "Function": [{
            "CreationDate": "2021-Aug-04",
            "Description": "Adds a set of values or a 1D list to a 2D list defined in the variables, if the 2D list does not exist, it will be created.",
            "Example": ["AddValueTo2DList \"EmployeesList\" value {\"John Doe\", \"California\", \"4566\", \"Active\"}\r", "AddValueTo2DList \"EmployeesList\" value {AnEmployeeList}\r"],
            "Name": "AddValueTo2DList",
            "Params": ["2DListName", "Item", "1DListName"],
            "ShortDescription": "Add values or a 1D list to a 2D list variable.",
            "Syntax": ["AddValueTo2DList \"<2DListName>\" value {\"<Item1>\", \"<Item2>\", ... , \"<ItemN>\"}", "AddValueTo2DList \"<2DListName>\" value {<1DListName>}"],
            "SyntaxDetail": [{
                "Instruction": "AddValueTo2DList \"<2DListName>\" value {\"<Item1>\", \"<Item2>\", ... , \"<ItemN>\"}"
            }, {
                "Instruction": "AddValueTo2DList \"<2DListName>\" value {<1DListName>}"
            }]
        }, {
            "CreationDate": "2020-Mar-17",
            "Description": "Adds values or the values of another list to a list of strings defined in the variables, if the list does not exist, it will be created.",
            "Example": ["AddValueToList \"SofttekUsers\" value \"erlik.corona\"\r", "AddValueToList \"SofttekUsers\" value {\"alan.gonzalez\", \"andres.cruz\", \"gilberto.isida\"}\r", "AddValueToList \"AllUsers\" value {SofttekUsers}\r"],
            "Name": "AddValueToList",
            "Params": ["listName", "newValue", "item", "otherListName"],
            "ShortDescription": "Add values to a list variable.",
            "Syntax": ["AddValueToList \"<listName>\" value \"<newValue>\"", "AddValueToList \"<listName>\" value {\"<item1>\", \"<item2>\", ... , \"<itemN>\"}", "AddValueToList \"<listName>\" value {<otherListName>}"],
            "SyntaxDetail": [{
                "Instruction": "AddValueToList \"<listName>\" value \"<newValue>\""
            }, {
                "Instruction": "AddValueToList \"<listName>\" value {\"<item1>\", \"<item2>\", ... , \"<itemN>\"}"
            }, {
                "Instruction": "AddValueToList \"<listName>\" value {<otherListName>}"
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/MixedReader/AddValueToList0.mov"]
        }, {
            "CreationDate": "2020-Mar-17",
            "Description": "Adds the value inside a variable (as a string) to an existing list variable, if the list does not exist, it will be created.",
            "Example": ["AddVarToList \"users\" value \"var1\"\r"],
            "Name": "AddVarToList",
            "Params": ["listName", "variableName"],
            "ShortDescription": "Add the value in a variable to a list.",
            "Syntax": ["AddVarToList \"<listName>\" value \"<variableName>\""],
            "SyntaxDetail": [{
                "Instruction": "AddVarToList \"<listName>\" value \"<variableName>\""
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/MixedReader/AddVarToList0.mov"]
        }, {
            "CreationDate": "2022-Apr-22",
            "Description": "Filter elements in a list. \\nFilterType \"all\" looks for the matches in the criteria. \\nFilterType \"except\" looks for matches that don't meet the criteria. \\nMatchContents \"exact\" will look for exact values. \\n MatchContents \"contains\" will look for the word as a regex. If no special regex is used, it will behave as \"contains\".  \\nCriteria can be comma separated for multiple values. Whenever a comma is part of the search word, it can be escaped as follows \\,",
            "Example": ["ApplyFilterInList {charactersList} find {all} match contents {exact} with values [Leo,Mike,Rafael,Donatello] and save as {turtlesList}\r", "ApplyFilterInList {ticketsList} find {all} match contents {contains} with values [^Error.*,.+falla] and save as {errorsFoundList}\r", "ApplyFilterInList {namesList} find {except} match contents {exact} with values [Mike] and save as {notMikeList}\r", "ApplyFilterInList {transportList} find {except} match contents {contains} with values [avion,globo] and save as {notFlyingList}\r"],
            "Name": "ApplyFilterInList",
            "Params": ["listName", "filterType", "matchContents", "criteria", "newListName"],
            "ShortDescription": "Filter elements in a list",
            "Syntax": ["ApplyFilterInList {<listName>} find {<filterType:all|except>} match contents {<matchContents:exact|contains>} with values [<criteria>] and save as {<newListName>}"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["all", "except"],
                    "ParamName": "filterType"
                }, {
                    "Options": ["exact", "contains"],
                    "ParamName": "matchContents"
                }],
                "Instruction": "ApplyFilterInList {<listName>} find {<filterType:all|except>} match contents {<matchContents:exact|contains>} with values [<criteria>] and save as {<newListName>}"
            }]
        }, {
            "CreationDate": "2018-May-21",
            "Description": "Apply a regex to a specific string and save the result in the variable declared at the end of the instruction, if the variable hasn't been declared yet it will be created. \\nIf no matches are found an error will be raised. \\nThe \"save as a list\" option, will store all matches of the regex in a list. Save with the exact value keeps numbers with thousands separator and other formats that otherwise are removed.",
            "Example": ["ApplyRegex \"(?<=ClickImage )(.*)(?=Timeout)\" to the string \"ClickImage Casilla.PNG Timeout= 20000 NumberClicks= 1 Sim= 0.95\" and save as \"clickimage1\"\r", "ApplyRegex \"(?<=Ticket#)(.*)(?= \u2014 Baja de inventario)\" to the List \"RegexString1\" and save as \"ticket1\"\r", "ApplyRegex \"(?<=Ticket#)(.*)(?= \u2014 Baja de inventario)\" to the List \"TicketsList\" and save as a List \"ResultList\"\r"],
            "Name": "ApplyRegex",
            "Params": ["Regex", "String", "List", "VarName"],
            "ShortDescription": "Apply a regex to a specific string and save the result in a variable.",
            "Syntax": ["ApplyRegex \"<Regex>\" to the string \"<String>\" and save as \"<VarName>\"", "ApplyRegex \"<Regex>\" to the string \"<String>\" and save with the exact value as \"<VarName>\"", "ApplyRegex \"<Regex>\" to the string \"<String>\" and save as a list \"<VarName>\"", "ApplyRegex \"<Regex>\" to the List \"<List>\" and save as \"<VarName>\"", "ApplyRegex \"<Regex>\" to the List \"<List>\" and save with the exact value as \"<VarName>\"", "ApplyRegex \"<Regex>\" to the List \"<List>\" and save as a List \"<VarName>\""],
            "SyntaxDetail": [{
                "Instruction": "ApplyRegex \"<Regex>\" to the string \"<String>\" and save as \"<VarName>\""
            }, {
                "Instruction": "ApplyRegex \"<Regex>\" to the string \"<String>\" and save with the exact value as \"<VarName>\""
            }, {
                "Instruction": "ApplyRegex \"<Regex>\" to the string \"<String>\" and save as a list \"<VarName>\""
            }, {
                "Instruction": "ApplyRegex \"<Regex>\" to the List \"<List>\" and save as \"<VarName>\""
            }, {
                "Instruction": "ApplyRegex \"<Regex>\" to the List \"<List>\" and save with the exact value as \"<VarName>\""
            }, {
                "Instruction": "ApplyRegex \"<Regex>\" to the List \"<List>\" and save as a List \"<VarName>\""
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/MixedReader/ApplyRegex0.mov"]
        }, {
            "CreationDate": "2020-May-08",
            "Description": "Reports the attended elements within a script for analytics purpuses. This will help to report the number of cicles performed in a script or other bussiness related actions that have taken place in the excecution of the script.",
            "Example": ["Attendedelements \"[\"Item 1 served\",\"Item 2 served\",\"Item 3 served\"]\" by \"innovation@softtek.com\"\r", "Attendedelements \"The element 123456789 was attended\"\r", "Attendedelements \"null\"\r", "Attendedelements \"[\"Item 1 served\",\"Item 2 served\",\"Item 3 served\"]\" by \"innovation@softtek.com\"\r", "Attendedelements \"The element 123456789 was attended\" by \"innovation@softtek.com\"\r", "Attendedelements \"null\" by \"innovation@softtek.com\"\r", "Attendedelements \"[\"Item 1 served\",\"Item 2 served\",\"Item 3 served\"]\" with the column \"Country\" and its value \"USA\"\r", "Attendedelements \"The element 123456789 was attended\" with the column \"Region\" and its value \"4\"\r", "Attendedelements \"null\" with the column \"Sprint\" and its value \"123456\"\r", "Attendedelements \"[\"Item 1 served\",\"Item 2 served\",\"Item 3 served\"]\" by \"innovation@softtek.com\" with the column \"Country\" and its value \"USA\"\r", "Attendedelements \"The element 123456789 was attended\" by \"innovation@softtek.com\" with the column \"Region\" and its value \"4\"\r", "Attendedelements \"null\" by \"innovation@softtek.com\" with the column \"Sprint\" and its value \"123456\"\r"],
            "ExtraDocs": "https://innotekfilestore.file.core.windows.net/frida-docs/Readers/Mixed/Articles/Attendedelements.pdf",
            "Name": "Attendedelements",
            "Params": ["JSONList", "StringToDisplay", "UserMail", "ColumnLabel", "ColumnValue"],
            "ShortDescription": "Reports the attended elements within a script for analytics purpuses.",
            "Syntax": ["Attendedelements \"<JSONList>\"", "Attendedelements \"<StringToDisplay>\"", "Attendedelements \"null\"", "Attendedelements \"<JSONList>\" by \"<UserMail>\"", "Attendedelements \"<StringToDisplay>\" by \"<UserMail>\"", "Attendedelements \"null\" by \"<UserMail>\"", "Attendedelements \"<JSONList>\" with the column \"<ColumnLabel>\" and its value \"<ColumnValue>\"", "Attendedelements \"<StringToDisplay>\" with the column \"<ColumnLabel>\" and its value \"<ColumnValue>\"", "Attendedelements \"null\" with the column \"<ColumnLabel>\" and its value \"<ColumnValue>\"", "Attendedelements \"<JSONList>\" by \"<UserMail>\" with the column \"<ColumnLabel>\" and its value \"<ColumnValue>\"", "Attendedelements \"<StringToDisplay>\" by \"<UserMail>\" with the column \"<ColumnLabel>\" and its value value \"<ColumnValue>\"", "Attendedelements \"null\" by \"<UserMail>\" with the column  \"<ColumnLabel>\" and its value \"<ColumnValue>\""],
            "SyntaxDetail": [{
                "Instruction": "Attendedelements \"<JSONList>\""
            }, {
                "Instruction": "Attendedelements \"<StringToDisplay>\""
            }, {
                "Instruction": "Attendedelements \"<JSONList>\" by \"<UserMail>\""
            }, {
                "Instruction": "Attendedelements \"<StringToDisplay>\" by \"<UserMail>\""
            }, {
                "Instruction": "Attendedelements \"null\" by \"<UserMail>\""
            }, {
                "Instruction": "Attendedelements \"<JSONList>\" with the column \"<ColumnLabel>\" and its value \"<ColumnValue>\""
            }, {
                "Instruction": "Attendedelements \"<StringToDisplay>\" with the column \"<ColumnLabel>\" and its value \"<ColumnValue>\""
            }, {
                "Instruction": "Attendedelements \"null\" with the column \"<ColumnLabel>\" and its value \"<ColumnValue>\""
            }, {
                "Instruction": "Attendedelements \"<JSONList>\" by \"<UserMail>\" with the column \"<ColumnLabel>\" and its value \"<ColumnValue>\""
            }, {
                "Instruction": "Attendedelements \"<StringToDisplay>\" by \"<UserMail>\" with the column \"<ColumnLabel>\" and its value value \"<ColumnValue>\""
            }, {
                "Instruction": "Attendedelements \"null\" by \"<UserMail>\" with the column  \"<ColumnLabel>\" and its value \"<ColumnValue>\""
            }]
        }, {
            "CreationDate": "2021-Sep-13",
            "Description": "Reports the attended elements with error in a script for analytics purpuses, these items will be taken into account for the error saving metrics. This will help to report the number of cicles performed in a script with error separately from the success elements or other bussiness related actions that have taken place in the excecution of the script.",
            "Example": ["AttendedElementsWithError \"[\"Item 1 served\",\"Item 2 served\",\"Item 3 served\"]\"\r", "AttendedElementsWithError \"The element 123456789 was attended\"\r"],
            "Name": "AttendedElementsWithError",
            "Params": ["JSONList", "StringToDisplay"],
            "ShortDescription": "Reports the attended elements with error in a script for analytics purpuses, this elements are going to be taken into account for error saving metrics.",
            "Syntax": ["AttendedElementsWithError \"<JSONList>\"", "AttendedElementsWithError \"<StringToDisplay>\""],
            "SyntaxDetail": [{
                "Instruction": "AttendedElementsWithError \"<JSONList>\""
            }, {
                "Instruction": "AttendedElementsWithError \"<StringToDisplay>\""
            }]
        }, {
            "CreationDate": "2021-May-10",
            "Description": "Encodes or decodes a string to Base 64. The byte information is read as UTF8 encoded unless other is specified (UTF7, UTF32, ASCII, Unicode, BigEndianUnicode). The SaveImage syntax takes a variable whose value is a Base 64 image string and saves the converted image to the given path. The supported image formats are BMP, EMF, GIF, ICON, JPEG, PNG, TIFF, WMF. ",
            "Example": ["B64 encode inputVar={fuente} output={b64Str}\r", "B64 decode inputVar={facturaQR} output={facturaData}\r", "B64 encode inputVar={fuente} output={b64Str} encoding={Unicode}\r", "B64 decode inputVar={facturaQR} output={facturaData} encoding={UTF7}\r", "B64 SaveImage inputVar={APIResponse} output={C:\\User\\Desktop\\ConvertedImages\\MyImage.png}\r"],
            "Name": "B64",
            "Params": ["action", "VariableName", "OutputFilePath"],
            "ShortDescription": "Base 64 encoding/decoding.",
            "Syntax": ["B64 <action:encode|decode> inputVar={<VariableName>} output={<VariableName>}", "B64 SaveImage inputVar={<VariableName>} output={<OutputFilePath>}"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["encode", "decode"],
                    "ParamName": "action"
                }],
                "Instruction": "B64 <action:encode|decode> inputVar={<VariableName>} output={<VariableName>}"
            }, {
                "Instruction": "B64 SaveImage inputVar={<VariableName>} output={<OutputFilePath>}"
            }]
        }, {
            "CreationDate": "2022-May-17",
            "Description": "Check if a FRIDA variable (runtime created or from the process variables) has a null value. The result is stored as a true/false value in a new runtime variable with the given name.",
            "Example": ["CheckNull \"Username\" and save as \"IsUsernameNull\"\r", "CheckNull \"APIResponse\" and save as \"IsResponseNull\"\r"],
            "Name": "CheckNull",
            "Params": ["VariableName", "ResultVariableName"],
            "ShortDescription": "Check if a variable has a null value saved",
            "Syntax": ["CheckNull \"<VariableName>\" and save as \"<ResultVariableName>\""],
            "SyntaxDetail": [{
                "Instruction": "CheckNull \"<VariableName>\" and save as \"<ResultVariableName>\""
            }]
        }, {
            "Description": "Removes the content in the clipboard.",
            "Example": ["ClearClipboard\r"],
            "Name": "ClearClipboard",
            "Syntax": ["ClearClipboard"]
        }, {
            "CreationDate": "2019-Nov-25",
            "Description": "Saves the RPA's execution log until the current instruction. Log is handled in memory and the txt file is written at the end of the execution, so if you need this file before the end of the execution, you must \"CommitLog\".",
            "Example": ["CommitLog\r"],
            "Name": "CommitLog",
            "Params": ["none"],
            "ShortDescription": "Save the RPA's execution log file until the current instruction.",
            "Syntax": ["CommitLog"],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/MixedReader/CommitLog0.mov"]
        }, {
            "CreationDate": "2020-Dec-11",
            "Description": "Copies a directory to another location, optionally you can decide whether to copy all files and inner directories or not.",
            "Example": ["CopyDirectory source={C:\\Users\\gilberto.isida\\Documents\\Directorio - Prueba Funci\u00f3n 2021} destination={D:\\Backup\\PruebaCopyDir} recursive={true} overwrite={false}\r"],
            "Name": "CopyDirectory",
            "Params": ["srcPath", "destPath", "recursive", "overwrite"],
            "ShortDescription": "Copies a directory to another location.",
            "Syntax": ["CopyDirectory source={<srcPath>} destination={<destPath>} recursive={<recursive:true|false>} overwrite={<overwrite:true|false>}"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["true", "false"],
                    "ParamName": "recursive"
                }, {
                    "Options": ["true", "false"],
                    "ParamName": "overwrite"
                }],
                "Instruction": "CopyDirectory source={<srcPath>} destination={<destPath>} recursive={<recursive:true|false>} overwrite={<overwrite:true|false>}"
            }]
        }, {
            "CreationDate": "2019-Jun-19",
            "Description": "Counts the elements inside a list or dictionary variable. For strings it counts the number of chars. Angle brackets (<>) are not required.",
            "Example": ["CountItems in list and save_as users\r", "CountItems in string and save_as numChars\r", "CountItems in rows and save_as filas\r"],
            "Name": "CountItems",
            "Params": ["varName", "varName2"],
            "ShortDescription": "Count the elements in a list or variable.",
            "Syntax": ["CountItems in <varName> and save_as <varName2>"],
            "SyntaxDetail": [{
                "Instruction": "CountItems in <varName> and save_as <varName2>"
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/MixedReader/CountItems0.mov"]
        }, {
            "CreationDate": "2018-Jun-27",
            "Description": "Edits a body template stored in the Turing variables, replacing Variables present within the template with predefined Turing variables. The result is saved in DestVar.",
            "Example": ["CreateMailFrom plantilla Variables \"NomPersona\" As plantillaPersonal\r"],
            "Name": "CreateMailFrom",
            "Params": ["varTemplate", "var1", "var2", "varN", "destVar"],
            "ShortDescription": "Edit a body template stored in the Turing variables.",
            "Syntax": ["CreateMailFrom <varTemplate> Variables \"<var1>,<var2>...<varN>\" As <destVar>"],
            "SyntaxDetail": [{
                "Instruction": "CreateMailFrom <varTemplate> Variables \"<var1>,<var2>...<varN>\" As <destVar>"
            }]
        }, {
            "CreationDate": "2021-Aug-19",
            "Description": "Use this if you need to project a date or time in the future or in the past. You can project the result into years, months, weeks, days, hours, minutes, seconds, and milliseconds. If you know the input date string format, it would be better to write it in the line of code. If you want a specific output format, you must type it. In both formats you can enter the desired language",
            "Example": ["DateAdd {2} {years} {18-08-2021} input format={dd-MM-yyyy es} output format={dd-MMMM-yyyy es} and save as {EndDay}\r", "DateAdd {-2} {years} {18-08-2021} input format={dd-MM-yyyy} output format={dd-MMMM-yyyy en} and save as {EndDay}\r", "DateAdd {10} {days} {21-Aug-2021} input format={dd-MMM-yyyy} output format={dd-MMM-yyyy} and save as {Days}\r", "DateAdd {2} {weeks} {18-Aug-2021} input format={dd-MM-yyyy es} output format={dd-MMM-yyyy} and save as {EndDay}\r", "DateAdd {4} {hours} {17:00:00} input format={hh:mm:ss} output format={hh:mm:ss tt} and save as {Hours}\r", "DateAdd {10} {minutes} {17:10:00} input format={hh:mm:ss} output format={HH:mm:ss} and save as {Minutes}\r", "DateAdd {-10} {seconds} {17:10:00} input format={hh:mm:ss} output format={HH:mm:ss} and save as {Seconds}\r", "DateAdd {10} {milliseconds} {17:10:00} input format={hh:mm:ss} output format={HH:mm:ss fff} and save as {Milliseconds}\r"],
            "Name": "DateAdd",
            "Params": ["timeUnit", "interval", "date", "inputformat", "outputformat", "varName", "language"],
            "ShortDescription": "Returns a Date value containing a date and time value to which a specified time interval has been added.",
            "Syntax": ["DateAdd {<timeUnit>} {<interval:years|months|weeks|days|hours|minutes|seconds|milliseconds>} {<date>} input format={<inputformat>} and save as {<varName>}", "DateAdd {<timeUnit>} {<interval>} {<date>} input format={<inputformat>} and save as {<varName>}", "DateAdd {<timeUnit>} {<interval>} {<date>} input format={<inputformat>} output format={<outputformat>} and save as {<varName>}", "DateAdd {<timeUnit>} {<interval>} {<date>} input format={<inputformat> <language>} output format={<outputformat> <language>} and save as {<varName>}"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["years", "months", "weeks", "days", "hours", "minutes", "seconds", "milliseconds"],
                    "ParamName": "interval"
                }],
                "Instruction": "DateAdd {<timeUnit>} {<interval:years|months|weeks|days|hours|minutes|seconds|milliseconds>} {<date>} input format={<inputformat>} and save as {<varName>}"
            }, {
                "Instruction": "DateAdd {<timeUnit>} {<interval>} {<date>} input format={<inputformat>} and save as {<varName>}"
            }, {
                "Instruction": "DateAdd {<timeUnit>} {<interval>} {<date>} input format={<inputformat>} output format={<outputformat>} and save as {<varName>}"
            }, {
                "Instruction": "DateAdd {<timeUnit>} {<interval>} {<date>} input format={<inputformat> <language>} output format={<outputformat> <language>} and save as {<varName>}"
            }]
        }, {
            "CreationDate": "2020-Oct-27",
            "Description": "Use this if you need to compare two date strings and get the time difference between both. You can get the result in years, months, weeks, days, hours, minutes, seconds, and milliseconds. If you know the input date string format, it would be better to enter it in your line of code. The time difference will be returned if date1 > date2. Just for clarification, years = 365 days, months = 30 days, weeks = 7 days. [UPDATE] use the \"absolute\" keyword to avoid negative numbers.",
            "Example": ["DateDiff {hours} {20/09/2020} vs {28/09/2020} and save as {time}\r", "DateDiff {years} {27-Oct-2020} vs {21-Nov-1991} format={dd-MMM-yyyy} and save as {age}\r", "DateDiff absolute {years} {21-Nov-1991} vs {27-Oct-2020} format={dd-MMM-yyyy} and save as {age}\r", "DateDiff absolute {minutes} {21/Nov/2020T14:07} vs {21/Nov/2020T18:40} format={dd/MMM/yyyyTHH:mm} and save as {minutes}\r"],
            "Name": "DateDiff",
            "Params": ["timeUnit", "date1", "date2", "dateFormat", "varName"],
            "ShortDescription": "Get the difference between two dates.",
            "Syntax": ["DateDiff {<timeUnit:years|months|weeks|days|hours|minutes|seconds|milliseconds>} {<date1>} vs {<date2>} and save as {<varName>}", "DateDiff {<timeUnit:years|months|weeks|days|hours|minutes|seconds|milliseconds>} {<date1>} vs {<date2>} format={<dateFormat>} and save as {<varName>}", "DateDiff absolute {<timeUnit:years|months|weeks|days|hours|minutes|seconds|milliseconds>} {<date1>} vs {<date2>} format={<dateFormat>} and save as {<varName>}"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["years", "months", "weeks", "days", "hours", "minutes", "seconds", "milliseconds"],
                    "ParamName": "timeUnit"
                }],
                "Instruction": "DateDiff {<timeUnit:years|months|weeks|days|hours|minutes|seconds|milliseconds>} {<date1>} vs {<date2>} and save as {<varName>}"
            }, {
                "Constants": [{
                    "Options": ["years", "months", "weeks", "days", "hours", "minutes", "seconds", "milliseconds"],
                    "ParamName": "timeUnit"
                }],
                "Instruction": "DateDiff {<timeUnit:years|months|weeks|days|hours|minutes|seconds|milliseconds>} {<date1>} vs {<date2>} format={<dateFormat>} and save as {<varName>}"
            }, {
                "Constants": [{
                    "Options": ["years", "months", "weeks", "days", "hours", "minutes", "seconds", "milliseconds"],
                    "ParamName": "timeUnit"
                }],
                "Instruction": "DateDiff absolute {<timeUnit:years|months|weeks|days|hours|minutes|seconds|milliseconds>} {<date1>} vs {<date2>} format={<dateFormat>} and save as {<varName>}"
            }]
        }, {
            "CreationDate": "2021-May-24",
            "Description": "Print the Turing variables to the log file.",
            "Example": ["DebugVariables\r"],
            "Name": "DebugVariables",
            "ShortDescription": "Print the Turing variables to the log file.",
            "Syntax": ["DebugVariables"]
        }, {
            "CreationDate": "2018-Feb-06",
            "Description": "Create a variable in the runtime FRIDA variables dictionary that can be used in other instructions. VariableType \"date\" converts OLE Automation Dates. Use \"with the exact value\" syntax to save a numeric value with its separators. VariableType \"password\" creates a password variable that can only be used with two <<>>.",
            "Example": ["DefineVariable as \"UserName\"\r", "DefineVariable as \"UserEmail\" with the value \"innovation@softtek.com\"\r", "DefineVariable as \"ExpectedResult\" with the exact value \"   100,300.68 \"\r", "DefineVariable type \"string\" as \"User\"\r", "DefineVariable type \"List\" as \"ListUsers\"\r", "DefineVariable type \"string\" as \"ticket1\" with the value \"0000053631\"\r", "DefineVariable type \"string\" as \"Total\" with the value \"100,300.68\"\r", "DefineVariable type \"password\" as \"PassVariable\" with the value \"Pass1234\"\r", "DefineVariable type {string} as {ExpectedResult} with the exact value { 100,300.68 }\r"],
            "Name": "DefineVariable",
            "Params": ["variableType", "variableName", "value"],
            "ShortDescription": "Create a FRIDA variable.",
            "Syntax": ["DefineVariable as \"<variableName>\"", "DefineVariable as \"<variableName>\" with the value \"<value>\"", "DefineVariable as \"<variableName>\" with the exact value \"<value>\"", "DefineVariable type \"<variableType:string|date|password|List>\" as \"<variableName>\"", "DefineVariable type \"<variableType:string|date|password|List>\" as \"<variableName>\" with the value \"<value>\"", "DefineVariable type {<variableType:string|date|password|List>} as {<variableName>} with the exact value {<value>}"],
            "SyntaxDetail": [{
                "Instruction": "DefineVariable as \"<variableName>\""
            }, {
                "Instruction": "DefineVariable as \"<variableName>\" with the value \"<value>\""
            }, {
                "Instruction": "DefineVariable as \"<variableName>\" with the exact value \"<value>\""
            }, {
                "Constants": [{
                    "Options": ["string", "date", "password", "List"],
                    "ParamName": "variableType"
                }],
                "Instruction": "DefineVariable type \"<variableType:string|date|password|List>\" as \"<variableName>\""
            }, {
                "Constants": [{
                    "Options": ["string", "date", "password", "List"],
                    "ParamName": "variableType"
                }],
                "Instruction": "DefineVariable type \"<variableType:string|date|password|List>\" as \"<variableName>\" with the value \"<value>\""
            }, {
                "Constants": [{
                    "Options": ["string", "date", "password", "List"],
                    "ParamName": "variableType"
                }],
                "Instruction": "DefineVariable type {<variableType:string|date|password|List>} as {<variableName>} with the exact value {<value>}"
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/MixedReader/DefineVariable0.mov"]
        }, {
            "CreationDate": "2019-Apr-23",
            "Description": "Delete a specific caracter on a string or list and saves the result in a variable. Lists must be saved previously on theVariablesHelper.vars dictionary. For spaces, Character must say <blank>.",
            "Example": ["Delete character \"/\" in the string \"Ruta/\" and save as \"cadena\"\r", "Delete character \";\" in the list \"listaNombres\" and save as \"listaModificada\"\r", "Delete character \"<blank>\" in the string \"hola mundo\" and save as \"cadSinEspacios\"\r"],
            "Name": "Delete",
            "Params": ["Character", "Text", "varName"],
            "ShortDescription": "Delete a caracter on a string or list and saves the result in a variable.",
            "Syntax": ["Delete character \"<Character>\" in the string \"<Text>\" and save as \"<varName>\"", "Delete character \"<Character>\" in the list \"<Text>\" and save as \"<varName>\""],
            "SyntaxDetail": [{
                "Instruction": "Delete character \"<Character>\" in the string \"<Text>\" and save as \"<varName>\""
            }, {
                "Instruction": "Delete character \"<Character>\" in the list \"<Text>\" and save as \"<varName>\""
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/MixedReader/Delete0.mov"]
        }, {
            "CreationDate": "2020-Feb-23",
            "Description": "Creates an error message, this message can be used to stop the execution of a process and to disply an especific message in run window.",
            "Example": ["Finish\r", "Finish \"Element not found\"\r"],
            "Name": "Finish",
            "Params": ["ErrorMessage"],
            "ShortDescription": "Create an error message to stop the execution of a process.",
            "Syntax": ["Finish", "Finish \"<ErrorMessage>\""],
            "SyntaxDetail": [{
                "Instruction": "Finish \"<ErrorMessage>\""
            }]
        }, {
            "Description": "Loops a code fragment a specified number of times.",
            "Example": ["for 10 times { ... }\r", "for <<NumberOfTimes>> times { ... }\r", "for <<<NumberOfTimes>>> times { ... }\r"],
            "Name": "For",
            "Params": ["numberOfTimes"],
            "ShortDescription": "Loops a code fragment a specified number of times.",
            "Syntax": ["for <numberOfTimes> times { ... }"],
            "SyntaxDetail": [{
                "Instruction": "for <numberOfTimes> times { ... }"
            }]
        }, {
            "CreationDate": "2018-Mar-23",
            "Description": "Loops a code fragment a specified number of times, or based on a list-type variable. When iterating a Dictionary<key, value> the iterator name must be \"key\" or \"value\" in order to get its respective value.",
            "Example": ["foreach item in ItemList {\r", "foreach Invoice in Invoices {\r", "foreach char in Date {\r"],
            "ExtraDocs": "https://innotekfilestore.file.core.windows.net/frida-docs/Readers/Mixed/Articles/For-ForEach.pdf",
            "Name": "For-ForEach",
            "Params": ["iteratorName", "listName", "stringVariableName"],
            "ShortDescription": "Loops a code fragment a specified number of times, or based on a list-type variable.",
            "Syntax": ["foreach <iteratorName> in <listName> {", "foreach <iteratorName> in <stringVariableName> {"],
            "SyntaxDetail": [{
                "Instruction": "foreach <iteratorName> in <listName> {"
            }, {
                "Instruction": "foreach <iteratorName> in <stringVariableName> {"
            }]
        }, {
            "CreationDate": "2021-Jun-01",
            "Description": "Downloads a file or an entire directory to a local folder. The syntax supports anonymous and basic authentication. Use 'strict' to interrupt the execution if there's an error downloading any file. 'url' and 'out' parameters must be directory paths, the files will be saved to the local directory with the original name.",
            "Example": ["FTP_Download strict={false} url={ftp://waws-prod-bay-041.ftp.azurewebsites.windows.net/site/wwwroot/someDir} out={C:/Users/gilberto.isida/Documents/FTPTests}\r", "FTP_Download strict={false} url={ftp://waws-prod-bay-041.ftp.azurewebsites.windows.net/site/wwwroot/someDir} credentials={frida,innovation} out={C:/Users/gilberto.isida/Documents/FTPTests}\r", "FTP_Download strict={true} url={ftp://waws-prod-bay-041.ftp.azurewebsites.windows.net/site/wwwroot/Content/Resources/Examples} file={helloworld.txt} credentials={frida,innovation} out={C:/Users/gilberto.isida/Documents/FTPTests}\r"],
            "Name": "FTP_Download",
            "Params": ["host", "user", "pass", "filename", "destinationFolder", "isStrict", "version"],
            "ShortDescription": "Downloads a file or an entire directory to a local folder.",
            "Syntax": ["FTP_Download strict={<isStrict:true|false>} url={<host>} out={<destinationFolder>}", "FTP_Download strict={<isStrict:true|false>} url={<host>} ssl={<version:Tls|Tls11|Tls12>} out={<destinationFolder>}", "FTP_Download strict={<isStrict:true|false>} url={<host>} credentials={<user>,<pass>} out={<destinationFolder>}", "FTP_Download strict={<isStrict:true|false>} url={<host>} credentials={<user>,<pass>} ssl={<version:Tls|Tls11|Tls12>} out={<destinationFolder>}", "FTP_Download strict={<isStrict:true|false>} url={<host>} file={<filename>} credentials={<user>,<pass>} out={<destinationFolder>}", "FTP_Download strict={<isStrict:true|false>} url={<host>} file={<filename>} credentials={<user>,<pass>} ssl={<version:Tls|Tls11|Tls12>} out={<destinationFolder>}"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["true", "false"],
                    "ParamName": "isStrict"
                }],
                "Instruction": "FTP_Download strict={<isStrict:true|false>} url={<host>} out={<destinationFolder>}"
            }, {
                "Constants": [{
                    "Options": ["true", "false"],
                    "ParamName": "isStrict"
                }, {
                    "Options": ["Tls", "Tls11", "Tls12"],
                    "ParamName": "version"
                }],
                "Instruction": "FTP_Download strict={<isStrict:true|false>} url={<host>} ssl={<version:Tls|Tls11|Tls12>} out={<destinationFolder>}"
            }, {
                "Constants": [{
                    "Options": ["true", "false"],
                    "ParamName": "isStrict"
                }],
                "Instruction": "FTP_Download strict={<isStrict:true|false>} url={<host>} credentials={<user>,<pass>} out={<destinationFolder>}"
            }, {
                "Constants": [{
                    "Options": ["true", "false"],
                    "ParamName": "isStrict"
                }, {
                    "Options": ["Tls", "Tls11", "Tls12"],
                    "ParamName": "version"
                }],
                "Instruction": "FTP_Download strict={<isStrict:true|false>} url={<host>} credentials={<user>,<pass>} ssl={<version:Tls|Tls11|Tls12>} out={<destinationFolder>}"
            }, {
                "Constants": [{
                    "Options": ["true", "false"],
                    "ParamName": "isStrict"
                }],
                "Instruction": "FTP_Download strict={<isStrict:true|false>} url={<host>} file={<filename>} credentials={<user>,<pass>} out={<destinationFolder>}"
            }, {
                "Constants": [{
                    "Options": ["true", "false"],
                    "ParamName": "isStrict"
                }, {
                    "Options": ["Tls", "Tls11", "Tls12"],
                    "ParamName": "version"
                }],
                "Instruction": "FTP_Download strict={<isStrict:true|false>} url={<host>} file={<filename>} credentials={<user>,<pass>} ssl={<version:Tls|Tls11|Tls12>} out={<destinationFolder>}"
            }]
        }, {
            "CreationDate": "2021-Jun-01",
            "Description": "Get all the files and directory names inside a directory in an FTP Server. The syntax supports anonymous and basic authentication. The result will be saved as an iterable list. The 'details' parameter will make the output as if given by CMD.",
            "Example": ["FTP_List type={files} url={ftp://waws-prod-bay-041.ftp.azurewebsites.windows.net/site/wwwroot/TonyTest} credentials={frida,innovation} out={lista}\r", "FTP_List type={all} url={ftp://waws-prod-bay-041.ftp.azurewebsites.windows.net/site/wwwroot/TonyTest/FTPExample} credentials={frida,innovation} out={lista}\r", "FTP_List type={all} url={ftp://waws-prod-bay-041.ftp.azurewebsites.windows.net/site/wwwroot/TonyTest/FTPExample} credentials={frida,innovation} ssl={Tls12} out={lista}\r"],
            "Name": "FTP_List",
            "Params": ["host", "user", "pass", "varName", "type", "version"],
            "ShortDescription": "Get all the file and directory names inside a directory in an FTP Server.",
            "Syntax": ["FTP_List type={<type:files|directories|all>} url={<host>} out={<varName>}", "FTP_List type={<type:files|directories|all>} url={<host>} ssl={<version:Tls|Tls11|Tls12>} out={<varName>}", "FTP_List type={<type:files|directories|all>} url={<host>} credentials={<user>,<pass>} out={<varName>}", "FTP_List type={<type:files|directories|all>} url={<host>} credentials={<user>,<pass>} ssl={<version:Tls|Tls11|Tls12>} out={<varName>}"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["files", "directories", "all"],
                    "ParamName": "type"
                }],
                "Instruction": "FTP_List type={<type:files|directories|all>} url={<host>} out={<varName>}"
            }, {
                "Constants": [{
                    "Options": ["files", "directories", "all"],
                    "ParamName": "type"
                }, {
                    "Options": ["Tls", "Tls11", "Tls12"],
                    "ParamName": "version"
                }],
                "Instruction": "FTP_List type={<type:files|directories|all>} url={<host>} ssl={<version:Tls|Tls11|Tls12>} out={<varName>}"
            }, {
                "Constants": [{
                    "Options": ["files", "directories", "all"],
                    "ParamName": "type"
                }],
                "Instruction": "FTP_List type={<type:files|directories|all>} url={<host>} credentials={<user>,<pass>} out={<varName>}"
            }, {
                "Constants": [{
                    "Options": ["files", "directories", "all"],
                    "ParamName": "type"
                }, {
                    "Options": ["Tls", "Tls11", "Tls12"],
                    "ParamName": "version"
                }],
                "Instruction": "FTP_List type={<type:files|directories|all>} url={<host>} credentials={<user>,<pass>} ssl={<version:Tls|Tls11|Tls12>} out={<varName>}"
            }]
        }, {
            "CreationDate": "2021-Jun-01",
            "Description": "Rename or move a file in an FTP Server. The syntax supports anonymous and basic authentication. Use 'overwrite' if you want to discard any previously existing data in the destination path.",
            "Example": ["FTP_Rename overwrite={false} source={ftp://waws-prod-bay-041.ftp.azurewebsites.windows.net/site/wwwroot/TonyTest/frida.png} destination={ftp://waws-prod-bay-041.ftp.azurewebsites.windows.net/site/wwwroot/TonyTest/Move/fridamoved.png}\r", "FTP_Rename overwrite={false} source={ftp://waws-prod-bay-041.ftp.azurewebsites.windows.net/site/wwwroot/TonyTest/frida.png} destination={ftp://waws-prod-bay-041.ftp.azurewebsites.windows.net/site/wwwroot/TonyTest/frida_renamed.png}\r", "FTP_Rename overwrite={true} source={ftp://waws-prod-bay-041.ftp.azurewebsites.windows.net/site/wwwroot/TonyTest/frida.png} destination={ftp://waws-prod-bay-041.ftp.azurewebsites.windows.net/site/wwwroot/TonyTest/Move/fridamoved.png} credentials={frida,innovation}\r", "FTP_Rename overwrite={true} source={ftp://waws-prod-bay-041.ftp.azurewebsites.windows.net/site/wwwroot/TonyTest/frida.png} destination={ftp://waws-prod-bay-041.ftp.azurewebsites.windows.net/site/wwwroot/TonyTest/fridarenamed.png} credentials={frida,innovation}\r"],
            "Name": "FTP_Rename",
            "Params": ["source", "destination", "user", "pass", "isOverwrite"],
            "ShortDescription": "Rename or move a file in an FTP Server.",
            "Syntax": ["FTP_Rename overwrite={<isOverwrite:true|false>} source={<sourcePath>} destination={<destinationPath>}", "FTP_Rename overwrite={<isOverwrite:true|false>} source={<sourcePath>} destination={<destinationPath>} credentials={<user>,<pass>}"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["true", "false"],
                    "ParamName": "isOverwrite"
                }],
                "Instruction": "FTP_Rename overwrite={<isOverwrite:true|false>} source={<sourcePath>} destination={<destinationPath>}"
            }, {
                "Constants": [{
                    "Options": ["true", "false"],
                    "ParamName": "isOverwrite"
                }],
                "Instruction": "FTP_Rename overwrite={<isOverwrite:true|false>} source={<sourcePath>} destination={<destinationPath>} credentials={<user>,<pass>}"
            }]
        }, {
            "CreationDate": "2020-Dec-11",
            "Description": "Reads all the images from the pdf file and saves them them in a given path naming them with numbers.",
            "Example": ["GetAllImages from the file \"C:\\Users\\andres.cruz\\Downloads\\Documentacion.pdf\" and save them in \"C:\\Users\\andres.cruz\\Desktop\\RPAImages\"\r"],
            "Name": "GetAllImages",
            "Params": ["filepath", "folderName"],
            "ShortDescription": "Read all the images from a PDF file and save them in the given path.",
            "Syntax": ["GetAllImages from the file \"<filepath>\" and save them in \"<folderName>\""],
            "SyntaxDetail": [{
                "Instruction": "GetAllImages from the file \"<filepath>\" and save them in \"<folderName>\""
            }]
        }, {
            "CreationDate": "2020-Apr-22",
            "Description": "Reads all the text from the indicated file (pdf, txt) as a list and saves it value in the given variable. The separation character may be indicated if new line is not desired. [This function uses PDF Clown covered by LGPL Licence (library source code : http://www.pdfclown.org)]",
            "Example": ["GetAllLines from \"C:\\Users\\gilberto.isida\\Downloads\\userIDs.txt\" and save as \"newUsers\"\r", "GetAllLines from \"C:\\Users\\andres de la cruz\\Desktop\\Invoice.pdf\" and save as \"Invoice\"\r", "GetAllLines from \"C:\\Users\\gilberto.isida\\Downloads\\userIDs.txt\" and separate its value by \";\" and save as \"newUsers\" \r"],
            "Name": "GetAllLines",
            "Params": ["filepath", "varname", "separationChar"],
            "ShortDescription": "Reads all the text from a file to a list variable.",
            "Syntax": ["GetAllLines from \"<filepath>\" and save as \"<varname>\"", "GetAllLines from the file \"<filepath>\" and save as \"<varname>\"", "GetAllLines from \"<filepath>\" and separate its value by \"<separationChar>\" and save as \"<varname>\""],
            "SyntaxDetail": [{
                "Instruction": "GetAllLines from \"<filepath>\" and save as \"<varname>\""
            }, {
                "Instruction": "GetAllLines from the file \"<filepath>\" and save as \"<varname>\""
            }, {
                "Instruction": "GetAllLines from \"<filepath>\" and separate its value by \"<separationChar>\" and save as \"<varname>\""
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/MixedReader/GetAllLines0.mov"]
        }, {
            "CreationDate": "2020-Apr-21",
            "Description": "Reads all the text from the indicated file (pdf , txt) as one single string and save it's value in the given variable. [This function uses PDF Clown covered by LGPL Licence (library source code : http://www.pdfclown.org)]",
            "Example": ["GetAllText from \"C:\\Users\\gilberto.isida\\Downloads\\userIDs.txt\" and save as \"newUsers\"\r", "GetAllText from the file \"C:\\Users\\andres.cruz\\Downloads\\IDs.txt\" and save as \"IDs\"\r"],
            "Name": "GetAllText",
            "Params": ["filepath", "varname"],
            "ShortDescription": "Reads all the text from a file saves it in a variable.",
            "Syntax": ["GetAllText from \"<filepath>\" and save as \"<varname>\"", "GetAllText from the file \"<filepath>\" and save as \"<varname>\""],
            "SyntaxDetail": [{
                "Instruction": "GetAllText from \"<filepath>\" and save as \"<varname>\""
            }, {
                "Instruction": "GetAllText from the file \"<filepath>\" and save as \"<varname>\""
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/MixedReader/GetAllText0.mov"]
        }, {
            "CreationDate": "2019-Apr-26",
            "Description": "Get all the possible combinations of items within a list (numeric), which sum is equal to a known number (N). The return type is a List of Lists(values). If the flag \"-indices\" exists, then instead of returning the values that sum (N), the return List of Lists(indices). If we expect a sum=7, and the list is [1,2,...6], the result would be [[1,6], [2,5], [3,4]]. Returns an error if the input variable is not a list, if the ist is not numeric, if the list is empty, and if there are no combinations.",
            "Example": ["GetCombinationsSum from digits sum 10 and save as theseSum7 -indices\r", "GetCombinationsSum from digits sum 10 and save as theseSum7\r"],
            "Name": "GetCombinationsSum",
            "Params": ["list", "expectedSum", "varName"],
            "ShortDescription": "Get all the possible combinations of items within a numeric list.",
            "Syntax": ["GetCombinationsSum from <list> sum <expectedSum> and save as <varName>", "GetCombinationsSum from <list> sum <expectedSum> and save as <varName> -indices"],
            "SyntaxDetail": [{
                "Instruction": "GetCombinationsSum from <list> sum <expectedSum> and save as <varName>"
            }, {
                "Instruction": "GetCombinationsSum from <list> sum <expectedSum> and save as <varName> -indices"
            }]
        }, {
            "CreationDate": "2020-Nov-04",
            "Description": "Retrieves and saves the current Culture provider Name in a default (fixed) variable \"CultureInfoName\".",
            "Example": ["GetCulture\r"],
            "Name": "GetCulture",
            "Params": ["none"],
            "ShortDescription": "Create a variable for the current CultureInfoName.",
            "Syntax": ["GetCulture"]
        }, {
            "CreationDate": "2018-Jun-11",
            "Description": "Read the current date of the computer that is running the process, if you want to add a day, month or year just put a parenthesis with the number that you want to add. You can also decide the format of the date, and the language.",
            "Example": ["GetCurrentDate format={Month} and save as Month\r", "GetCurrentDate format={Day} and save as Day\r", "GetCurrentDate format={Year} and save as CurrentYear --- CurrentYear = 2019\r", "GetCurrentDate format={MM/dd/yy} and save as ActualDate ---- ActualDate = 03/25/2019\r", "GetCurrentDate format={MMMM/dddd/yyyy en} and save as CurrentDate\r", "GetCurrentDate format={MMMM(-1)-yyyy en} and save as CurrentDate\r", "GetCurrentDate format={dd(-3)-MMMM(-2)-yyyy(-3) es} and save as pastDate\r", "GetCurrentDate format={MM yyyy en} and save as CurrentDate\r", "GetCurrentDate format={d-dd-ddd-dddd en} and save as CurrentDate ---- This is the result assigned to the variable CurrentDate = 9-09-Mon-Monday\r", "GetCurrentDate format={dddd(-3)-MMMM(-2)-yyyy(-3) es} and save as CurrentDate ---- This is the result assigned to the variable CurrentDate = jueves-junio-2014\r", "GetCurrentDate format={MMMM(-1)'yy en} and save as CurrentDate  ---- This is the result assigned to the variable  CurrentDate = July'17\r"],
            "Name": "GetCurrentDate",
            "Params": ["format", "language", "date"],
            "ShortDescription": "Read the computer's current date.",
            "Syntax": ["GetCurrentDate format={<format:Month|Day|Year|hour|minutes|seconds|hour&minutes|hour&minutes&seconds>} and save as <date>", "GetCurrentDate format={<format>} and save as <date>", "GetCurrentDate format={<format> <language>} and save as <date>"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["Month", "Day", "Year", "hour", "minutes", "seconds", "hour&minutes", "hour&minutes&seconds"],
                    "ParamName": "format"
                }],
                "Instruction": "GetCurrentDate format={<format:Month|Day|Year|hour|minutes|seconds|hour&minutes|hour&minutes&seconds>} and save as <date>"
            }, {
                "Instruction": "GetCurrentDate format={<format>} and save as <date>"
            }, {
                "Instruction": "GetCurrentDate format={<format> <language>} and save as <date>"
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/MixedReader/GetCurrentDate0.mov"]
        }, {
            "CreationDate": "2019-Feb-21",
            "Description": "With the syntax \"GetEnviromentPath\" and \"GetPath\" you will get three new variables, named \"home\", \"root\" and \"resources\", being home the root folder of your user account on windows and root the folder where Turing is located. Also You can use \"GetHome\" , \"GetRoot\" and \"GetResources\" to only get one of them, with the option of changing  the default name that is being assigned to it. ",
            "Example": ["GetEnvironmentPath\r", "GetPath\r", "GetHome\r", "GetRoot\r", "GetHome as \"HomePath\"\r", "GetRoot as \"TuringFolderPath\"\r", "GetResources as \"ResourcesPath\"\r"],
            "Name": "GetEnviromentPath",
            "Params": ["varName"],
            "ShortDescription": "Read \"home\" and \"root\" locations.",
            "Syntax": ["GetEnvironmentPath", "GetPath", "GetHome", "GetRoot", "GetResources", "GetHome as \"<varName>\"", "GetRoot as \"<varName>\"", "GetResources as \"<varName>\""],
            "SyntaxDetail": [{
                "Instruction": "GetHome as \"<varName>\""
            }, {
                "Instruction": "GetRoot as \"<varName>\""
            }, {
                "Instruction": "GetResources as \"<varName>\""
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/MixedReader/GetEnviromentPath0.mov"]
        }, {
            "CreationDate": "2020-Nov-08",
            "Description": "Downloads a file from an online URL and saves it to a given path.",
            "Example": ["GetFileFromURL \"https://some.server.com/Dir/Dir2/file.png\" and save file as \"C:/Users/gilberto.isida/Downloads/file.png\"\r", "GetFileFromURL {https://some.server.com/Dir/Dir2/file.png} and save as {C:/Users/gilberto.isida/Downloads/file.png}\r"],
            "Name": "GetFileFromURL",
            "Params": ["url", "localPath"],
            "ShortDescription": "Download a file from a URL.",
            "Syntax": ["GetFileFromURL \"<url>\" and save file as \"<localPath>\"", "GetFileFromURL {<url>} and save as {<localPath>}"],
            "SyntaxDetail": [{
                "Instruction": "GetFileFromURL \"<url>\" and save file as \"<localPath>\""
            }, {
                "Instruction": "GetFileFromURL {<url>} and save as {<localPath>}"
            }]
        }, {
            "CreationDate": "2018-Nov-27",
            "Description": "Read the folder where Turing is located and store it in a variable.",
            "Example": ["GetHome as \"HomePath\"\r"],
            "Name": "GetHome",
            "Params": ["varName"],
            "ShortDescription": "Read \"home\" location.",
            "Syntax": ["GetHome as \"<varName>\"", "GetHome"],
            "SyntaxDetail": [{
                "Instruction": "GetHome as \"<varName>\""
            }]
        }, {
            "CreationDate": "2021-Jan-04",
            "Description": "Get the computer name where the process is running. With the syntax \"GetHostName\" will create a variable with the name \"hostname\".",
            "Example": ["GetHostName\r", "GetHostName as \"ComputerName\"        \r"],
            "Name": "GetHostName",
            "Params": ["VarName"],
            "ShortDescription": "Get the computer name where the process is running.",
            "Syntax": ["GetHostName", "GetHostName as \"<VarName>\""],
            "SyntaxDetail": [{
                "Instruction": "GetHostName as \"<VarName>\""
            }]
        }, {
            "CreationDate": "2021-Aug-19",
            "Description": "Use this if you need to get the last day of the current month or the last day of the month of the specified date and project a date into the future or past. You must enter the format of the date entered. If you want a specific output format, you must type it.",
            "Example": ["GetLastDayOfMonth offset {-1} output format={dd/MMMM/yyyy es} and save as {fecha}\r", "GetLastDayOfMonth base {07-18-2021} offset {-2} input format={MM-dd-yyyy} and save as {fecha}\r", "GetLastDayOfMonth base {01-04-2021} offset {-2} input format={dd-MM-yyyy} output format={dd-MMMM-yyyy es} and save as {fecha}\r", "GetLastDayOfMonth base {18-07-2021} offset {-2} input format={dd-MM-yyyy es} output format={dd-MMMM-yyyy es} and save as {fecha}\r", "GetLastDayOfMonth base {18/07/2021} offset {-5} input format={dd/MM/yyyy es} output format={dd/MMMM/yyyy en} and save as {fecha}\r", "GetLastDayOfMonth base {Agosto} offset {-2} input format={MMMM es} output format={dd-MMMM-yyyy es} and save as {fecha}\r", "GetLastDayOfMonth base {Febrero/2021} offset {-2} input format={MMMM/yyyy es} output format={dd-MMMM-yyyy es} and save as {fecha}\r"],
            "Name": "GetLastDayOfMonth",
            "Params": ["date", "timeUnit", "inputformat", "outputformat", "language", "varName"],
            "ShortDescription": "Returns the date of the last day of the month, adding or subtracting days, specifying the input and output format.",
            "Syntax": ["GetLastDayOfMonth offset {<timeUnit>|<-timeUnit>} and save as {<varName>}", "GetLastDayOfMonth base {<date>} offset {<timeUnit>|<-timeUnit>} input format={<dateFormat>} and save as {<varName>}", "GetLastDayOfMonth base {<date>} offset {<timeUnit>|<-timeUnit>} input format={<dateFormat> <language>} output format={<dateFormat> <language>} and save as {<varName>}"],
            "SyntaxDetail": [{
                "Instruction": "GetLastDayOfMonth offset {<timeUnit>|<-timeUnit>} and save as {<varName>}"
            }, {
                "Instruction": "GetLastDayOfMonth base {<date>} offset {<timeUnit>|<-timeUnit>} input format={<dateFormat>} and save as {<varName>}"
            }, {
                "Instruction": "GetLastDayOfMonth base {<date>} offset {<timeUnit>|<-timeUnit>} input format={<dateFormat> <language>} output format={<dateFormat> <language>} and save as {<varName>}"
            }]
        }, {
            "CreationDate": "2021-Aug-20",
            "Description": "Gets the Listener ID (Turing Watcher) where the process is running. By default the ID is stored in a variable named \"ActiveListenerID\" unless a different name is specified.\\nIf used without a listener, an error is generated.",
            "Example": ["GetListenerID\r", "GetListenerID as \"ComputerName\"        \r"],
            "Name": "GetListenerID",
            "Params": ["VarName"],
            "ShortDescription": "Gets the Listener ID where the process is running.",
            "Syntax": ["GetListenerID", "GetListenerID as \"<VarName>\""],
            "SyntaxDetail": [{
                "Instruction": "GetListenerID as \"<VarName>\""
            }]
        }, {
            "CreationDate": "2020-Nov-23",
            "Description": "Get the process queue id returned by the API RunProcess. ",
            "Example": ["GetListenerQueueId as \"IdPOST\"\r"],
            "Name": "GetListenerQueueId",
            "Params": ["VarName"],
            "ShortDescription": "Get the process' queue Id. ",
            "Syntax": ["GetListenerQueueId as \"<VarName>\""],
            "SyntaxDetail": [{
                "Instruction": "GetListenerQueueId as \"<VarName>\""
            }]
        }, {
            "CreationDate": "2020-Jul-16",
            "Description": "Get the process id of the process being executed. ",
            "Example": ["GetProcessId as \"ProcessId\"\r"],
            "Name": "GetProcessId",
            "Params": ["VarName"],
            "ShortDescription": "Get the process id of the process being executed. ",
            "Syntax": ["GetProcessId as \"<VarName>\""],
            "SyntaxDetail": [{
                "Instruction": "GetProcessId as \"<VarName>\""
            }]
        }, {
            "CreationDate": "2018-Nov-27",
            "Description": "Read the root folder of your user account on windows and store it in a variable.",
            "Example": ["GetRoot as \"TuringFolderPath\"\r"],
            "Name": "GetRoot",
            "Params": ["varName"],
            "ShortDescription": "Read \"root\" location.",
            "Syntax": ["GetRoot as \"<varName>\"", "GetRoot"],
            "SyntaxDetail": [{
                "Instruction": "GetRoot as \"<varName>\""
            }]
        }, {
            "CreationDate": "2020-Jul-17",
            "Description": "Get the run id of the execution being made. ",
            "Example": ["GetRunId as \"RunId\"\r"],
            "Name": "GetRunId",
            "Params": ["VarName"],
            "ShortDescription": "Get the run id of the execution being made. ",
            "Syntax": ["GetRunId as \"<VarName>\""],
            "SyntaxDetail": [{
                "Instruction": "GetRunId as \"<VarName>\""
            }]
        }, {
            "CreationDate": "2021-Apr-24",
            "Description": "Saves a specific value from a 2D list or table into a variable given two indexes. If the variable doesn't exist, it will be created. Instructions such as Excel ReadRows and DB RunOutputQuery generate 2D lists.",
            "Example": ["GetTableVarValue \"table1\" row={1} col={5} and save as \"value\"\r", "GetTableVarValue \"UsersList\" row={0} col={0} and save as \"User1Name\"\r", "GetTableVarValue \"UsersList\" row={3} col={1} and save as \"User4ID\"\r"],
            "Name": "GetTableVarValue",
            "Params": ["tableName", "row", "col", "varName"],
            "ShortDescription": "Gets the value from a 2D list or table",
            "Syntax": ["GetTableVarValue \"<tableName>\" row={<row>} col={<col>} and save as \"<varName>\""],
            "SyntaxDetail": [{
                "Instruction": "GetTableVarValue \"<tableName>\" row={<row>} col={<col>} and save as \"<varName>\""
            }]
        }, {
            "CreationDate": "2019-May-27",
            "Description": "Gets a string from the clipboard and saves it in a variable. With the exact value will avoid interpreting numbers when saved in the variable.",
            "Example": ["GetTextFromClipboard and save as \"username\"\r", "GetTextFromClipboard and save as \"numeroTexto\" with the exact value\r"],
            "Name": "GetTextFromClipboard",
            "Params": ["varName"],
            "ShortDescription": "Get a string from the clipboard and save it in a variable.",
            "Syntax": ["GetTextFromClipboard and save as \"<varName>\"", "GetTextFromClipboard and save as \"<varName>\" with the exact value"],
            "SyntaxDetail": [{
                "Instruction": "GetTextFromClipboard and save as \"<varName>\""
            }, {
                "Instruction": "GetTextFromClipboard and save as \"<varName>\" with the exact value"
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/MixedReader/GetTextFromClipboard0.mov"]
        }, {
            "CreationDate": "2022-Feb-25",
            "Description": "Get the mail of the user that is executing.",
            "Example": ["GetUser as \"ReportTo\"\r"],
            "Name": "GetUser",
            "Params": ["VarName"],
            "ShortDescription": "Get the mail of the user that is executing.",
            "Syntax": ["GetUser as \"<VarName>\""],
            "SyntaxDetail": [{
                "Instruction": "GetUser as \"<VarName>\""
            }]
        }, {
            "CreationDate": "2018-Mar-23",
            "Description": "Makes a comparison. Uses the logical operators <, >, >=, <=, ==, !=",
            "Example": ["if (a < b)\r", "if (a >= b)\r", "if (a == b)\r", "if (a != b)\r"],
            "ExtraDocs": "https://innotekfilestore.file.core.windows.net/frida-docs/Readers/Mixed/Articles/IF.pdf",
            "Name": "IF",
            "Params": ["booleanExpression"],
            "Syntax": ["if (<booleanExpression>)"],
            "SyntaxDetail": [{
                "Instruction": "if (<booleanExpression>)"
            }]
        }, {
            "CreationDate": "2018-Jun-11",
            "Description": "Get the Index (zero-based) of a specific element in a List, and save it in the variables. You need to add as a parameter the name of the list and the string to be searched on the list. If the item does not exist in the list, the instruction will throw an error, unless you set the \"--ignore\" flag. If you don\u00b4t asign a name to the variable, the value of the index will save in a variable with the name \"Index\".",
            "Example": ["IndexOf (TicketList,TicketNumber) and save as TicketListIndex\r", "IndexOf that contains (TicketList,PORCENTAJE) and save as TicketListIndex\r", "IndexOf that contains (TicketList,TicketNumber) and save as Var1 ; index= 2\r"],
            "Name": "IndexOf",
            "Params": ["list", "element", "varName", "num"],
            "ShortDescription": "Get the Index (zero-based) of an element in a List.",
            "Syntax": ["IndexOf (<listName>,<element>) and save as <varName>", "IndexOf (<listName>,<element>) and save as <varName> --ignore", "IndexOf that contains (<list>,<element>) and save as <varName>", "IndexOf that contains (<list>,<element>) and save as <varName> ; index= <num>"],
            "SyntaxDetail": [{
                "Instruction": "IndexOf (<listName>,<element>) and save as <varName>"
            }, {
                "Instruction": "IndexOf (<listName>,<element>) and save as <varName> --ignore"
            }, {
                "Instruction": "IndexOf that contains (<list>,<element>) and save as <varName>"
            }, {
                "Instruction": "IndexOf that contains (<list>,<element>) and save as <varName> ; index= <num>"
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/MixedReader/IndexOf0.mov"]
        }, {
            "CreationDate": "2021-Jul-13",
            "Description": "Join all values in a two dimentional list and save it as a variable, values can be appended with starting and ending characters, or one of them or none. \\nIf new line is needed use \\ n.",
            "Example": ["JoinListValues from list {theList} and save as {paragraph}\r", "JoinListValues from list {idsList} and save as {joinedIds} starting with {\"} ending with {\",}\r", "JoinListValues from list {lines} and save as {joinedLines} ending with {\\n}\r"],
            "Name": "JoinListValues",
            "Params": ["listVariableName", "variableName", "separatingCharactersIni", "separatingCharactersEnd"],
            "ShortDescription": "Join all values in a list as a single string.",
            "Syntax": ["JoinListValues from list {<listVariableName>} and save as {<variableName>}", "JoinListValues from list {<listVariableName>} and save as {<variableName>} starting with {<separatingCharactersIni>}", "JoinListValues from list {<listVariableName>} and save as {<variableName>} ending with {<separatingCharactersEnd>}", "JoinListValues from list {<listVariableName>} and save as {<variableName>} starting with {<separatingCharactersIni>} ending with {<separatingCharactersEnd>}"],
            "SyntaxDetail": [{
                "Instruction": "JoinListValues from list {<listVariableName>} and save as {<variableName>}"
            }, {
                "Instruction": "JoinListValues from list {<listVariableName>} and save as {<variableName>} starting with {<separatingCharactersIni>}"
            }, {
                "Instruction": "JoinListValues from list {<listVariableName>} and save as {<variableName>} ending with {<separatingCharactersEnd>}"
            }, {
                "Instruction": "JoinListValues from list {<listVariableName>} and save as {<variableName>} starting with {<separatingCharactersIni>} ending with {<separatingCharactersEnd>}"
            }]
        }, {
            "CreationDate": "2020-Feb-27",
            "Description": "Function used to build a JSON variables (dynamic key-value pairs).Used the \"name\" param to defined where to store the result or the variable to be modify(Variable Name).The merge syntax is used to join a JSON string into a existing JSON variable preloaded in the vars dictionary (defined by using the param name).The addKey syntax is abel to incorporated a new key an value to a preloaded JSON variable in the vars dictionary (defined by using the param name).",
            "Example": ["JSON name=item {\"id\":1}\r", "JSON name=item merge {\"role\":\"player\"}\r", "JSON name=item addKey=\"address\" {\"street1\":\"3098 Constitucion\", \"city\":\"Monterrey\", \"country\":\"Mexico\"}\r"],
            "ExtraDocs": "https://innotekfilestore.file.core.windows.net/frida-docs/Readers/Mixed/Articles/JSON.pdf",
            "Name": "JSON",
            "Params": ["varName", "newKey", "jsonString"],
            "ShortDescription": "Build a JSON variable.",
            "Syntax": ["JSON name=<varName> <jsonString>", "JSON name=<varName> merge <jsonString>", "JSON name=<varName> addKey=\"<newKey>\" <jsonString>"],
            "SyntaxDetail": [{
                "Instruction": "JSON name=<varName> <jsonString>"
            }, {
                "Instruction": "JSON name=<varName> merge <jsonString>"
            }, {
                "Instruction": "JSON name=<varName> addKey=\"<newKey>\" <jsonString>"
            }]
        }, {
            "CreationDate": "2020-Jul-30",
            "Description": "Load the Data Driven Json file from the process as a list of strings objects in the variables dictionary in order to be used with the foreach instruction and LoadDataDrivenObject.",
            "Example": ["LoadDataDrivenList and save as \"<VarName>\"\r"],
            "Name": "LoadDataDrivenList",
            "Params": ["VarName"],
            "ShortDescription": "Load the Data Driven Json file from the process as a list of strings objects.",
            "Syntax": ["LoadDataDrivenList and save as \"<VarName>\""],
            "SyntaxDetail": [{
                "Instruction": "LoadDataDrivenList and save as \"<VarName>\""
            }]
        }, {
            "CreationDate": "2020-Jul-30",
            "Description": "Loads a JSON Object into the process variable dictionary with their respective keys keeping their values \u200b\u200bas strings.",
            "Example": ["LoadDataDrivenObject <InputJsonText>\r"],
            "Name": "LoadDataDrivenObject",
            "Params": ["InputJsonText"],
            "ShortDescription": "Load a JSON Object into the process variable dictionary with their respective keys keeping their values \u200b\u200bas strings.",
            "Syntax": ["LoadDataDrivenObject <InputJsonText>"],
            "SyntaxDetail": [{
                "Instruction": "LoadDataDrivenObject <InputJsonText>"
            }]
        }, {
            "CreationDate": "2019-Dec-06",
            "Description": "Given a path to an image file, it will be loaded to the clipboard (as an image), so you will be able to paste it elsewhere.",
            "Example": ["LoadIMGToClipboard \"C:\\Users\\gilberto.isida\\Pictures\\word.PNG\"\r"],
            "Name": "LoadIMGToClipboard",
            "Params": ["path"],
            "ShortDescription": "Load an image to the clipboard.",
            "Syntax": ["LoadIMGToClipboard \"<path>\""],
            "SyntaxDetail": [{
                "Instruction": "LoadIMGToClipboard \"<path>\""
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/MixedReader/LoadIMGToClipboard0.mov"]
        }, {
            "CreationDate": "2020-Aug-24",
            "Description": "Function used to read a JSON string and load its keys as variables. Use the object syntax to load JSON objects directly as FRIDA variables. List syntax will generate a list of JSON objects that can be iterated in a foreach and load their values with the object syntax.",
            "Example": ["LoadJSON object \"{\"street1\":\"3098 Constitucion\", \"city\":\"Monterrey\", \"country\":\"Mexico\"}\"\r", "LoadJSON list \"[{ID:12345 , \"Name\" : \"Innovation\"},{ID:67890 , \"Name\" : \"Softtek\"}]\" and save as \"JsonObjectList\"\r"],
            "ExtraDocs": "https://innotekfilestore.file.core.windows.net/frida-docs/Readers/Mixed/Articles/LoadJSON.pdf",
            "Name": "LoadJSON",
            "Params": ["JsonString", "varName"],
            "ShortDescription": "Read a JSON string and load its keys as variables.",
            "Syntax": ["LoadJSON object \"<JsonString>\"", "LoadJSON list \"<JsonString>\" and save as \"<varName>\""],
            "SyntaxDetail": [{
                "Instruction": "LoadJSON object \"<JsonString>\""
            }, {
                "Instruction": "LoadJSON list \"<JsonString>\" and save as \"<varName>\""
            }]
        }, {
            "CreationDate": "2019-Mar-13",
            "Description": "Loads a variable to the clipboard.",
            "Example": ["LoadVarToClipboard \"roles\"\r"],
            "Name": "LoadVarToClipboard",
            "Params": ["varName"],
            "ShortDescription": "Load a variable to the clipboard.",
            "Syntax": ["LoadVarToClipboard \"<varName>\""],
            "SyntaxDetail": [{
                "Instruction": "LoadVarToClipboard \"<varName>\""
            }]
        }, {
            "CreationDate": "2019-Dec-09",
            "Description": "Make a string lowercase and save it in a variable.",
            "Example": ["Lowercase \"someString, whatever you need\" and save as \"lower\"\r"],
            "Name": "Lowercase",
            "Params": ["aString", "newVarName"],
            "ShortDescription": "Make a string lowercase and save it in a variable.",
            "Syntax": ["Lowercase \"<aString>\" and save as \"<newVarName>\""],
            "SyntaxDetail": [{
                "Instruction": "Lowercase \"<aString>\" and save as \"<newVarName>\""
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/MixedReader/Lowercase0.mov"]
        }, {
            "CreationDate": "2019-Aug-27",
            "Description": "Generates a Random number between X and Y. Decimals and negatives are supported.",
            "Example": ["MakeRandom between -500 and 1970.85 and save as rand\r"],
            "Name": "MakeRandom",
            "Params": ["X", "Y", "varName"],
            "ShortDescription": "Generate a Random number between two numbers.",
            "Syntax": ["MakeRandom between <X> and <Y> and save as <varName>"],
            "SyntaxDetail": [{
                "Instruction": "MakeRandom between <X> and <Y> and save as <varName>"
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/MixedReader/MakeRandom0.mov"]
        }, {
            "CreationDate": "2018-Jun-06",
            "Description": "Do a math operation (+ , - , * , / ) and save the result in the variable declared at the end of the instruccion, if the variable hasn't been declared it will be created.",
            "Example": ["MathOperation 2.22 + 5 and save as Result\r", "MathOperation (5 * ( 1 + 3 ))/10 and save as Result\r"],
            "Name": "MathOperation",
            "Params": ["number1", "operator", "number2", "number3", "result"],
            "ShortDescription": "Do a math operation and save the result in a variable.",
            "Syntax": ["MathOperation <number1> <operator:+|-|*|/> <number2> and save as <result>", "MathOperation <number1> * (<number2> - <number3>) and save as <result>"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["+", "-", "*", "/"],
                    "ParamName": "operator"
                }],
                "Instruction": "MathOperation <number1> <operator:+|-|*|/> <number2> and save as <result>"
            }, {
                "Instruction": "MathOperation <number1> * (<number2> - <number3>) and save as <result>"
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/MixedReader/MathOperation0.mov"]
        }, {
            "CreationDate": "2019-Nov-25",
            "Description": "Displays a given mesage in the run window.",
            "Example": ["Message The End\r"],
            "Name": "Message",
            "Params": ["text"],
            "Syntax": ["Message <text>"],
            "SyntaxDetail": [{
                "Instruction": "Message <text>"
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/MixedReader/Message0.mov"]
        }, {
            "CreationDate": "2021-Feb-11",
            "Description": "MEXICO: Validate an XML file of an invoice against an IRS (Hacienda) webservice. The 'rfcs' variable is a list of valid RFC codes, used to validate if the invoice was generated with the correct billing contact information. The result will be saved in a fixed variable named: CFDI_Result. The result is a Dictionary<string, dynamic>, you can read iterate it or use the 'ParseVariable' instruction.",
            "Example": ["MEX_Factura_SAT file={\"C:/Users/gilberto.isida/Downloads/factura.xml\"}\r"],
            "Name": "MEX_Factura_SAT",
            "Params": ["archivoXML", "listaRFC"],
            "ShortDescription": "MEXICO: Validate an XML file of an invoice against an IRS (Hacienda) webservice.",
            "Syntax": ["MEX_Factura_SAT file={\"<archivoXML>\"}"],
            "SyntaxDetail": [{
                "Instruction": "MEX_Factura_SAT file={\"<archivoXML>\"}"
            }]
        }, {
            "CreationDate": "2018-Nov-26",
            "Description": "Calls a NotHub service that you previously created in http://automationplatform.azurewebsites.net/NotHub. If no message param is sent, the notification will contain the default message that was set at the moment of creation of the service.",
            "Example": ["NotificationService \"Jg5JUam9DloahQYywPWEKbH43\"\r", "NotificationService \"Jg5JUam5DloahQYywPWEKbH43\" message \"This is an example\"\r"],
            "Name": "NotificationService",
            "Params": ["id", "customMessage"],
            "ShortDescription": "Call an existing NotHub service.",
            "Syntax": ["NotificationService \"<id>\"", "NotificationService \"<id>\" message \"<customMessage>\""],
            "SyntaxDetail": [{
                "Instruction": "NotificationService \"<id>\""
            }, {
                "Instruction": "NotificationService \"<id>\" message \"<customMessage>\""
            }]
        }, {
            "Description": "This function reads a date and saves the date with the output format that is given.",
            "Example": ["ParseDate from={28/12/2020} to={dd/MMM/yyyy} toCulture={en} out={fecha}\r", "ParseDate from={07/12/2021} fromCulture={setCulture} to={dd/MMM/yyyy} toCulture={en} out={fecha}\r", "ParseDate from={44546} to={dd/MMM/yyyy} toCulture={setCulture} out={fecha}\r"],
            "ExtraDocs": "https://innotekfilestore.file.core.windows.net/frida-docs/Readers/Mixed/Articles/ParseDate.pdf",
            "Name": "ParseDate",
            "Params": ["inputDate", "cultureIn", "format", "cultureOut", "varName"],
            "ShortDescription": "Change a date's format.",
            "Syntax": ["ParseDate from={<inputDate>} to={<format>} toCulture={<cultureOut>} out={<varName>}", "ParseDate from={<inputDate>} fromCulture={<cultureIn:setCulture|cultureName>} to={<format>} toCulture={<cultureOut:setCulture|cultureName>} out={<varName>}"],
            "SyntaxDetail": [{
                "Instruction": "ParseDate from={<inputDate>} to={<format>} toCulture={<cultureOut>} out={<varName>}"
            }, {
                "Constants": [{
                    "Options": ["setCulture", "cultureName"],
                    "ParamName": "cultureIn"
                }, {
                    "Options": ["setCulture", "cultureName"],
                    "ParamName": "cultureOut"
                }],
                "Instruction": "ParseDate from={<inputDate>} fromCulture={<cultureIn:setCulture|cultureName>} to={<format>} toCulture={<cultureOut:setCulture|cultureName>} out={<varName>}"
            }]
        }, {
            "CreationDate": "2019-Jul-09",
            "Description": "This function reads a date depending on the input's format that is used and saves the date with the output format that is given. This languages can be used (en,es,fr,de,pt). The default language is english.",
            "Example": ["ParseExactDate from {05/05/19} input {dd/MM/yy} to output {dd-MMM-yyyy} and save as {Date}\r", "ParseExactDate from {30-Jun-2005} input {dd-MMM-yyyy es} to output {dd.MM.yy} and save as {Date}\r", "ParseExactDate from {30-Jun-2005} input {dd-MMM-yyyy} to output {dd.MM.yy fr} and save as {Date}\r", "ParseExactDate from {2018-05-Septiembre} input {yyyy-dd-MMMM es} to output {dd.MMMM.yyyy en} and save as {Date}\r"],
            "Name": "ParseExactDate",
            "Params": ["Date", "InputFormat", "OutputFormat", "VariableName"],
            "ShortDescription": "Change a date's format.",
            "Syntax": ["ParseExactDate from {<Date>} input {<InputFormat>} to output {<OutputFormat>} and save as {<VariableName>}"],
            "SyntaxDetail": [{
                "Instruction": "ParseExactDate from {<Date>} input {<InputFormat>} to output {<OutputFormat>} and save as {<VariableName>}"
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/MixedReader/ParseExactDate0.mov"]
        }, {
            "CreationDate": "2019-Jan-25",
            "Description": "Extracts the value of a list, dictionary or XML variable in the dictionary and saves it in another one as a string. This is useful for typing something contained in a collection or object. An XML with namespaces may need to use \"default:\" namespace in the XPath whenever a tag without a namespace is looked for.",
            "Example": ["ParseVariable \"projectID\" and save as \"idProyecto\"\r", "ParseVariable \"factura\" child \"TicketForXML/Header/Fields/field[@Name='NombreEmisor']/Value\" and save as \"nombreEmisor\"\r", "ParseVariable \"XMLwithNamespaces\" child \"/default:TicketForXML/h:Header/h:Fields/c:field/c:name\" and save as \"nameFound\"\r"],
            "Name": "ParseVariable",
            "Params": ["varname", "childtree", "newVarName"],
            "ShortDescription": "Extract the value of a list, dictionary or XML variable in the dictionary and saves it in another one as a string.",
            "Syntax": ["ParseVariable \"<varname>\" and save as \"<newVarName>\"", "ParseVariable \"<varname>\" child \"<childtree>\" and save as \"<newVarName>\""],
            "SyntaxDetail": [{
                "Instruction": "ParseVariable \"<varname>\" and save as \"<newVarName>\""
            }, {
                "Instruction": "ParseVariable \"<varname>\" child \"<childtree>\" and save as \"<newVarName>\""
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/MixedReader/ParseVariable0.mov"]
        }, {
            "CreationDate": "2019-Jan-30",
            "Description": "Loads an item of theVariablesHelper.vars dictionary to the clipboard, and then it is pasted in the active window/field.",
            "Example": ["PasteVar \"roles\"\r"],
            "Name": "PasteVar",
            "Params": ["varName"],
            "ShortDescription": "Load a variable's content to the clipboard and paste it in the active window/field.",
            "Syntax": ["PasteVar \"<varName>\""],
            "SyntaxDetail": [{
                "Instruction": "PasteVar \"<varName>\""
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/MixedReader/PasteVar0.mov"]
        }, {
            "CreationDate": "2019-Dec-10",
            "Description": "Send a ping to a host by url or IP address. Variables for PING_STATUS and PING_TRIPTIME are created automatically.",
            "Example": ["Ping 216.58.193.132\r", "Ping www.google.com\r"],
            "Name": "Ping",
            "Params": ["host"],
            "ShortDescription": "Send a ping to a host by url or IP address.",
            "Syntax": ["Ping <host>"],
            "SyntaxDetail": [{
                "Instruction": "Ping <host>"
            }]
        }, {
            "CreationDate": "2020-Nov-10",
            "Description": "Reads the whole content of a PDF file and stores it as text in a variable.",
            "Example": ["ReadPDFasText \"C:\\entradas\\archivo.pdf\" as \"pdfKey\"\r"],
            "Name": "ReadPDFasText",
            "Params": ["path", "varKey"],
            "ShortDescription": "Read the whole content of a PDF file and store it as text in a variable.",
            "Syntax": ["ReadPDFasText \"<path>\" as \"<varKey>\""],
            "SyntaxDetail": [{
                "Instruction": "ReadPDFasText \"<path>\" as \"<varKey>\""
            }]
        }, {
            "CreationDate": "2021-Jun-23",
            "Description": "Replaces all occurrences of searchSubstring in originString for the value in replaceSubstring and saves the result in varName. Regex syntax may be used to find occurrences. Beware that \"\\\" is escaped in the replaceSubtring and special characters as new line or tab can only be used with \"unescaped\" syntax.\\nCapture groups are valid and $CaptureGroupNum may be used to include the group in the replaceSubtring, for example considering search string \"(.+)\\.\", replace string \"$1_old.\" and string \"C:\\Documents\\user\\file.txt\". Capture group (.+) is taking all characters until a \".\" is found. So the value after the replacemet will be \"C:\\Documents\\user\\file_old.txt\".",
            "Example": ["RegexReplace { } for {|} in {varLines}\r", "RegexReplace {\\n} for {} in {varLines}\r", "RegexReplace {found,} for unescaped {found\\n} in {varLines}\r", "RegexReplace {(.+)(?=\\..+)} for {$1_old} in {filePaths}\r"],
            "Name": "RegexReplace",
            "Params": ["searchSubstring", "replaceSubstring", "originString", "varName"],
            "ShortDescription": "Replace a regular expresion match for a substring in a variable.",
            "Syntax": ["RegexReplace {<searchSubstring>} for {<replaceSubstring>} in {<varName>}", "RegexReplace {<searchSubstring>} for unescaped {<replaceSubstring>} in {<varName>}"],
            "SyntaxDetail": [{
                "Instruction": "RegexReplace {<searchSubstring>} for {<replaceSubstring>} in {<varName>}"
            }, {
                "Instruction": "RegexReplace {<searchSubstring>} for unescaped {<replaceSubstring>} in {<varName>}"
            }]
        }, {
            "CreationDate": "2022-Apr-22",
            "Description": "Remove duplicate elements from a list. The elements will be removed from the original list unless specified.",
            "Example": ["RemoveDuplicatesInList {RunDateList}\r", "RemoveDuplicatesInList {RunDateList} and save as {DaysExecuted}\r"],
            "Name": "RemoveDuplicatesInList",
            "Params": ["ListName", "NewListName"],
            "ShortDescription": "Remove duplicate elements in a list variable.",
            "Syntax": ["RemoveDuplicatesInList {<ListName>}", "RemoveDuplicatesInList {<ListName>} and save as {<NewListName>}"],
            "SyntaxDetail": [{
                "Instruction": "RemoveDuplicatesInList {<ListName>}"
            }, {
                "Instruction": "RemoveDuplicatesInList {<ListName>} and save as {<NewListName>}"
            }]
        }, {
            "CreationDate": "2021-Dec-28",
            "Description": "Remove elements from a list by specifying an index, set of coma separated indexes, a contained string or a given RegEx. Syntaxes include an \"except\" variation that removes all the elements from the list except the ones at the given index(es) or matching the given criteria. Using -1 as an index will point to the last element of the list.",
            "Example": ["RemoveFromList {MyNumbers} elements by index {3}\r", "RemoveFromList {MyNumbers} elements by index except {0,1,2,-1}\r", "RemoveFromList {MailsList} elements that contain {@gmail.com}\r", "RemoveFromList {MailsList} elements that contain except {@softtek.com}\r", "RemoveFromList {TicketNumberList} elements that match {@RegEx(Invalid|invalid|Error|ERROR|error)}\r", "RemoveFromList {TicketNumberList} elements that match except {@RegEx(Ticket #[0-9]+ {(.+)})}\r"],
            "Name": "RemoveFromList",
            "Params": ["ListName", "Index", "Text", "RegEx"],
            "ShortDescription": "Remove elements from a list by index or a criteria",
            "Syntax": ["RemoveFromList {<ListName>} elements by index {<Index>}", "RemoveFromList {<ListName>} elements by index except {<Index>}", "RemoveFromList {<ListName>} elements that contain {<Text>}", "RemoveFromList {<ListName>} elements that contain except {<Text>}", "RemoveFromList {<ListName>} elements that match {@RegEx(<RegEx>)}", "RemoveFromList {<ListName>} elements that match except {@RegEx(<RegEx>)}"],
            "SyntaxDetail": [{
                "Instruction": "RemoveFromList {<ListName>} elements by index {<Index>}"
            }, {
                "Instruction": "RemoveFromList {<ListName>} elements by index except {<Index>}"
            }, {
                "Instruction": "RemoveFromList {<ListName>} elements that contain {<Text>}"
            }, {
                "Instruction": "RemoveFromList {<ListName>} elements that contain except {<Text>}"
            }, {
                "Instruction": "RemoveFromList {<ListName>} elements that match {@RegEx(<RegEx>)}"
            }, {
                "Instruction": "RemoveFromList {<ListName>} elements that match except {@RegEx(<RegEx>)}"
            }]
        }, {
            "CreationDate": "2019-Sep-25",
            "Description": "Replaces on an existing variable a text for a different one.",
            "Example": ["ReplaceFromVariable {MyVariable} this {+} for {-}\r", "ReplaceFromVariable {MyNumber} this {.00} for {}\r", "ReplaceFromVariable {MyEmail} this {@vectoritc.com} for {@softtek.com}\r"],
            "Name": "ReplaceFromVariable",
            "Params": ["VariableName", "TextToReplace", "NewText"],
            "ShortDescription": "Replace text in a variable.",
            "Syntax": ["ReplaceFromVariable {<VariableName>} this {<TextToReplace>} for {<NewText>}"],
            "SyntaxDetail": [{
                "Instruction": "ReplaceFromVariable {<VariableName>} this {<TextToReplace>} for {<NewText>}"
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/MixedReader/ReplaceFromVariable0.mov"]
        }, {
            "CreationDate": "2022-Aug-31",
            "Description": "Erases the content on existing variables, setting them to null by default or empty string. Lists will be cleared. Numbers will always be set to 0.",
            "Example": ["ResetVariables [fileName] with initial value\r", "ResetVariables [counter1, counter2, counter3]\r", "ResetVariables [totalVar,nombreVar,usuarioList]\r"],
            "Name": "ResetVariables",
            "Params": ["variableName1", "variableName2", "variableNameN"],
            "ShortDescription": "Empty the contents of the given mixed reader variables.",
            "Syntax": ["ResetVariables [<variableName1>,<variableName2>...<variableNameN>]", "ResetVariables [<variableName1>,<variableName2>...<variableNameN>] with empty string"],
            "SyntaxDetail": [{
                "Instruction": "ResetVariables [<variableName1>,<variableName2>...<variableNameN>]"
            }, {
                "Instruction": "ResetVariables [<variableName1>,<variableName2>...<variableNameN>] with empty string"
            }]
        }, {
            "CreationDate": "2019-May-07",
            "Description": "Calls an external API, similar to cURL. The request's headers and body can be defined. The Content-Type is set by default to application/json;charset=utf-8, it can only be changed to multipart/form-data or text/plain by specifying it through the Request-Type. The API call saves the request's response as \"statusCode[string]\", \"restResponseTime[string]\", \"response[string]\". \"responseList[List]\"* and \"responseDict[Dictionary]\"* in the variables. If the response is an image, it's value will be stored as a Base 64 string. *Only if the response can be deserialized as such objects.",
            "Example": ["REST GET url=http://www.google.com\r", "REST POST url=https://innotek-8f84c.firebaseio.com/REST_TESTS/PUT?auth=XYZ Authorization={Bearer OAuthToken} body {\"Player\":\"One\"}\r", "REST POST url=https://innotek-8f84c.firebaseio.com/REST_TESTS/PUT?auth=XYZ requestType={multipart/form-data} Authorization={Basic User:Password} body {\"Player\":\"One\"} files=[\"C:\\Users\\gilberto.isida\\Downloads\\pruebas.txt\",\"C:\\Users\\gilberto.isida\\Downloads\\pruebas2.txt\"]\r", "REST POST url=https://innotek-8f84c.firebaseio.com/REST_TESTS/PUT?auth=XYZ requestType={text/plain} body {\"DocumentID\":\"20210525132456\"}\r", "REST PUT url=https://innotek-8f84c.firebaseio.com/REST_TESTS/PUT?auth=XYZ body {\"Player\":\"One\"}\r", "REST POST url=https://innotek-8f84c.firebaseio.com/REST_TESTS/PUT?auth=XYZ body {\"Player\":\"One\"}\r", "REST PATCH url=https://innotek-8f84c.firebaseio.com/REST_TESTS/PUT?auth=XYZ headers(X-HTTP-Method-Override:DELETE) body {\"Player\":\"One\"}\r", "REST DELETE url=https://innotek-8f84c.firebaseio.com/REST_TESTS/PUT?auth=XYZ\r"],
            "ExtraDocs": "https://innotekfilestore.file.core.windows.net/frida-docs/Readers/Mixed/Articles/REST.pdf",
            "Name": "REST",
            "Params": ["verb", "url", "H", "body", "json", "headerName", "headerValue", "headerNameN", "headerValueN", "basic", "filePath1", "filePathN"],
            "ShortDescription": "Call an external API.",
            "Syntax": ["REST <verb> url=<url>", "REST <verb> url=<url> body <json>", "REST <verb> url=<url> headers(<headerName>:<headerValue>, ... ,<headerNameN>:<headerValueN>) body <json>", "REST <verb> url=<url> Authorization={<Basic User:Password/Bearer token/BasicB64 B64EncodedUserAndPassword/NTLM User:Password>}", "REST <verb> url=<url> requestType={text/plain} body <json>", "REST <verb> url=<url> requestType={multipart/form-data} Authorization={<Basic User:Password/Bearer token/BasicB64 B64EncodedUserAndPassword/NTLM User:Password>}", "REST <verb> url=<url> requestType={multipart/form-data} files=[<filePath1>, ... ,<filePathN>]"],
            "SyntaxDetail": [{
                "Instruction": "REST <verb> url=<url>"
            }, {
                "Instruction": "REST <verb> url=<url> body <json>"
            }, {
                "Instruction": "REST <verb> url=<url> headers(<headerName>:<headerValue>, ... ,<headerNameN>:<headerValueN>) body <json>"
            }, {
                "Instruction": "REST <verb> url=<url> Authorization={<Basic User:Password/Bearer token/BasicB64 B64EncodedUserAndPassword/NTLM User:Password>}"
            }, {
                "Instruction": "REST <verb> url=<url> requestType={text/plain} body <json>"
            }, {
                "Instruction": "REST <verb> url=<url> requestType={multipart/form-data} Authorization={<Basic User:Password/Bearer token/BasicB64 B64EncodedUserAndPassword/NTLM User:Password>}"
            }, {
                "Instruction": "REST <verb> url=<url> requestType={multipart/form-data} files=[<filePath1>, ... ,<filePathN>]"
            }]
        }, {
            "CreationDate": "2019-Dec-09",
            "Description": "This will reverse the order of the characters that are contained in a string. Example: given \"Hello\", the return will be \"olleH\".",
            "Example": ["ReverseString \"Hello\" and save as \"reversed\"\r"],
            "Name": "ReverseString",
            "Params": ["inputString", "newVarName"],
            "ShortDescription": "Reverse the order of the characters in a string.",
            "Syntax": ["ReverseString \"<inputString>\" and save as \"<newVarName>\""],
            "SyntaxDetail": [{
                "Instruction": "ReverseString \"<inputString>\" and save as \"<newVarName>\""
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/MixedReader/ReverseString0.mov"]
        }, {
            "CreationDate": "2020-Apr-21",
            "Description": "Round all the numbers that have decimal value and are going to be saved in the variables to a specific amount of decimal places. \\nBy default all numbers are rounded to 2 decimal numbers, if no rounding is desired, use \"none\".",
            "Example": ["RoundAllNumbersTo \"5\"\r", "RoundAllNumbersTo \"none\"\r"],
            "Name": "RoundAllNumbersTo",
            "Params": ["Int"],
            "ShortDescription": "Round all the numbers that have decimal value and are going to be saved in the variables to a specific amount of decimal places.",
            "Syntax": ["RoundAllNumbersTo \"<Int>\"", "RoundAllNumbersTo \"none\""],
            "SyntaxDetail": [{
                "Instruction": "RoundAllNumbersTo \"<Int>\""
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/MixedReader/RoundNumbersTo0.mov"]
        }, {
            "CreationDate": "2021-Jan-25",
            "Description": "Run an external program (CustomLocal), but asynchronously... that means, it will be invoked in a thread and continue the current script without waiting for the CustomLocal to finish. There will be no communication from the CustomLocal back to the FRIDA main thread.",
            "Example": ["RunAsync MyCustomAsync\r", "RunAsync FileDownLoad TestArgument\r", "RunAsync CaptchaSolver Username Password\r"],
            "Name": "RunAsync",
            "Params": ["Script", "Argument"],
            "ShortDescription": "Run an external program (CustomLocal), but asynchronously.",
            "Syntax": ["RunAsync <Script>", "RunAsync <Script> <Argument1>", "RunAsync <Script> \"<Argument1>\" , \"<Argument2>\""],
            "SyntaxDetail": [{
                "Instruction": "RunAsync <Script>"
            }, {
                "Instruction": "RunAsync <Script> <Argument1>"
            }, {
                "Instruction": "RunAsync <Script> \"<Argument1>\" , \"<Argument2>\""
            }]
        }, {
            "CreationDate": "2019-Sep-09",
            "Description": "Run a Batch script. To use a variable inside your script use the placeholders <<VarName>> and <<<VarName>>> on your script as you would on a Reader Script.",
            "Example": ["Bat Write.txt\r", "Batch Write.txt\r", "RunBatch Write.txt\r", "RunBat Write.txt\r"],
            "Name": "RunBatch",
            "Params": ["Script"],
            "ShortDescription": "Run a Batch script.",
            "Syntax": ["Bat <Script>.txt", "Batch <Script>.txt", "RunBatch <Script>.txt", "RunBat <Script>.txt"],
            "SyntaxDetail": [{
                "Instruction": "Bat <Script>.txt"
            }, {
                "Instruction": "Batch <Script>.txt"
            }, {
                "Instruction": "RunBatch <Script>.txt"
            }, {
                "Instruction": "RunBat <Script>.txt"
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/MixedReader/RunBatch0.mov"]
        }, {
            "CreationDate": "2021-Feb-11",
            "Description": "Run a Batch script asynchronously. To use a variable inside your script use the placeholders <<VarName>> and <<<VarName>>> on your script as you would on a Reader Script. The actions performed by the batch script will not be waited upon by Turing, and there will be no comunication back to Turing.",
            "Example": ["RunBatchAsync LoadExternalApp.txt\r"],
            "Name": "RunBatchAsync",
            "Params": ["Script"],
            "ShortDescription": "Run a Batch script in asynchronous mode.",
            "Syntax": ["RunBatchAsync <Script>.txt"],
            "SyntaxDetail": [{
                "Instruction": "RunBatchAsync <Script>.txt"
            }]
        }, {
            "CreationDate": "2018-Sep-28",
            "Description": "Run a RunCustomLocal script, to assign a value to a defined FRIDA variable from within the CustomLocal script use Console.WriteLine(\"<VarName> : <Value>\"); To throw an error use the syntax Console.WriteLine(\"Error : <Value>\"); To force availability of console outputted variables even when an error is thrown, ForceVarsToSave syntax can be used.",
            "Example": ["RunCustomLocal MyProgram\r", "RunCustomLocal MyProgram TestArgument1\r", "RunCustomLocal MyProgram TestArgument1 , TestArgument2\r", "RunCustomLocal MyProgram \"TestArgument1\" , \"TestArgument2\"\r", "RunCustomLocal MyProgram \"TestArgument1 , TestArgument2\"\r", "RunCustomLocal MyProgram ForceVarsToSave TestArgument1\r", "RunCustomLocal MyProgram ForceVarsToSave \"TestArgument1\" , \"TestArgument2\"\r"],
            "ExtraDocs": "https://innotekfilestore.file.core.windows.net/frida-docs/Readers/Mixed/Articles/RunCustomLocal.pdf",
            "Name": "RunCustomLocal",
            "Params": ["script", "argument1", "argument2"],
            "ShortDescription": "Run an external program (CustomLocal).",
            "Syntax": ["RunCustomLocal <script>", "RunCustomLocal <script> <argument1>", "RunCustomLocal <script> \"<argument1>\" , \"<argument2>\"", "RunCustomLocal <script> ForceVarsToSave", "RunCustomLocal <script> ForceVarsToSave \"<argument1>\" , \"<argument2>\""],
            "SyntaxDetail": [{
                "Instruction": "RunCustomLocal <script>"
            }, {
                "Instruction": "RunCustomLocal <script> <argument1>"
            }, {
                "Instruction": "RunCustomLocal <script> \"<argument1>\" , \"<argument2>\""
            }, {
                "Instruction": "RunCustomLocal <script> ForceVarsToSave"
            }, {
                "Instruction": "RunCustomLocal <script> ForceVarsToSave \"<argument1>\" , \"<argument2>\""
            }]
        }, {
            "CreationDate": "2020-May-25",
            "Description": "Run a FRIDA Process sharing all the variables that are active on the main script. Step variables must be declared in both processes or given as arguments.",
            "Example": ["RunFRIDAProcess 123456\r", "RunFRIDAProcess 123456 , UserName : Innovation@softtek.com , Password : Pa$$word\r", "RunProcess 123456\r", "RunProcess 123456 , UserName : Innovation@softtek.com , Password : Pa$$word\r"],
            "Name": "RunFRIDAProcess",
            "Params": ["processID", "stepVarName1", "stepVarName2", "arg1", "arg2"],
            "ShortDescription": "Run a FRIDA Process.",
            "Syntax": ["RunFRIDAProcess <processID>", "RunFRIDAProcess <processID> , <stepVarName1> : <arg1> , <stepVarName2> : <arg2> , ...", "RunProcess <processID>", "RunProcess <processID> , <stepVarName1> : <arg1> , <stepVarName2> : <arg2> , ..."],
            "SyntaxDetail": [{
                "Instruction": "RunFRIDAProcess <processID>"
            }, {
                "Instruction": "RunFRIDAProcess <processID> , <stepVarName1> : <arg1> , <stepVarName2> : <arg2> , ..."
            }, {
                "Instruction": "RunProcess <processID>"
            }, {
                "Instruction": "RunProcess <processID> , <stepVarName1> : <arg1> , <stepVarName2> : <arg2> , ..."
            }]
        }, {
            "CreationDate": "2018-Jun-27",
            "Description": "Run a PowerShell script, to add a variable as result of a powershell script to the diccionayVariablesHelper.vars used Write-Output <VarName> : <Value> . To report an error used the next syntax  Write-Output Error : <Value>.",
            "Example": ["PowerShell Write.txt\r", "RunPowerShell Write.txt\r", "RunPowerShell Write.ps1\r"],
            "ExtraDocs": "https://innotekfilestore.file.core.windows.net/frida-docs/Readers/Mixed/Articles/RunPowerShell.pdf",
            "Name": "RunPowerShell",
            "Params": ["Script"],
            "ShortDescription": "Run a PowerShell script.",
            "Syntax": ["PowerShell <Script>", "RunPowerShell <Script>"],
            "SyntaxDetail": [{
                "Instruction": "PowerShell <Script>"
            }, {
                "Instruction": "RunPowerShell <Script>"
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/MixedReader/RunPowerShell0.mov"]
        }, {
            "CreationDate": "2019-Aug-09",
            "Description": "Run a FRIDA Script sharing all the variables that are active on the main script. ",
            "Example": ["RunScript Write.txt\r", "RunScript Write\r"],
            "Name": "RunScript",
            "Params": ["Script"],
            "ShortDescription": "Run a FRIDA Script.",
            "Syntax": ["RunScript <Script>.txt", "RunScript<Script>"],
            "SyntaxDetail": [{
                "Instruction": "RunScript <Script>.txt"
            }, {
                "Instruction": "RunScript<Script>"
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/MixedReader/RunScript_010.mov"]
        }, {
            "CreationDate": "2019-Jul-31",
            "Description": "Gets an image from the clipboard and saves a PNG file in the given path.",
            "Example": ["SaveClipboardImage {\"C:\\\\Users\\\\gilberto.isida\\\\Desktop\\\\prueba.png\"}\r"],
            "Name": "SaveClipboardImage",
            "Params": ["path"],
            "ShortDescription": "Save an image from the clipboard.",
            "Syntax": ["SaveClipboardImage {\"<path>\"}"],
            "SyntaxDetail": [{
                "Instruction": "SaveClipboardImage {\"<path>\"}"
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/MixedReader/SaveClipboardImage0.mov"]
        }, {
            "CreationDate": "2019-Jul-05",
            "Description": "On activation, all other Turing functions will save variables with the value as is. Meaning it won't try to convert the value to number and therefore loose the thousands separator or decimal digits. If needed, the state can be turned off to take advantage of variables interpreted as numbers.",
            "Example": ["SaveExactValues On\r", "SaveExactValues Off\r"],
            "Name": "SaveExactValues",
            "Params": ["saveState"],
            "ShortDescription": "Set state to save variables with unchanged texts.",
            "Syntax": ["SaveExactValues <saveState:On|Off>"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["On", "Off"],
                    "ParamName": "saveState"
                }],
                "Instruction": "SaveExactValues <saveState:On|Off>"
            }]
        }, {
            "CreationDate": "2019-Oct-06",
            "Description": "Send an email with multiple attachments. This function does not require the <<<>>> to indicate the variable that defines the body for the email.",
            "Example": ["SendEmailAttach2 body To \"faustino.villarreal@softtek.com\" Subject \"TestSub\" Attachments \"Book1.xlsx,acciones.txt\" Path \"C:\\Users\\productivity\\Desktop\"\r"],
            "Name": "SendEmailAttach2",
            "Params": ["varKey", "Address", "Subject", "Attachment", "Path"],
            "ShortDescription": "Send an email with multiple attachments.",
            "Syntax": ["SendEmailAttach2 <varKey> To \"<Address>\" Subject \"<Subject>\" Attachments \"<Attachment1>,<Attachment2>\" Path \"<Path>\""],
            "SyntaxDetail": [{
                "Instruction": "SendEmailAttach2 <varKey> To \"<Address>\" Subject \"<Subject>\" Attachments \"<Attachment1>,<Attachment2>\" Path \"<Path>\""
            }]
        }, {
            "CreationDate": "2020-Jun-17",
            "Description": "Send an email with multiple attachments embeded in mail's body. This function does not require the <<<>>> to indicate the variable that defines the body for the email.",
            "Example": ["SendEmailAttachEmbebed body To \"faustino.villarreal@softtek.com\" Subject \"TestSub\" Attachments \"Book1.xlsx,acciones.txt\" Path \"C:\\Users\\productivity\\Desktop\"\r"],
            "Name": "SendEmailAttachEmbebed",
            "Params": ["varKey", "Address", "Subject", "Attachment1", "Attachment2", "Path"],
            "ShortDescription": "Send an email with multiple attachments embeded in mail's body.",
            "Syntax": ["SendEmailAttachEmbebed <varKey> To \"<Address>\" Subject \"<Subject>\" Attachments \"<Attachment1>,<Attachment2>\" Path \"<Path>\""],
            "SyntaxDetail": [{
                "Instruction": "SendEmailAttachEmbebed <varKey> To \"<Address>\" Subject \"<Subject>\" Attachments \"<Attachment1>,<Attachment2>\" Path \"<Path>\""
            }]
        }, {
            "CreationDate": "2020-Jun-27",
            "Description": "Send an email with multiple attachments located in a given path.",
            "Example": ["SendEmailAttachments body To \"faustino.villarreal@softtek.com\" Subject \"TestSub\" Attachments \"Book1.xlsx,acciones.txt\" Path \"C:\\Users\\productivity\\Desktop\"\r", "SendEmailAttachments body To \"andres.cruz@softtek.com\" Subject \"FRIDA Test SendEmailAttachments\" Attachments \"NO\" Path \"C:\"\r"],
            "Name": "SendEmailAttachments",
            "Params": ["varKey", "Address", "Subject", "Attachment", "Path"],
            "ShortDescription": "Send an email with multiple attachments.",
            "Syntax": ["SendEmailAttachments <varKey> To \"<Address>\" Subject \"<Subject>\" Attachments \"<Attachment>\" Path \"<Path>\"", "SendEmailAttachments <varKey> To \"<Address>\" Subject \"<Subject>\" Attachments \"<Attachment1>,<Attachment2>\" Path \"<Path>\""],
            "SyntaxDetail": [{
                "Instruction": "SendEmailAttachments <varKey> To \"<Address>\" Subject \"<Subject>\" Attachments \"<Attachment>\" Path \"<Path>\""
            }, {
                "Instruction": "SendEmailAttachments <varKey> To \"<Address>\" Subject \"<Subject>\" Attachments \"<Attachment1>,<Attachment2>\" Path \"<Path>\""
            }]
        }, {
            "CreationDate": "2019-Dec-10",
            "Description": "Sends an email with multiple attachments from a desired account specified as \"Sender\" in the function. BodyVarKey variable is where the e-mail's body will be read from. It doesn't require the enclosing <<<>>>. It may include HTML tags to format the body's content, including <BR> for new line. Attachment files must be stored in \"Path\". If none is required, the word \"NO\" must be placed instead. You can also specify the name of a variable that contains the HTML string for the email signature.",
            "Example": ["SendEmailSelectSender body From \"softtekaccount@softtek.com\" To \"faustino.villarreal@softtek.com\" Subject \"TestSub\" Attachments \"Book1.xlsx,acciones.txt\" Path \"C:\\Users\\productivity\\Desktop\"\r", "SendEmailSelectSender body From \"softtekaccount@softtek.com\" To \"faustino.villarreal@softtek.com\" Subject \"TestSub\" Attachments \"NO\" Path \"C:\\\"\r", "SendEmailSelectSender body From \"softtekaccount@softtek.com\" To \"faustino.villarreal@softtek.com\" CC \"user@softtek.com;seconduser@softtek.com\" Subject \"TestSub\" Attachments \"NO\" Path \"\"\r"],
            "Name": "SendEmailSelectSender",
            "Params": ["BodyVarKey", "Address", "CCAddress", "Subject", "Attachment", "Path", "signatureVar"],
            "ShortDescription": "Send an email with multiple attachments from a given account.",
            "Syntax": ["SendEmailSelectSender <BodyVarKey> From \"<Sender>\" To \"<Address>\" Subject \"<Subject>\" Attachments \"<Attachment>\" Path \"<Path>\"", "SendEmailSelectSender <BodyVarKey> From \"<Sender>\" To \"<Address>\" CC \"<CCAddress>\" Subject \"<Subject>\" Attachments \"<Attachment>\" Path \"<Path>\"", "SendEmailSelectSender <BodyVarKey> From \"<Sender>\" To \"<Address>\" CC \"<CCAddress>\" Subject \"<Subject>\" Attachments \"<Attachment>\" Path \"<Path>\" Signature {\"<signatureVar>\"}", "SendEmailSelectSender <BodyVarKey> From \"<Sender>\" To \"<Address>;<Address>\" Subject \"<Subject>\" Attachments \"<Attachment1>,<Attachment2>\" Path \"<Path>\"", "SendEmailSelectSender <BodyVarKey> From \"<Sender>\" To \"<Address>;<Address>\" CC \"<CCAddress>;<CCAddress>\" Subject \"<Subject>\" Attachments \"<Attachment1>,<Attachment2>\" Path \"<Path>\""],
            "SyntaxDetail": [{
                "Instruction": "SendEmailSelectSender <BodyVarKey> From \"<Sender>\" To \"<Address>\" Subject \"<Subject>\" Attachments \"<Attachment>\" Path \"<Path>\""
            }, {
                "Instruction": "SendEmailSelectSender <BodyVarKey> From \"<Sender>\" To \"<Address>\" CC \"<CCAddress>\" Subject \"<Subject>\" Attachments \"<Attachment>\" Path \"<Path>\""
            }, {
                "Instruction": "SendEmailSelectSender <BodyVarKey> From \"<Sender>\" To \"<Address>\" CC \"<CCAddress>\" Subject \"<Subject>\" Attachments \"<Attachment>\" Path \"<Path>\" Signature {\"<signatureVar>\"}"
            }, {
                "Instruction": "SendEmailSelectSender <BodyVarKey> From \"<Sender>\" To \"<Address>;<Address>\" Subject \"<Subject>\" Attachments \"<Attachment1>,<Attachment2>\" Path \"<Path>\""
            }, {
                "Instruction": "SendEmailSelectSender <BodyVarKey> From \"<Sender>\" To \"<Address>;<Address>\" CC \"<CCAddress>;<CCAddress>\" Subject \"<Subject>\" Attachments \"<Attachment1>,<Attachment2>\" Path \"<Path>\""
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/MixedReader/SendEmailSelectSender0.mov"]
        }, {
            "CreationDate": "2018-Mar-02",
            "Description": "If the file exists in the path it will be uploaded to Azure at the end of the execution without generating an error if it doesn't exist.",
            "Example": ["SendFile C:\\Users\\andres.cruz\\Desktop\\file.txt\r", "sendfile C:\\Users\\andres.cruz\\Desktop\\file.txt\r"],
            "Name": "SendFile",
            "Params": ["FilePath"],
            "ShortDescription": "If the file exists in the path it will be uploaded to Azure at the end of the execution without generating an error if it doesn't exist.",
            "Syntax": ["SendFile <FilePath>", "sendfile <FilePath>"],
            "SyntaxDetail": [{
                "Instruction": "SendFile <FilePath>"
            }, {
                "Instruction": "sendfile <FilePath>"
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/MixedReader/SendFile0.mov"]
        }, {
            "CreationDate": "2021-Aug-25",
            "Description": "Sends an email to a list of email addresses. The subject and body must be set. Optionally, Multiple files can be included as attachment.",
            "Example": ["SendMail with the template \"ErrorMailTemplate\"\r", "SendMail with subject \"Test Send Mail\" to \"andres.cruz@softtek.com , gilberto.isida@softtek.com\" with body \"Test mail\"\r", "SendMail with subject \"Test Send Mail\" to \"andres.cruz@softtek.com\" with body \"Test mail\" and a file attachment \"C:\\Users\\user\\Downloads\\log.txt\"\r", "SendMail with subject \"Test Send Mail\" to \"andres.cruz@softtek.com\" with body \"Test mail\" and the file attachments \"C:\\Users\\user\\Downloads\\log.txt,C:\\Users\\user\\Documents\\Doc1.docx\"\r", "SendMail with subject \"Test Send Mail\" to \"andres.cruz@softtek.com , gilberto.isida@softtek.com\" with htmlbody \"<h1>Request processed</h1><br/><p>Your request was successfully processed by FRIDA.</p>\"\r", "SendMail with subject \"Test Send Mail\" to \"andres.cruz@softtek.com , gilberto.isida@softtek.com\" with htmlbody \"<h1>Request processed</h1><br/><p>Your request was successfully processed by FRIDA.</p>\" and the file attachments \"C:\\Users\\user\\Downloads\\log.txt,C:\\Users\\user\\Documents\\Doc1.docx\"\r"],
            "Name": "SendMail",
            "Params": ["Subject", "Mail", "Body", "FilePath", "TemplateName"],
            "ShortDescription": "Send an email to a list of email addresses.",
            "Syntax": ["SendMail with the template \"<TemplateName>\"", "SendMail with subject \"<Subject>\" to \"<Mail>\" with body \"<Body>\"", "SendMail with subject \"<Subject>\" to \"<Mail>\" with body \"<Body>\" and a file attachment \"<FilePath>\"", "SendMail with subject \"<Subject>\" to \"<Mail>\" with body \"<Body>\" and the file attachments \"<FilePath>,<FilePath>,...\"", "SendMail with subject \"<Subject>\" to \"<Mail>\" with htmlbody \"<Body>\"", "SendMail with subject \"<Subject>\" to \"<Mail>\" with htmlbody \"<Body>\" and a file attachment \"<FilePath>\"", "SendMail with subject \"<Subject>\" to \"<Mail>\" with htmlbody \"<Body>\" and a file attachment \"<FilePath>,<FilePath>,...\""],
            "SyntaxDetail": [{
                "Instruction": "SendMail with the template \"<TemplateName>\""
            }, {
                "Instruction": "SendMail with subject \"<Subject>\" to \"<Mail>\" with body \"<Body>\""
            }, {
                "Instruction": "SendMail with subject \"<Subject>\" to \"<Mail>\" with body \"<Body>\" and a file attachment \"<FilePath>\""
            }, {
                "Instruction": "SendMail with subject \"<Subject>\" to \"<Mail>\" with body \"<Body>\" and the file attachments \"<FilePath>,<FilePath>,...\""
            }, {
                "Instruction": "SendMail with subject \"<Subject>\" to \"<Mail>\" with htmlbody \"<Body>\""
            }, {
                "Instruction": "SendMail with subject \"<Subject>\" to \"<Mail>\" with htmlbody \"<Body>\" and a file attachment \"<FilePath>\""
            }, {
                "Instruction": "SendMail with subject \"<Subject>\" to \"<Mail>\" with htmlbody \"<Body>\" and a file attachment \"<FilePath>,<FilePath>,...\""
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/MixedReader/SendMail0.mov"]
        }, {
            "CreationDate": "2021-Aug-06",
            "Description": "Sends a Mail using the given notification template which was previously defined using the \"Notification\" tab.",
            "Example": ["SendNotification \"DefaultNotificationTemplate1\"\r"],
            "Name": "SendNotification",
            "Params": ["NotificationTemplate"],
            "ShortDescription": "Sends a Mail using the given notification template.",
            "Syntax": ["SendNotification \"<NotificationTemplate>\""],
            "SyntaxDetail": [{
                "Instruction": "SendNotification \"<NotificationTemplate>\""
            }]
        }, {
            "CreationDate": "2021-Apr-15",
            "Description": "Send an email to a single receiver using the SMTP protocol. The body message can be in HTML. Use optional parameter Attachments to include comma-separated file paths to be attached to the mail. Use optional parameters CC or BCC to add comma-separated carbon copy recipients. Unless explicitly specified, the host will be smtp.office365.com  through the port 587.",
            "Example": ["SendSMTP From={Mail:innovation@softtek.com, Pass:MyPassword} To={username@company.com} Subject={SMTP Test Mail} Body={This is a test message}\r", "SendSMTP From={Mail:innovation@softtek.com, Pass:MyPassword} To={username@company.com} Subject={SMTP Test Mail} Body={This is a test message} Attachments={C:\\Users\\Desktop\\ExcelFile1.xlsx,C:\\Users\\Desktop\\ExcelFile2.xlsx} CC={username2@company.com,username4@othercompany.com} BCC={support@company.com}\r", "SendSMTP Host={smtp.office365.com} Port={587} From={Mail:innovation@softtek.com, Pass:MyPassword} To={username@company.com} Subject={SMTP Test Mail} Body={This is a test message}\r", "SendSMTP Host={smtp.office365.com} Port={587} From={Mail:innovation@softtek.com, Pass:MyPassword} To={username@company.com} Subject={SMTP Test Mail} Body={This is a test message} Attachments={C:\\Users\\Desktop\\ExcelFile1.xlsx,C:\\Users\\Desktop\\ExcelFile2.xlsx} CC={username2@company.com,username4@othercompany.com} BCC={support@company.com}\r"],
            "Name": "SendSMTP",
            "Params": ["Mail", "Password", "DestinyMail", "Subject", "Body", "host", "port", "FilePath", "CCMail", "BCCMail"],
            "ShortDescription": "Send an email through the SMTP protocol.",
            "Syntax": ["SendSMTP From={Mail:<Mail>, Pass:<Password>} To={<DestinyMail1>,<DestinyMail2>,...,<DestinyMailN>} Subject={<Subject>} Body={<Body>} Attachments={<FilePath1>,<FilePath2>,...,<FilePathN>} CC={<CCMail1>,<CCMail2>,...,<CCMailN>} BCC={<BCCMail1>,<BCCMail2>,...,<BCCMailN>}", "SendSMTP Host={<host>} Port={<port>} From={Mail:<Mail>, Pass:<Password>} To={<DestinyMail1>,<DestinyMail2>,...,<DestinyMailN>} Subject={<Subject>} Body={<Body>} Attachments={<FilePath1>,<FilePath2>,...,<FilePathN>} CC={<CCMail1>,<CCMail2>,...,<CCMailN>} BCC={<BCCMail1>,<BCCMail2>,...,<BCCMailN>}"],
            "SyntaxDetail": [{
                "Instruction": "SendSMTP From={Mail:<Mail>, Pass:<Password>} To={<DestinyMail1>,<DestinyMail2>,...,<DestinyMailN>} Subject={<Subject>} Body={<Body>} Attachments={<FilePath1>,<FilePath2>,...,<FilePathN>} CC={<CCMail1>,<CCMail2>,...,<CCMailN>} BCC={<BCCMail1>,<BCCMail2>,...,<BCCMailN>}"
            }, {
                "Instruction": "SendSMTP Host={<host>} Port={<port>} From={Mail:<Mail>, Pass:<Password>} To={<DestinyMail1>,<DestinyMail2>,...,<DestinyMailN>} Subject={<Subject>} Body={<Body>} Attachments={<FilePath1>,<FilePath2>,...,<FilePathN>} CC={<CCMail1>,<CCMail2>,...,<CCMailN>} BCC={<BCCMail1>,<BCCMail2>,...,<BCCMailN>}"
            }]
        }, {
            "CreationDate": "2021-Jun-03",
            "Description": "Sends a message request to a specified teams webhook, the request contains an optional title and the text of the message (in markdown)",
            "Example": ["SendTeamsMessage url={https://webhookurl.com} message={How are you?}\r", "SendTeamsMessage url={https://webhookurl.com} title={Example title} message={# Hello!}\r"],
            "ExtraDocs": "https://innotekfilestore.file.core.windows.net/frida-docs/Readers/Mixed/Articles/SendTeamsMessage.pdf",
            "Name": "SendTeamsMessage",
            "Params": ["url", "title", "message"],
            "ShortDescription": "Sends a message to a teams channel via webhook",
            "Syntax": ["SendTeamsMessage url={<url>} message={<message>}", "SendTeamsMessage url={<url>} title={<title>} message={<message>}"],
            "SyntaxDetail": [{
                "Instruction": "SendTeamsMessage url={<url>} message={<message>}"
            }, {
                "Instruction": "SendTeamsMessage url={<url>} title={<title>} message={<message>}"
            }]
        }, {
            "CreationDate": "2020-Jul-13",
            "Description": "If the variable exists in the process it will be uploaded to the FRIDA database at the end of the execution without generating an error if it doesn't exist. The variable will be will be displayed as a string in the process analytics dashboard.",
            "Example": ["SendVariable \"DocumentosProcesados\"\r", "sendvariable \"NumeroDeIncidencias\"\r", "Sendvariable \"CorreosIdentificados\"\r", "sendVariable \"NumeroDeIncidente\"\r"],
            "Name": "SendVariable",
            "Params": ["VariableName"],
            "ShortDescription": "Upload a variable to the FRIDA database at the end of the execution without generating an error if it doesn't exist. The variable will be displayed as a string in the process analytics dashboard.",
            "Syntax": ["SendVariable \"<VariableName>\""],
            "SyntaxDetail": [{
                "Instruction": "SendVariable \"<VariableName>\""
            }]
        }, {
            "CreationDate": "2020-Nov-04",
            "Description": "[BETA] This function changes the Culture provider that allows the machine's understanding of dates and numbers (decimal and thousand separator). This is still under consideration, and not generally available.",
            "Example": ["SetCulture en-US\r", "SetCulture es-MX\r", "SetCulture es-ES\r", "SetCulture es-CL\r", "SetCulture pt-BR\r"],
            "Name": "SetCulture",
            "Params": ["cultureName"],
            "ShortDescription": "[BETA] Change the current thread's Culture, for interpreting dates and numbers.",
            "Syntax": ["SetCulture <cultureName>"],
            "SyntaxDetail": [{
                "Instruction": "SetCulture <cultureName>"
            }]
        }, {
            "CreationDate": "2022-Sep-21",
            "Description": "Changes the amount of information written in the log. Levels are Verbose, Log, OnlyErrors and Off. By default it is in Verbose. \\nLog level shows only RPAs initial general information, entry points in functions and result (Success, Error), as well as logical structure logs. \\nOnlyErrors will only show error detail if any. \\nOff will turn log printing off until stated otherwise.",
            "Example": ["SetLogLevel Off\r", "SetLogLevel OnlyErrors\r"],
            "Name": "SetLogLevel",
            "Params": ["level"],
            "ShortDescription": "Change level of detail in log.",
            "Syntax": ["SetLogLevel <level:Verbose|Log|OnlyErrors|Off>"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["Verbose", "Log", "OnlyErrors", "Off"],
                    "ParamName": "level"
                }],
                "Instruction": "SetLogLevel <level:Verbose|Log|OnlyErrors|Off>"
            }]
        }, {
            "CreationDate": "2021-Mar-08",
            "Description": "Setting a timeout will enable a rule that terminates the execution if the specified time exceeds. When we reach the timeout, the ongoing instruction is allowed to end before throwing an error.",
            "Example": ["SetRunTimeout 0 0 30\r", "SetRunTimeout 1 30 0\r"],
            "Name": "SetRunTimeout",
            "Params": ["hours", "minutes", "seconds"],
            "ShortDescription": "Limit the time an automation will be allowed to run.",
            "Syntax": ["SetRunTimeout <hours> <minutes> <seconds>"],
            "SyntaxDetail": [{
                "Instruction": "SetRunTimeout <hours> <minutes> <seconds>"
            }]
        }, {
            "CreationDate": "2020-Nov-04",
            "Description": "[BETA] Sets a runtime configuration parameter, for deciding how to save the variable values. Select \"infer\" to use the current Culture Provider and parse the value to an appropriate numeric or DateTime object. Select \"object\" to save the variable AS-IS, with no parsing applied. This is still under consideration, and not generally available.",
            "Example": ["SetVarMode object\r", "SetVarMode infer\r"],
            "Name": "SetVarMode",
            "Params": ["mode"],
            "ShortDescription": "[BETA] Enable or disable the CultureProvider when saving variables.",
            "Syntax": ["SetVarMode <mode>"],
            "SyntaxDetail": [{
                "Instruction": "SetVarMode <mode>"
            }]
        }, {
            "CreationDate": "2021-Nov-17",
            "Description": "Change the permissions of a file in an FTP directory, mode should be written in octal representation.",
            "Example": ["SFTP Change Permissions host={frida.server.com} user={frida} password={********} file path={/FRIDA_Files/File.txt} mode={0777}\r", "SFTP Change Permissions host={frida.server.com} port={4222} user={frida} password={********} file path={/FRIDA_Files/File.txt} mode={0777}\r"],
            "Name": "SFTP Change Permissions",
            "Params": ["host", "port", "user", "password", "file", "path", "mode"],
            "ShortDescription": "Change the permissions of a file in an FTP directory.",
            "Syntax": ["SFTP Change Permissions host={<host>} user={<UserName>} password={<Password>} file path={<FilePath>} mode={<mode>}", "SFTP Change Permissions host={<host>} port={<port>} user={<UserName>} password={<Password>} file path={<FilePath>} mode={<mode>}"],
            "SyntaxDetail": [{
                "Instruction": "SFTP Change Permissions host={<host>} user={<UserName>} password={<Password>} file path={<FilePath>} mode={<mode>}"
            }, {
                "Instruction": "SFTP Change Permissions host={<host>} port={<port>} user={<UserName>} password={<Password>} file path={<FilePath>} mode={<mode>}"
            }]
        }, {
            "CreationDate": "2021-Dec-16",
            "Description": "Create a directory in an FTP server, if multiple levels are needed the instruction will create them recursively.",
            "Example": ["SFTP Create Directories host={frida.server.com} user={frida} password={********} directory={/FRIDA_Files/Scripts/RPA/Execute/}\r", "SFTP Create Directories host={frida.server.com} port={4222} user={frida} password={********} directory={/FRIDA_Files/Scripts/RPA/Execute/}\r", "SFTP Create Directories host={frida.server.com} port={4222} user={frida} password={********} directory={/FRIDA_Files/Scripts/RPA/Execute/}\r"],
            "Name": "SFTP Create Directory",
            "Params": ["host", "user", "password", "directory", "port"],
            "ShortDescription": "Create a directory in an FTP server, if multiple levels are needed the instruction will create them recursively.",
            "Syntax": ["SFTP Create Directories host={<Host>} user={<UserName>} password={<Password>} directory={<Directory>}", "SFTP Create Directories host={<Host>} port={<Port>} user={<UserName>} password={<Password>} directory={<Directory>}"],
            "SyntaxDetail": [{
                "Instruction": "SFTP Create Directories host={<Host>} user={<UserName>} password={<Password>} directory={<Directory>}"
            }, {
                "Instruction": "SFTP Create Directories host={<Host>} port={<Port>} user={<UserName>} password={<Password>} directory={<Directory>}"
            }]
        }, {
            "CreationDate": "2021-Nov-16",
            "Description": "Download a file to a local directory from an FTP server. If the local directory does not exist, it is created.",
            "Example": ["SFTP Download host={frida.server.com} user={frida} password={********} remote location={/FRIDA_Files/transactions/} file name={TextFile.txt} local destination={C:\\Users\\frida\\Desktop\\DestinyFolder}\r", "SFTP Download host={frida.server.com} port={4222} user={frida} password={********} remote location={/FRIDA_Files/transactions/} file name={TextFile.txt} local destination={C:\\Users\\frida\\Desktop\\DestinyFolder}\r"],
            "Name": "SFTP Download",
            "Params": ["host", "port", "user", "password", "fileName", "destinyFolderName", "originFolderName"],
            "ShortDescription": "Download a file from an FTP server.",
            "Syntax": ["SFTP Download host={<host>} user={<userName>} password={<password>} remote location={<originFolderName>} file name={<fileName>} local destination={<destinyFolderName>}", "SFTP Download host={<host>} port={<port>} user={<userName>} password={<password>} remote location={<originFolderName>} file name={<fileName>} local destination={<destinyFolderName>}"],
            "SyntaxDetail": [{
                "Instruction": "SFTP Download host={<host>} user={<userName>} password={<password>} remote location={<originFolderName>} file name={<fileName>} local destination={<destinyFolderName>}"
            }, {
                "Instruction": "SFTP Download host={<host>} port={<port>} user={<userName>} password={<password>} remote location={<originFolderName>} file name={<fileName>} local destination={<destinyFolderName>}"
            }]
        }, {
            "CreationDate": "2021-Nov-16",
            "Description": "List all the directories and files from an FTP Location, output will be stored in a list named \"Output\".",
            "Example": ["SFTP List host={frida.server.com} user={frida} password={*******} location={/FRIDA_Files/}\r", "SFTP List host={frida.server.com} port={4222} user={frida} password={*******} location={/FRIDA_Files/}\r"],
            "Name": "SFTP List",
            "Params": ["host", "port", "user", "password", "folder", "name"],
            "ShortDescription": "List all the directories and files from an FTP Location.",
            "Syntax": ["SFTP List host={<host>} user={<UserName>} password={<Password>} location={<FolderName>}", "SFTP List host={<host>} port={<port>} user={<UserName>} password={<Password>} location={<FolderName>}"],
            "SyntaxDetail": [{
                "Instruction": "SFTP List host={<host>} user={<UserName>} password={<Password>} location={<FolderName>}"
            }, {
                "Instruction": "SFTP List host={<host>} port={<port>} user={<UserName>} password={<Password>} location={<FolderName>}"
            }]
        }, {
            "CreationDate": "2020-Oct-11",
            "Description": "Upload a file to a remote FTP server.",
            "Example": ["SFTP Upload host={frida.server.com} user={frida} password={*********} location={/FRIDA_Files/} file={C:\\Users\\frida\\Desktop\\Samples\\sample1.xlsx}\r", "SFTP Upload host={frida.server.com} port={4222} user={frida} password={*********} location={/FRIDA_Files/} file={C:\\Users\\frida\\Desktop\\Samples\\sample1.xlsx}\r"],
            "Name": "SFTP Upload",
            "Params": ["host", "userName", "password", "destinationFolder", "filetoUpload", "port"],
            "ShortDescription": "Upload a file to a remote FTP server.",
            "Syntax": ["SFTP Upload host={<host>} user={<userName>} password={<password>} location={<destinationFolder>} file={<filetoUpload>}", "SFTP Upload host={<host>} port={<port>} user={<userName>} password={<password>} location={<destinationFolder>} file={<filetoUpload>}"],
            "SyntaxDetail": [{
                "Instruction": "SFTP Upload host={<host>} user={<userName>} password={<password>} location={<destinationFolder>} file={<filetoUpload>}"
            }, {
                "Instruction": "SFTP Upload host={<host>} port={<port>} user={<userName>} password={<password>} location={<destinationFolder>} file={<filetoUpload>}"
            }]
        }, {
            "CreationDate": "2019-Dec-05",
            "Description": "(THIS IS NOT ENCRYPTION) Hashes a string using this class reference https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.sha1cryptoserviceprovider?view=netframework-4.8. The result will be saved in a new variable named \"shaString\".",
            "Example": ["SHA1 HelloWorld\r"],
            "Name": "SHA1",
            "Params": ["yourString"],
            "ShortDescription": "Hashes a string.",
            "Syntax": ["SHA1 <yourString>"],
            "SyntaxDetail": [{
                "Instruction": "SHA1 <yourString>"
            }]
        }, {
            "CreationDate": "2020-Jul-02",
            "Description": "Prints aditional information of instructions in the log. By default it is On. If turned off, it will no longer show the list values when extracted by some instructions. ",
            "Example": ["ShowLogInfo Off\r"],
            "Name": "ShowLogInfo",
            "Params": ["showState"],
            "ShortDescription": "Turn verbose printing of aditional information of some instructions in the log.",
            "Syntax": ["ShowLogInfo <showState:On|Off>"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["On", "Off"],
                    "ParamName": "showState"
                }],
                "Instruction": "ShowLogInfo <showState:On|Off>"
            }]
        }, {
            "CreationDate": "2019-Jun-27",
            "Description": "Calls an external SOAP WebService. It can contain Basic auth, and request params. An xml template is required. The response is saved as a plain string. See ExtraDocs for more details.",
            "Example": ["SOAP url={\"http://frida.example.com\"} template={\"ReqFromSOAP.txt\"} params={\"SomeParam\":\"XYUSZ\"} tls={true} and save as WSResponse\r", "SOAP url={\"https://sub.domain.abc/XISOAPAdapter/MessageServlet?channel=:CHAT_INNOVATION_DEV\"} template={\"c:\\\\Users\\\\gilberto.isida\\\\Downloads\\\\wsTemplate.txt\"} auth=Basic{\"user\":\"Usr123\", \"pass\":\"MyPa$$\"} and save as res\r", "SOAP url={\"https://sub.domain.abc/Service\"} template={\"c:\\\\Users\\\\gilberto.isida\\\\Downloads\\\\wsTemplate.txt\"} params={\"question_Id\":\"Citi_01\", \"mail_phone\":\"gilberto.isida@softtek.com\"} and save as res\r", "SOAP url={\"https://sub.domain.abc/Service?channel=:CHAT\"} template={\"c:\\\\Users\\\\gilberto.isida\\\\Downloads\\\\wsTemplate.txt\"} auth=Basic{\"user\":\"Usr123\", \"pass\":\"MyPa$$\"} params={\"question_Id\":\"Citi_01\",\"mail_phone\":\"gilberto.isida@softtek.com\"} and save as res\r"],
            "ExtraDocs": "https://innotekfilestore.file.core.windows.net/frida-docs/Readers/Mixed/Articles/SOAP.pdf",
            "Name": "SOAP",
            "Params": ["theURL", "xmlBodyTemplate", "userName", "thePass", "responseName", "hostAddress", "h1", "h2", "val1", "val2"],
            "ShortDescription": "Call an external SOAP WebService.",
            "Syntax": ["SOAP url={\"<theURL>\"} template={\"<xmlBodyTemplate>\"} and save as <responseName>", "SOAP url={\"<theURL>\"} template={\"<xmlBodyTemplate>\"} params=<jsonParams> and save as <responseName>", "SOAP url={\"<theURL>\"} template={\"<xmlBodyTemplate>\"} host={<hostAddress>} params=<jsonParams> and save as <responseName>", "SOAP url={\"<theURL>\"} template={\"<xmlBodyTemplate>\"} host={<hostAddress>} params=<jsonParams> tls={true} and save as <responseName>", "SOAP url={\"<theURL>\"} template={\"<xmlBodyTemplate>\"} host={<hostAddress>} headers={\"<h1>\":\"<val1>\", \"<h2>\":\"<val2>\"} params=<jsonParams> and save as <responseName>", "SOAP url={\"<theURL>\"} template={\"<xmlBodyTemplate>\"} auth=Basic{\"user\":\"<userName>\", \"pass\":\"<thePass>\"} and save as <responseName>", "SOAP url={\"<theURL>\"} template={\"<xmlBodyTemplate>\"} auth=Basic{\"user\":\"<userName>\", \"pass\":\"<thePass>\"} params=<jsonParams> and save as <responseName>"],
            "SyntaxDetail": [{
                "Instruction": "SOAP url={\"<theURL>\"} template={\"<xmlBodyTemplate>\"} and save as <responseName>"
            }, {
                "Instruction": "SOAP url={\"<theURL>\"} template={\"<xmlBodyTemplate>\"} params=<jsonParams> and save as <responseName>"
            }, {
                "Instruction": "SOAP url={\"<theURL>\"} template={\"<xmlBodyTemplate>\"} host={<hostAddress>} params=<jsonParams> and save as <responseName>"
            }, {
                "Instruction": "SOAP url={\"<theURL>\"} template={\"<xmlBodyTemplate>\"} host={<hostAddress>} params=<jsonParams> tls={true} and save as <responseName>"
            }, {
                "Instruction": "SOAP url={\"<theURL>\"} template={\"<xmlBodyTemplate>\"} host={<hostAddress>} headers={\"<h1>\":\"<val1>\", \"<h2>\":\"<val2>\"} params=<jsonParams> and save as <responseName>"
            }, {
                "Instruction": "SOAP url={\"<theURL>\"} template={\"<xmlBodyTemplate>\"} auth=Basic{\"user\":\"<userName>\", \"pass\":\"<thePass>\"} and save as <responseName>"
            }, {
                "Instruction": "SOAP url={\"<theURL>\"} template={\"<xmlBodyTemplate>\"} auth=Basic{\"user\":\"<userName>\", \"pass\":\"<thePass>\"} params=<jsonParams> and save as <responseName>"
            }]
        }, {
            "CreationDate": "2019-Nov-04",
            "Description": "Divide a text value into a list with various texts according to a given character that separates.",
            "Example": ["SplitIntoList the value \"<<<Data>>>\" every \"$\" character and save as a list \"MyList\"\r"],
            "Name": "SplitIntoList",
            "Params": ["Text", "Character", "ListVariableName"],
            "ShortDescription": "Divide a text into a list considering a separation character.",
            "Syntax": ["SplitIntoList the value \"<Text>\" every \"<Character>\" character and save as a list \"<ListVariableName>\""],
            "SyntaxDetail": [{
                "Instruction": "SplitIntoList the value \"<Text>\" every \"<Character>\" character and save as a list \"<ListVariableName>\""
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/MixedReader/SplitIntoList0.mov"]
        }, {
            "CreationDate": "2020-Aug-05",
            "Description": "Send a command or script by SSH to a host machine.",
            "Example": ["SSH {command.txt} host={40.114.13.15} user={DAFS2} pass={********}\r"],
            "Name": "SSH",
            "Params": ["commandFile", "host", "userName", "password"],
            "ShortDescription": "Send a command or script by SSH to a host machine. If result variables are needed, make sure it prints something such as \"myvariable : a value\".",
            "Syntax": ["SSH {<commandFile>} host={<host>} user={<userName>} pass={<password>}"],
            "SyntaxDetail": [{
                "Instruction": "SSH {<commandFile>} host={<host>} user={<userName>} pass={<password>}"
            }]
        }, {
            "CreationDate": "2021-Sep-10",
            "Description": "Change the string to either \"Title Case\", \"PascalCase\", \"camelCase\", \"snake_case\" or \"kebab-case\" and save it in a variable.",
            "Example": ["StringCase input variable={mes} case={title} out={TitleMes}\r", "StringCase input={\"<<<FileName>>><<<Month>>>.txt\"} case={snake} out={FileName}\r"],
            "Name": "StringCase",
            "Params": ["input", "inputVarName", "caseType", "outputVarName"],
            "ShortDescription": "Change a string casing and save it in a variable.",
            "Syntax": ["StringCase input variable={<inputVarName>} case={<caseType:title|snake|camel|pascal|kebab>} out={<outputVarName>}", "StringCase input={<input>} case={<caseType:title|snake|camel|pascal|kebab>} out={<outputVarName>}"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["title", "snake", "camel", "pascal", "kebab"],
                    "ParamName": "caseType"
                }],
                "Instruction": "StringCase input variable={<inputVarName>} case={<caseType:title|snake|camel|pascal|kebab>} out={<outputVarName>}"
            }, {
                "Constants": [{
                    "Options": ["title", "snake", "camel", "pascal", "kebab"],
                    "ParamName": "caseType"
                }],
                "Instruction": "StringCase input={<input>} case={<caseType:title|snake|camel|pascal|kebab>} out={<outputVarName>}"
            }]
        }, {
            "CreationDate": "2019-Feb-28",
            "Description": "Parses a string variable and saves it as a List, so it can be used within a foreach loop. The source variable must be a JSON encoded array. In this example json is a string like this \"[1,2,3,4]\".",
            "Example": ["StringToList json and save as lista\r"],
            "Name": "StringToList",
            "Params": ["varname", "listName"],
            "ShortDescription": "Parses a string variable and saves it as a List.",
            "Syntax": ["StringToList <varName> and save as <listName>"],
            "SyntaxDetail": [{
                "Instruction": "StringToList <varName> and save as <listName>"
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/MixedReader/StringToList0.mov"]
        }, {
            "CreationDate": "2019-Dec-09",
            "Description": "Extracts part of the content of a string, given the input and the startIndex. Optionally, you can ask for a length. Given the string \"Hello world!\", a substring starting in 4 will return \"o world!\"; and a substring with length 4 will return \"o wor\".",
            "Example": ["Substring \"Hello world!\" start 0 and save as \"subString\"\r", "Substring \"Hello world\" start 3 length 5 and save as \"newString\"\r"],
            "Name": "Substring",
            "Params": ["inputString", "startIndex", "stringLength", "newVarName"],
            "ShortDescription": "Extract part of the content of a string.",
            "Syntax": ["Substring \"<inputString>\" start <startIndex> and save as \"<newVarName>\"", "Substring \"<inputString>\" start <startIndex> length <stringLength> and save as \"<newVarName>\""],
            "SyntaxDetail": [{
                "Instruction": "Substring \"<inputString>\" start <startIndex> and save as \"<newVarName>\""
            }, {
                "Instruction": "Substring \"<inputString>\" start <startIndex> length <stringLength> and save as \"<newVarName>\""
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/MixedReader/Substring0.mov"]
        }, {
            "CreationDate": "2021-Oct-01",
            "Description": "Control statement that executes a set of logic reader instructions based on the result of a variable or statment define in the switch block",
            "Example": ["switch (<<<docName>>>-<<entity>>) {\r"],
            "Name": "SWITCH",
            "Params": ["Case", "expression", "Case", "value"],
            "Syntax": ["switch (<Case_expression>) {"],
            "SyntaxDetail": [{
                "Instruction": "switch (<Case_expression>) {"
            }]
        }, {
            "CreationDate": "2019-Feb-26",
            "Description": "Generates a Windows pop-up notification. The notifications can be of two types: Validation and Notification. \"Validation\" means that a user must either accept or cancel the process that is running. \"Notification\" means that the pop-up will only be informative and the process will continue its execution after the pop-up is closed. Warning, do not use when using browpet instructions.",
            "Example": ["SystemNotify Type \"Notification\" with message \"Test Message\"\r", "SystemNotify Type \"Validation\" with message \"Test Message\"\r"],
            "Name": "SystemNotify",
            "Params": ["Message"],
            "ShortDescription": "Generate a Windows pop-up notification.",
            "Syntax": ["SystemNotify Type \"Notification\" with message \"<Message>\"", "SystemNotify Type \"Validation\" with message \"<Message>\""],
            "SyntaxDetail": [{
                "Instruction": "SystemNotify Type \"Notification\" with message \"<Message>\""
            }, {
                "Instruction": "SystemNotify Type \"Validation\" with message \"<Message>\""
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/MixedReader/SystemNotify0.mov"]
        }, {
            "CreationDate": "2018-Jun-27",
            "Description": "Reads preferably an html mail body template and stores it in theVariablesHelper.vars dictionary with the name defined in TempVar. File must exist in the Path given. Inside the template, var dictionary names can be set, these will be replaced using the CreateMailFrom statement.",
            "Example": ["TemplateFrom \"C:\\Users\\MailTemplates\\\" TemplateName \"InviteTemplate.html\" As plantilla\r"],
            "Name": "TemplateFrom",
            "Params": ["Path", "TemplateFile", "TempVar"],
            "ShortDescription": "Read preferably an html mail body template and save it as a variable. ",
            "Syntax": ["TemplateFrom \"<Path>\" TemplateName \"<TemplateFile>\" As <TempVar>"],
            "SyntaxDetail": [{
                "Instruction": "TemplateFrom \"<Path>\" TemplateName \"<TemplateFile>\" As <TempVar>"
            }]
        }, {
            "CreationDate": "2019-Dec-06",
            "Description": "Removes the leading and trailing blank spaces of a string variable. You must pass the name of the desired variable (not the value). If no newVarName is given, the result of the trimming will replace the original value for the variable.",
            "Example": ["Trim prodCode\r", "Trim prodCode and save as trimmedCode\r"],
            "Name": "Trim",
            "Params": ["yourVarName", "newVarName"],
            "ShortDescription": "Remove the leading and trailing blank spaces of a string variable.",
            "Syntax": ["Trim <yourVarName>", "Trim <yourVarName> and save as <newVarName>"],
            "SyntaxDetail": [{
                "Instruction": "Trim <yourVarName>"
            }, {
                "Instruction": "Trim <yourVarName> and save as <newVarName>"
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/MixedReader/Trim0.mov"]
        }, {
            "CreationDate": "2021-Sep-29",
            "Description": "Removes a character or characters that contain a string variable, at the beginning, at the end, or both sides. You must pass the name of the desired variable (not the value). If newVarName is not given, the result of the cropping will replace the original value of the variable.",
            "Example": ["TrimChar mode={start} chars=[\"0\"] input={miVarInput} output={miVarOutput}\r", "TrimChar mode={end} chars=[\"0\",\"-\"] input={miVarInput} output={miVarOutput}\r", "TrimChar mode={both} chars=[\"*\",\"#\",\"'\",\"0\",\"1\",\" \",\"-\",\"\\n\",\"\\t\"] input={miVarInput} output={miVarOutput}\r"],
            "Name": "TrimChar",
            "Params": ["type", "searchchar", "varinput", "varoutput"],
            "ShortDescription": "Remove a character from a string variable.",
            "Syntax": ["TrimChar mode={<type: start|end|both>} chars=[<searchchar>] input={<varinput>} output={<varoutput>}"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": [" start", "end", "both"],
                    "ParamName": "type"
                }],
                "Instruction": "TrimChar mode={<type: start|end|both>} chars=[<searchchar>] input={<varinput>} output={<varoutput>}"
            }]
        }, {
            "CreationDate": "2019-Nov-15",
            "Description": "Delete the last n characters from a string and save it as a given variable.",
            "Example": ["TrimLast \"4\" characters from the value \"<<<myLongWord>>>\" and save as \"myShorterWord\"\r"],
            "Name": "TrimLast",
            "Params": ["Number", "Text", "VariableName"],
            "ShortDescription": "Delete the last n characters from a string and save it as a given variable.",
            "Syntax": ["TrimLast \"<Number>\" characters from the value \"<Text>\" and save as \"<VariableName>\""],
            "SyntaxDetail": [{
                "Instruction": "TrimLast \"<Number>\" characters from the value \"<Text>\" and save as \"<VariableName>\""
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/MixedReader/TrimLast0.mov"]
        }, {
            "CreationDate": "2021-Jan-26",
            "Description": "Removes the leading and trailing blank spaces of all the items of a list. You must pass the name of the desired variable (not the value). If no newVarName is given, the result of the trimming will replace the original value for the variable.",
            "Example": ["TrimList prodCode\r", "TrimList prodCode and save as trimmedCode\r"],
            "Name": "TrimList",
            "Params": ["yourVarName", "newVarName"],
            "ShortDescription": "Remove the leading and trailing blank spaces of every string item of a list.",
            "Syntax": ["TrimList <yourVarName>", "TrimList <yourVarName> and save as <newVarName>"],
            "SyntaxDetail": [{
                "Instruction": "TrimList <yourVarName>"
            }, {
                "Instruction": "TrimList <yourVarName> and save as <newVarName>"
            }]
        }, {
            "CreationDate": "2020-Aug-21",
            "Description": "If the file exists in the path it will be uploaded to Azure to the process CustomLocal folder updating the file template. The file Located at the process CustomLocal folder will be versioned by FRIDA, being downloaded every time the file changes an is uploaded.",
            "Example": ["UpdateTemplate \"C:\\Users\\andres.cruz\\Desktop\\file.txt\"\r", "UpdateTemplate \"C:\\Users\\andres.cruz\\Desktop\\file.xlsx\"\r"],
            "Name": "UpdateTemplate",
            "Params": ["FilePath"],
            "ShortDescription": "Update de CustomLocal template in the cloud.",
            "Syntax": ["UpdateTemplate \"<FilePath>\""],
            "SyntaxDetail": [{
                "Instruction": "UpdateTemplate \"<FilePath>\""
            }]
        }, {
            "CreationDate": "2019-Dec-09",
            "Description": "Make a string uppercase and save it in a variable.",
            "Example": ["Uppercase \"someString, whatever you need\" and save as \"upper\"\r"],
            "Name": "Uppercase",
            "Params": ["aString", "newVarName"],
            "ShortDescription": "Make a string uppercase and save it in a variable.",
            "Syntax": ["Uppercase \"<aString>\" and save as \"<newVarName>\""],
            "SyntaxDetail": [{
                "Instruction": "Uppercase \"<aString>\" and save as \"<newVarName>\""
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/MixedReader/Uppercase0.mov"]
        }, {
            "CreationDate": "2020-Nov-10",
            "Description": "Run a VBS Script. The script does not use Turing variables.",
            "Example": ["UseVBAlpha innerprocess.vbs\r"],
            "Name": "UseVBAlpha",
            "Params": ["Script"],
            "ShortDescription": "Run a VBS Script. ",
            "Syntax": ["UseVBAlpha <Script>.vbs"],
            "SyntaxDetail": [{
                "Instruction": "UseVBAlpha <Script>.vbs"
            }]
        }, {
            "CreationDate": "2019-Nov-07",
            "Description": "Loops a code fragment for an undefined amount of times allowing to be executed repeatedly based on a given Boolean condition. Uses the logical operators <, >, >=, <=, ==, !=",
            "Example": ["while (a < b)\r", "while (a >= b)\r", "while (a == b)\r", "while (a != b)\r"],
            "ExtraDocs": "https://innotekfilestore.file.core.windows.net/frida-docs/Readers/Mixed/Articles/While.pdf",
            "Name": "While",
            "Params": ["booleanExpression"],
            "Syntax": ["while (<booleanExpression>)"],
            "SyntaxDetail": [{
                "Instruction": "while (<booleanExpression>)"
            }]
        }, {
            "CreationDate": "2020-Apr-21",
            "Description": "Writes all the lines contained in a variable (of type LIST), to a file. It creates the file if it does not exist yet.",
            "Example": ["WriteAllLines var = \"username\" path = \"C:\\Users\\gilberto.isida\\Downloads\\file.txt\"\r", "WriteAllLines from the variable \"TicketList\" in the file \"C:\\Users\\andres.cruz\\Downloads\\Result.txt\"\r"],
            "Name": "WriteAllLines",
            "Params": ["variableName", "savePath"],
            "ShortDescription": "Writes all the lines in a list variable to a file.",
            "Syntax": ["WriteAllLines var=\"<variableName>\" path=\"<savePath>\"", "WriteAllLines from the variable \"<variableName>\" in the file \"<savePath>\""],
            "SyntaxDetail": [{
                "Instruction": "WriteAllLines var=\"<variableName>\" path=\"<savePath>\""
            }, {
                "Instruction": "WriteAllLines from the variable \"<variableName>\" in the file \"<savePath>\""
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/MixedReader/WriteAllLines0.mov"]
        }, {
            "CreationDate": "2020-Apr-21",
            "Description": "Writes all the text contained in a variable to a file. It creates the file if it does not exist yet.",
            "Example": ["WriteAllText var=\"username\" path=\"C:\\Users\\gilberto.isida\\Downloads\\file.txt\"\r", "WriteAllText from the variable \"UserNames\" in the file \"C:\\Users\\andres.cruz\\Downloads\\Users.txt\"\r", "WriteAllText from the variable \"IsonUserNames\" in the file \"C:\\Users\\andres.cruz\\Downloads\\Users.txt\" -isJSON\r"],
            "Name": "WriteAllText",
            "Params": ["varName", "savePath"],
            "ShortDescription": "Writes all the text from a variable to a file.",
            "Syntax": ["WriteAllText var=\"<varName>\" path=\"<savePath>\"", "WriteAllText var=\"<varName>\" path=\"<savePath>\" -isJSON", "WriteAllText from the variable \"<varName>\" in the file \"<savePath>\"", "WriteAllText from the variable \"<varName>\" in the file \"<savePath>\" -isJSON"],
            "SyntaxDetail": [{
                "Instruction": "WriteAllText var=\"<varName>\" path=\"<savePath>\""
            }, {
                "Instruction": "WriteAllText var=\"<varName>\" path=\"<savePath>\" -isJSON"
            }, {
                "Instruction": "WriteAllText from the variable \"<varName>\" in the file \"<savePath>\""
            }, {
                "Instruction": "WriteAllText from the variable \"<varName>\" in the file \"<savePath>\" -isJSON"
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/MixedReader/WriteAllText0.mov"]
        }, {
            "CreationDate": "2021-Apr-13",
            "Description": "Extracts the value of a XML variable in the dictionary and saves it in another one as a Json with the list portion of the xml ",
            "Example": ["XMLQuery \"txtxml\" where \"/default:AttachedDocument/cac:SenderParty/cac:PartyTaxScheme/cac:Lista\" and save as \"listaVariables\"\r"],
            "Name": "XMLQuery",
            "Params": ["varname", "XPath", "newVarName"],
            "ShortDescription": "Extract the value of a XML variable in the dictionary and saves it in another one as a Json.",
            "Syntax": ["XMLQuery \"<varname>\" where \"<XPath>\" and save as \"<newVarName>\""],
            "SyntaxDetail": [{
                "Instruction": "XMLQuery \"<varname>\" where \"<XPath>\" and save as \"<newVarName>\""
            }]
        }],
        "ID": 5,
        "Name": "Mix Reader",
        "_FAdminKey": "Mixed"
    },
    "6": {
        "Description": "With this tool you will have the ability to read your emails without the need to have Outlook installed directly on your computer, by connecting to the Microsoft Office 365 mail server, you can move your emails, generate new ones or even filter them for easy reading. Taking control of your mailbox directly from your automation.",
        "Function": [{
            "CreationDate": "2019-Oct-04",
            "Description": "Changes a mail status to read.",
            "Example": ["ChangeTo read with the subject \"Important\"\r"],
            "Name": "ChangeTo",
            "Params": ["filter"],
            "ShortDescription": "Change a mail status to read.",
            "Syntax": ["ChangeTo read with the subject \"<filter>\""],
            "SyntaxDetail": [{
                "Instruction": "ChangeTo read with the subject \"<filter>\""
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/OutlookReader/ChangeTo0.mov"]
        }, {
            "CreationDate": "2019-Oct-09",
            "Description": "Allows to check for incoming mail in a specific mail box.",
            "Example": ["CheckForIncomingMails to \"<mail>\" and that fulfills the filter \"<Filter>\" in the \"<WhereFilterIsApplied>\" and run the script \"<ScriptKey>\"\r"],
            "Name": "CheckForIncomingMails",
            "Params": ["mail", "Filter", "WhereFilterIsApplied", "ScriptKey"],
            "ShortDescription": "Check for incoming mail in a specific mail box.",
            "Syntax": ["CheckForIncomingMails to \"<mail>\" and that fulfills the filter \"<Filter>\" in the \"<WhereFilterIsApplied>\" and run the script \"<ScriptKey>\""],
            "SyntaxDetail": [{
                "Instruction": "CheckForIncomingMails to \"<mail>\" and that fulfills the filter \"<Filter>\" in the \"<WhereFilterIsApplied>\" and run the script \"<ScriptKey>\""
            }]
        }, {
            "CreationDate": "2019-Apr-03",
            "Description": "Connect to the mail the outlook mail server directly without the need to be open or configure in your computer. You can only be connected to one mail server in each script. The exchange web services versions available are [ Exchange2007_SP1 , Exchange2010 , Exchange2010_SP1 , Exchange2010_SP2 , Exchange2013 , Exchange2013_SP1]",
            "Example": ["Connect to mail service \"example@softtek.com\" with the password \"ExamplePasword123\"\r", "Connect to mail service \"example@softtek.com\" with the password \"ExamplePasword123\" with server auto discoverer\r", "Connect to mail service \"example@softtek.com\" with the password \"ExamplePasword123\" with the exchange web services version \"Exchange2010_SP2\"\r"],
            "Name": "Connect",
            "Params": ["Mail", "Password", "EWS", "Version"],
            "ShortDescription": "Connect to outlook mail server.",
            "Syntax": ["Connect to mail service \"<Mail>\" with the password \"<Password>\"", "Connect to mail service \"<Mail>\" with the password \"<Password>\" with server auto discoverer", "Connect to mail service \"<Mail>\" with the password \"<Password>\" with the Exchange Web Services version \"<EWS-Version:Exchange2007_SP1|Exchange2010|Exchange2010_SP1|Exchange2010_SP2|Exchange2013|Exchange2013_SP1>\""],
            "SyntaxDetail": [{
                "Instruction": "Connect to mail service \"<Mail>\" with the password \"<Password>\""
            }, {
                "Instruction": "Connect to mail service \"<Mail>\" with the password \"<Password>\" with server auto discoverer"
            }, {
                "Instruction": "Connect to mail service \"<Mail>\" with the password \"<Password>\" with the Exchange Web Services version \"<EWS-Version:Exchange2007_SP1|Exchange2010|Exchange2010_SP1|Exchange2010_SP2|Exchange2013|Exchange2013_SP1>\""
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/OutlookReader/Connect0.mov"]
        }, {
            "CreationDate": "2021-Feb-01",
            "Description": "Given a path to a file that was previously attached to an email, we will decrypt it using an installed PFX certificate. This must already be in the CurrentUser certificate store.",
            "Example": ["Decrypt_SMIME_Attachment file={C:/Users/gilberto.isida/Downloads/Mails/0/smime.p7m} output={C:/Users/gilberto.isida/Downloads/Mails/0/Decrypted/Movimientos.out}\r"],
            "ExtraDocs": "https://innotekfilestore.file.core.windows.net/frida-docs/Readers/Outlook/Articles/Decrypt_SMIME_Attachment.pdf",
            "Name": "Decrypt_SMIME_Attachment",
            "Params": ["encryptedFile", "destination"],
            "ShortDescription": "Decrypts a file attachment with an installed PFX certificate.",
            "Syntax": ["Decrypt_SMIME_Attachment file={<encryptedFile>} output={<destination>}"],
            "SyntaxDetail": [{
                "Instruction": "Decrypt_SMIME_Attachment file={<encryptedFile>} output={<destination>}"
            }]
        }, {
            "CreationDate": "2021-Aug-31",
            "Description": "Downloads a mail as an .eml file to an specific path given its unique MailID. If the destination folder does not exist, it is created. \\n\\nThe downloaded file name is by default the mail subject + the date time of reception unless a different name is specified.",
            "Example": ["DownloadMail with Mail ID \"AAMkAGVlNjE0ZmMxLWM4MTYtNGJh\" to the folder \"C:\\Users\\MyUser\\Desktop\\DownloadedMails\\ProcessID\"\r", "DownloadMail with Mail ID \"AAMkAGVlNjE0ZmMxLWM4MTYtNGJh\" to the folder \"C:\\Users\\MyUser\\Desktop\\DownloadedMails\\ProcessID\" and save as \"ClientRequirementsMail\"\r"],
            "Name": "DownloadMail",
            "Params": ["MailID", "DownloadMailPath"],
            "ShortDescription": "Downloads a mail as an .eml file.",
            "Syntax": ["DownloadMail with Mail ID \"<MailID>\" to the folder \"<DownloadMailPath>\"", "DownloadMail with Mail ID \"<MailID>\" to the folder \"<DownloadMailPath>\" and save as \"<MailName>\""],
            "SyntaxDetail": [{
                "Instruction": "DownloadMail with Mail ID \"<MailID>\" to the folder \"<DownloadMailPath>\""
            }, {
                "Instruction": "DownloadMail with Mail ID \"<MailID>\" to the folder \"<DownloadMailPath>\" and save as \"<MailName>\""
            }]
        }, {
            "CreationDate": "2021-Jan-12",
            "Description": "Moves a mail to an specific folder given its unique MailID. If the destination folder does not exist, it is created.\\n\\nThe downloaded file name is the mail subject + the date time it was received. ",
            "Example": ["MoveMail with Mail ID \"AAMkAGVlNjE0ZmMxLWM4MTYtNGJh\" to the folder \"ProcessedMails\"\r"],
            "Name": "MoveMail",
            "Params": ["MailID", "DestinyFolder"],
            "ShortDescription": "Moves a mail to an specific folder.",
            "Syntax": ["MoveMail with Mail ID \"<MailID>\" to the folder \"<DestinyFolder>\""],
            "SyntaxDetail": [{
                "Instruction": "MoveMail with Mail ID \"<MailID>\" to the folder \"<DestinyFolder>\""
            }]
        }, {
            "CreationDate": "2021-Jan-07",
            "Description": "Reads the unique mail ID and body, subject, date, sender, recipients, ccrecipients, torecipients or the attachment of various Outlook mails (without the need to have Outlook open) within a specified folder by applying a subject/sender/body/date/attachment filter. The output is a JSON List that contains the extracted parameters of all the mails found. The mails can be moved to another specified folder which is created in case it does not exist; the destination folder can be the same as the searching folder.",
            "Example": ["ReadAllMails and get parameters \"sender,body,date,subject,recipients,torecipients,ccrecipients\" from the folder \"Bandeja de entrada\" that fulfills the filter \"Process Request\" in the \"subject\" and save as \"Result\"\r", "ReadAllMails and get parameters \"subject\" from the folder \"InputMailsFolder\" that fulfills the filter \"2021/01/12\" in the \"date\" and save as \"Result\" and finally move it to \"ProcessingFolder\"\r", "ReadAllMails and get parameters \"subject,attachment\" from the folder \"InputMailsFolder\" that fulfills the filter \"2021/01/12 13:30\" in the \"date\" and save as \"Result\" and attachments in \"C:\\Users\\andres.cruz\\Desktop\\Mails\"\r", "ReadAllMails and get parameters \"subject,attachment\" from the folder \"InputMailsFolder\" that fulfills the filter \"2021/01/12\" in the \"date\" and save as \"Result\" and attachments in \"C:\\Users\\andres.cruz\\Desktop\\Mails\" and finally move it to \"ProcessingFolder\"\r"],
            "Name": "ReadAllMails",
            "Params": ["ParametersToGet", "FolderName", "FilterType", "WhereFilterIsApplied", "VariableName", "AttachmentsDestinyFolder", "EmailDestinyFolder"],
            "ShortDescription": "Read parameters from various Outlook mails.",
            "Syntax": ["ReadAllMails and get parameters \"<ParametersToGet>\" from the folder \"<FolderName>\" that fulfills the filter \"<FilterType>\" in the \"<WhereFilterIsApplied>\" and save as \"<VariableName>\"", "ReadAllMails and get parameters \"<ParametersToGet>\" from the folder \"<FolderName>\" that fulfills the filter \"<FilterType>\" in the \"<WhereFilterIsApplied>\" and save as \"<VariableName>\" and finally move it to \"<EmailDestinyFolder>\"", "ReadAllMails and get parameters \"<ParametersToGet>,attachment\" from the folder \"<FolderName>\" that fulfills the filter \"<FilterType>\" in the \"<WhereFilterIsApplied>\" and save as \"<VariableName>\" and attachments in \"<AttachmentsDestinyFolder>\"", "ReadAllMails and get parameters \"<ParametersToGet>,attachment\" from the folder \"<FolderName>\" that fulfills the filter \"<FilterType>\" in the \"<WhereFilterIsApplied>\" and save as \"<VariableName>\" and attachments in \"<AttachmentsDestinyFolder>\" and finally move it to \"<EmailDestinyFolder>\""],
            "SyntaxDetail": [{
                "Instruction": "ReadAllMails and get parameters \"<ParametersToGet>\" from the folder \"<FolderName>\" that fulfills the filter \"<FilterType>\" in the \"<WhereFilterIsApplied>\" and save as \"<VariableName>\""
            }, {
                "Instruction": "ReadAllMails and get parameters \"<ParametersToGet>\" from the folder \"<FolderName>\" that fulfills the filter \"<FilterType>\" in the \"<WhereFilterIsApplied>\" and save as \"<VariableName>\" and finally move it to \"<EmailDestinyFolder>\""
            }, {
                "Instruction": "ReadAllMails and get parameters \"<ParametersToGet>,attachment\" from the folder \"<FolderName>\" that fulfills the filter \"<FilterType>\" in the \"<WhereFilterIsApplied>\" and save as \"<VariableName>\" and attachments in \"<AttachmentsDestinyFolder>\""
            }, {
                "Instruction": "ReadAllMails and get parameters \"<ParametersToGet>,attachment\" from the folder \"<FolderName>\" that fulfills the filter \"<FilterType>\" in the \"<WhereFilterIsApplied>\" and save as \"<VariableName>\" and attachments in \"<AttachmentsDestinyFolder>\" and finally move it to \"<EmailDestinyFolder>\""
            }]
        }, {
            "CreationDate": "2019-Apr-03",
            "Description": "Reads the body or the attachment of an outlook mail directly from de mail server (witout the need to have outlook open) by applying a filter on de subject and saving its value on the dictionary vars (<<<...>>>) for future used. The third syntax option reads only from unread mail, marks it as read.",
            "Example": ["ReadMail body from inbox that fullfill the filter \"Important\" in the subject and save as \"VariableName\"\r", "ReadMail attachment from inbox that fullfill the filter \"Important\" in the subject and save as \"VariableName\"\r", "ReadMail attachment from inbox that fullfill the filter \"Important\" in the subject and save as unread \"VariableName\"\r"],
            "Name": "ReadMail",
            "Params": ["Filter", "VariableName"],
            "ShortDescription": "Read the body or the attachment of an outlook mail.",
            "Syntax": ["ReadMail body from inbox that fullfill the filter \"<Filter>\" in the subject and save as \"<VariableName>\"", "ReadMail attachment from inbox that fullfill the filter \"<Filter>\" in the subject and save as \"<VariableName>\"", "ReadMail attachment from inbox that fullfill the filter \"<Filter>\" in the subject and save as unread \"<VariableName>\""],
            "SyntaxDetail": [{
                "Instruction": "ReadMail body from inbox that fullfill the filter \"<Filter>\" in the subject and save as \"<VariableName>\""
            }, {
                "Instruction": "ReadMail attachment from inbox that fullfill the filter \"<Filter>\" in the subject and save as \"<VariableName>\""
            }, {
                "Instruction": "ReadMail attachment from inbox that fullfill the filter \"<Filter>\" in the subject and save as unread \"<VariableName>\""
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/OutlookReader/ReadMail0.mov"]
        }, {
            "CreationDate": "2019-Sep-11",
            "Description": "Reads the selected mails by applying a filter or multifilter in Subject, Sender, Date or Body of emails in a specific Outlook's folder (without the need of having outlook open) and finally saves its value on the dictionary vars (<<<...>>>) for future use or saves the attachments in a destiny folder (All filters are case sensitive). \\nIf more than one parameter is required at the same time, those parameters will be added in the same variable separated by a comma, if they include attachments those are saved in a new folder inside the given folder with the same name as their corresponding position in the list that is created. \\nUse the optional syntax ending 'download results to \"<DownloadMailsPath>\"' to download the matching mails as .eml files; if the path does not exist, it is created. The downloaded file names are the mail subject + the date time of reception.  \\nMailbox syntax will only work on accounts with such permitions.\\nAn error is generated if no matching mails are found.",
            "Example": ["ReadMailNew and get \"body\" from the folder \"Bandeja de entrada\" that fulfills the filter \"Hola\" in the \"body\" and save as \"BodyVariable\" finally move it to \"Notas\"\r", "ReadMailNew and get \"date\" from the folder \"Bandeja de entrada\" that fulfills the filter \"2019/09/10\" in the \"date\" and save as \"BodyVariable\" finally move it to \"Notas\" download results to \"<DownloadMailsPath>\"\r", "ReadMailNew and get \"sender\" from the folder \"Bandeja de entrada\" that fulfills the filter \"Hola\" in the \"subject\" and save as \"BodyVariable\" finally move it to \"Notas\"\r", "ReadMailNew and get \"subject\" from the folder \"Bandeja de entrada\" that fulfills the filter \"jonathan.camacho@softtek.com\" in the \"sender\" and save as \"BodyVariable\" finally move it to \"Notas\"\r", "ReadMailNew and get \"attachment\" from the folder \"Bandeja de entrada\" that fulfills the filter \"Hola\" in the \"body\" and save as \"C:\\Muestra\" finally move it to \"Bandeja de entrada\"\r", "ReadMailNew and get \"body\" from unread mails in the folder \"Bandeja de entrada\" that fulfills the filter \"jonathan.camacho@softtek.com\" in the \"sender\" and save as \"BodyVariable\" finally marked as read\r", "ReadMailNew and get \"date\" from unread mails in the folder \"Bandeja de entrada\" that fulfills the filter \"2019/09/10\" in the \"date\" and save as \"BodyVariable\" finally marked as read\r", "ReadMailNew and get \"sender\" from unread mails in the folder \"Bandeja de entrada\" that fulfills the filter \"jonathan.camacho@softtek.com\" in the \"sender\" and save as \"BodyVariable\" finally marked as read\r", "ReadMailNew and get \"subject\" from unread mails in the folder \"Bandeja de entrada\" that fulfills the filter \"Hola\" in the \"subject\" and save as \"BodyVariable\" finally marked as read\r", "ReadMailNew and get \"attachment\" from unread mails in the folder \"Bandeja de entrada\" that fulfills the filter \"2019/09/10\" in the \"date\" and save as \"C:\\Muestra\" finally marked as read\r", "ReadMailNew and get \"body\" from the folder \"Bandeja de entrada\" that fulfills the multifilter {2019/09/10,date;Hola,subject} and save as \"BodyVariable\" finally move it to \"Notas\"\r", "ReadMailNew and get \"attachment\" from unread mails in the folder \"Bandeja de entrada\" that fulfills the multifilter {jonathan.camacho@softtek.com,sender;2019/09/10,date;Hola,subject} and save as \"C:\\Muestra\" finally mark as read download results to \"<DownloadMailsPath>\"\r", "ReadMailNew and get parameters \"attachment,sender,subject\" from the folder \"Bandeja de entrada\" that fulfills the filter \"2020/06/24\" in the \"date\" save data as \"mailData\" and attachments in \"C:\\Prueba\\Dates\" finally move it to \"Procesados\"\r", "ReadMailNew and get parameters \"attachment,sender,subject\" from unread mails in the folder \"Notas personales\" that fulfills the filter \"Prueba\" in the \"subject\" save data as \"SecondVariable\" and attachments in \"C:\\Prueba\\Unread\" finally mark as read\r", "ReadMailNew and get \"body\" from unread mails in the mailbox \"otherAcount@softtek.com\" in the folder \"Inbox\" that fulfills the filter \"Urgent\" in the \"subject\" and save as \"UrgentMail\" finally marked as read\r"],
            "Name": "ReadMailNew",
            "Params": ["ParameterToGet", "ParametersToGet", "FolderName", "Filter", "WhereFilterIsApplied", "MailboxName", "VariableName", "varPath", "DestinyFolder", "DownloadMailsPath"],
            "ShortDescription": "Read the selected mails by applying a filter.",
            "Syntax": ["ReadMailNew and get \"<ParameterToGet>\" from the folder \"<FolderName>\" that fulfills the filter \"<Filter>\" in the \"<WhereFilterIsApplied>\" and save as \"<VariableName>\" finally move it to \"<DestinyFolder>\" download results to \"<DownloadMailsPath>\"", "ReadMailNew and get \"<ParameterToGet>\" in the mailbox \"<MailboxName>\" from the folder \"<FolderName>\" that fulfills the filter \"<Filter>\" in the \"<WhereFilterIsApplied>\" and save as \"<VariableName>\" finally move it to \"<DestinyFolder>\" download results to \"<DownloadMailsPath>\"", "ReadMailNew and get \"<ParameterToGet>\" from unread mails in the folder \"<FolderName>\" that fulfills the filter \"<Filter>\" in the \"<WhereFilterIsApplied>\" and save as \"<VariableName>\" finally marked as read download results to \"<DownloadMailsPath>\"", "ReadMailNew and get \"<ParameterToGet>\" from unread mails in the mailbox \"<MailboxName>\" in the folder \"<FolderName>\" that fulfills the filter \"<Filter>\" in the \"<WhereFilterIsApplied>\" and save as \"<VariableName>\" finally marked as read download results to \"<DownloadMailsPath>\"", "ReadMailNew and get \"<ParameterToGet>\" from unread mails in the folder \"<FolderName>\" that fulfills the filter \"<Filter>\" in the \"<WhereFilterIsApplied>\" and save as list \"<VariableName>\" finally marked as read download results to \"<DownloadMailsPath>\"", "ReadMailNew and get \"<ParameterToGet>\" from the folder \"<FolderName>\" that fulfills the multifilter {<Filter1>,<WhereFilter1IsApplied>;<Filte2>,<WhereFilter2IsApplied>...;<FilterN>,<WhereFilterNIsApplied>} and save as \"<VariableName>\" finally move it to \"<DestinyFolder>\" download results to \"<DownloadMailsPath>\"", "ReadMailNew and get \"<ParameterToGet>\" from unread mails in the folder \"<FolderName>\" that fulfills the multifilter {<Filter1>,<WhereFilter1IsApplied>;<Filte2>,<WhereFilter2IsApplied>...;<FilterN>,<WhereFilterNIsApplied>} and save as \"<VariableName>\" finally mark as read download results to \"<DownloadMailsPath>\"", "ReadMailNew and get parameters \"<ParametersToGet>\" from the folder \"<FolderName>\" that fulfills the filter \"<Filter>\" in the \"<WhereFilterIsApplied>\" save data as \"<VariableName>\" and attachments in \"<varPath>\" finally move it to \"<DestinyFolder>\" download results to \"<DownloadMailsPath>\"", "ReadMailNew and get parameters \"<ParametersToGet>\" from unread mails in the folder \"<FolderName>\" that fulfills the filter \"<Filter>\" in the \"<WhereFilterIsApplied>\" save data as \"<VariableName>\" and attachments in \"<varPath>\" finally mark as read download results to \"<DownloadMailsPath>\""],
            "SyntaxDetail": [{
                "Instruction": "ReadMailNew and get \"<ParameterToGet>\" from the folder \"<FolderName>\" that fulfills the filter \"<Filter>\" in the \"<WhereFilterIsApplied>\" and save as \"<VariableName>\" finally move it to \"<DestinyFolder>\" download results to \"<DownloadMailsPath>\""
            }, {
                "Instruction": "ReadMailNew and get \"<ParameterToGet>\" in the mailbox \"<MailboxName>\" from the folder \"<FolderName>\" that fulfills the filter \"<Filter>\" in the \"<WhereFilterIsApplied>\" and save as \"<VariableName>\" finally move it to \"<DestinyFolder>\" download results to \"<DownloadMailsPath>\""
            }, {
                "Instruction": "ReadMailNew and get \"<ParameterToGet>\" from unread mails in the folder \"<FolderName>\" that fulfills the filter \"<Filter>\" in the \"<WhereFilterIsApplied>\" and save as \"<VariableName>\" finally marked as read download results to \"<DownloadMailsPath>\""
            }, {
                "Instruction": "ReadMailNew and get \"<ParameterToGet>\" from unread mails in the mailbox \"<MailboxName>\" in the folder \"<FolderName>\" that fulfills the filter \"<Filter>\" in the \"<WhereFilterIsApplied>\" and save as \"<VariableName>\" finally marked as read download results to \"<DownloadMailsPath>\""
            }, {
                "Instruction": "ReadMailNew and get \"<ParameterToGet>\" from unread mails in the folder \"<FolderName>\" that fulfills the filter \"<Filter>\" in the \"<WhereFilterIsApplied>\" and save as list \"<VariableName>\" finally marked as read download results to \"<DownloadMailsPath>\""
            }, {
                "Instruction": "ReadMailNew and get \"<ParameterToGet>\" from the folder \"<FolderName>\" that fulfills the multifilter {<Filter1>,<WhereFilter1IsApplied>;<Filte2>,<WhereFilter2IsApplied>...;<FilterN>,<WhereFilterNIsApplied>} and save as \"<VariableName>\" finally move it to \"<DestinyFolder>\" download results to \"<DownloadMailsPath>\""
            }, {
                "Instruction": "ReadMailNew and get \"<ParameterToGet>\" from unread mails in the folder \"<FolderName>\" that fulfills the multifilter {<Filter1>,<WhereFilter1IsApplied>;<Filte2>,<WhereFilter2IsApplied>...;<FilterN>,<WhereFilterNIsApplied>} and save as \"<VariableName>\" finally mark as read download results to \"<DownloadMailsPath>\""
            }, {
                "Instruction": "ReadMailNew and get parameters \"<ParametersToGet>\" from the folder \"<FolderName>\" that fulfills the filter \"<Filter>\" in the \"<WhereFilterIsApplied>\" save data as \"<VariableName>\" and attachments in \"<varPath>\" finally move it to \"<DestinyFolder>\" download results to \"<DownloadMailsPath>\""
            }, {
                "Instruction": "ReadMailNew and get parameters \"<ParametersToGet>\" from unread mails in the folder \"<FolderName>\" that fulfills the filter \"<Filter>\" in the \"<WhereFilterIsApplied>\" save data as \"<VariableName>\" and attachments in \"<varPath>\" finally mark as read download results to \"<DownloadMailsPath>\""
            }]
        }, {
            "CreationDate": "2021-Mar-15",
            "Description": "Given a MSG file, we can extract the sender, date, recipients, subject, and body. Even the attachments, to relocate them somewhere in your system.",
            "Example": ["ReadMsgFile \"C:/Users/gilberto.isida/Downloads/ejemplo.msg\" save_attachments={\"C:/Users/gilberto.isida/Downloads/Attachments\"}\r"],
            "Name": "ReadMsgFile",
            "Params": ["msgPath", "saveDir"],
            "ShortDescription": "Read a mail item from a .msg file.",
            "Syntax": ["ReadMsgFile \"<msgPath>\" save_attachments={\"<saveDir>\"}"],
            "SyntaxDetail": [{
                "Instruction": "ReadMsgFile \"<msgPath>\" save_attachments={\"<saveDir>\"}"
            }]
        }, {
            "CreationDate": "2019-Sep-27",
            "Description": "Allows to reply to mails that fulfills a filter.",
            "Example": ["Reply to most recent mail with subject \"Important\" with the body \"Thanks\"\r", "Reply to most recent unread mail with subject \"important\" with the body \"Thanks\"\r", "Reply to most recent mail in the folder \"Inbox\" with the body \"Thanks\" finally move it to \"Processed\"\r", "Reply to most recent unread mail in the folder \"Inbox\" with the body \"Thanks\" finally move it to \"Processed\"\r", "Reply to the mail with ID \"AAMkAGVlNjE0ZmMxLWM4MTYtNGJh\" with the body \"This is a response sent from and automation\"\r"],
            "Name": "Reply",
            "Params": ["Filter", "Body", "Folder", "MailID", "and", "Destiny", "folder"],
            "ShortDescription": "Reply a mail that fulfills a filter.",
            "Syntax": ["Reply to most recent mail with the subject \"<Filter>\" with the body \"<Body>\"", "Reply to most recent unread mail with the subject \"<Filter>\" with the body \"<Body>\"", "Reply to most recent mail in the folder \"<Folder>\" with the body \"<Body>\" finally move it to \"<DestinyFolder>\"", "Reply to most recent unread mail in the folder \"<Folder>\" with the body \"<Body>\" finally move it to \"<DestinyFolder>\"", "Reply to the mail with ID \"<MailID>\" with the body \"<Body>\""],
            "SyntaxDetail": [{
                "Instruction": "Reply to most recent mail with the subject \"<Filter>\" with the body \"<Body>\""
            }, {
                "Instruction": "Reply to most recent unread mail with the subject \"<Filter>\" with the body \"<Body>\""
            }, {
                "Instruction": "Reply to most recent mail in the folder \"<Folder>\" with the body \"<Body>\" finally move it to \"<DestinyFolder>\""
            }, {
                "Instruction": "Reply to most recent unread mail in the folder \"<Folder>\" with the body \"<Body>\" finally move it to \"<DestinyFolder>\""
            }, {
                "Instruction": "Reply to the mail with ID \"<MailID>\" with the body \"<Body>\""
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/OutlookReader/ReplyMail0.mov"]
        }, {
            "CreationDate": "2019-Sep-18",
            "Description": "Allows to send mails using the desired account, mails may or may not contain attachments it also works with Cc and Bcc. For mails with several destinataries or attachments, split each element with a coma.\\nIf the mail account has permitions, \"mailbox\" syntax will allow to send mails signed as the corresponding mailbox.",
            "Example": ["SendMail to \"example@softtek.com\" with the subject \"The subject goes here\" and the body \"The message goes here\"\r", "SendMail to \"example@softtek.com\" with the subject \"The subject goes here\" the body \"The message goes here\" and the attachments \"C:\\Users\\user\\Desktop\\NoteScripts\\Coordinates.txt,C:\\Users\\user\\Desktop\\Issues.xlsx\"\r", "SendMail to \"example@softtek.com,example2@softtek.com\" with the subject \"Subject goes here\" the body \"Message goes here\" and the attachments \"C:\\Users\\user\\Pictures\\image.png\"\r", "SendMail to group \"Group name here\" with the subject \"Subject goes here\" and the body \"Message goes here\"\r", "SendMail to group \"Group name here\" with the subject \"Subject goes here\" the body \"Message goes here\" and the attachments \"C:\\Users\\user\\Pictures\\image.png,C:\\Users\\user\\Desktop\\Issues.xlsx\"\r", "SendMail to \"example@softtek.com\" Bcc to \"example2@softtek.com\" the subject \"Subject goes here\" and the body \"Message goes here\"\r", "SendMail to \"example@softtek.com,example2@softtek.com\" Bcc to \"example3@softtek.com,example4@softtek.com\" the subject \"Subject goes here\" the body \"Message goes here\" and the attachments \"C:\\Users\\user\\Desktop\\Coordinates.txt\"\r", "SendMail to \"example@softtek.com\" Cc to \"example2@softtek.com\" the subject \"Subject goes here\" and the body \"Message goes here\"\r", "SendMail to \"example@softtek.com,example2@softtek.com\" Cc to \"example3@softtek.com,example4@softtek.com\" the subject \"Subject goes here\" the body \"Message goes here\" and the attachments \"C:\\Users\\user\\Desktop\\Coordinates.txt\"\r", "SendMail to \"example@softtek.com,example2@softtek.com\" Cc to {example3@softtek.com} Bcc to {example4@softtek.com} the subject \"Subject goes here\" and the body \"Message goes here\"\r", "SendMail to \"example@softtek.com,example2@softtek.com\" Cc to {example3@softtek.com} Bcc to {example4@softtek.com} the subject \"Subject goes here\" the body \"Message goes here\" and the attachments \"C:\\Users\\Type.pdf,C:\\Users\\RunPowerShell.pdf\"\r", "SendMail to \"example@softtek.com,example2@softtek.com\" in mailbox \"another.mail@softtek.com\" with the subject \"Urgent\" and the body \"<font face='verdana' color='red'>Some <br>body message</font>\"\r"],
            "Name": "SendMail",
            "Params": ["DestinyMail", "Subject", "Body", "FilePath", "DestinyGroup", "Mailbox"],
            "ShortDescription": "Send an e-mail.",
            "Syntax": ["SendMail to \"<DestinyMail>\" with the subject \"<Subject>\" and the body \"<Body>\"", "SendMail to \"<DestinyMail>\" in mailbox \"<Mailbox>\" with the subject \"<Subject>\" and the body \"<Body>\"", "SendMail to \"<DestinyMail>\" with the subject \"<Subject>\" the body \"<Body>\" and the attachments \"<FilePath>\"", "SendMail to group \"<DestinyGroup>\" with the subject \"<Subject>\" and the body \"<Body>\"", "SendMail to group \"<DestinyGroup>\" with the subject \"<Subject>\" the body \"<Body>\" and the attachments \"<FilePath>\"", "SendMail to \"<DestinyMail>\" Bcc to \"<DestinyMail>\" the subject \"<Subject>\" and the body \"<Body>\"", "SendMail to \"<DestinyMail>\" Bcc to \"<DestinyMail>\" the subject \"<Subject>\" the body \"<Body>\" and the attachments \"<FilePath>\"", "SendMail to \"<DestinyMail>\" Cc to \"<DestinyMail>\" the subject \"<Subject>\" and the body \"<Body>\"", "SendMail to \"<DestinyMail>\" Cc to \"<DestinyMail>\" the subject \"<Subject>\" the body \"<Body>\" and the attachments \"<FilePath>\"", "SendMail to \"<DestinyMail>\" Cc to {<DestinyMail>} Bcc to {<DestinyMail>} the subject \"<Subject>\" and the body \"<Body>\"", "SendMail to \"<DestinyMail>\" Cc to {<DestinyMail>} Bcc to {<DestinyMail>} the subject \"<Subject>\" the body \"<Body>\" and the attachments \"<FilePath>\""],
            "SyntaxDetail": [{
                "Instruction": "SendMail to \"<DestinyMail>\" with the subject \"<Subject>\" and the body \"<Body>\""
            }, {
                "Instruction": "SendMail to \"<DestinyMail>\" in mailbox \"<Mailbox>\" with the subject \"<Subject>\" and the body \"<Body>\""
            }, {
                "Instruction": "SendMail to \"<DestinyMail>\" with the subject \"<Subject>\" the body \"<Body>\" and the attachments \"<FilePath>\""
            }, {
                "Instruction": "SendMail to group \"<DestinyGroup>\" with the subject \"<Subject>\" and the body \"<Body>\""
            }, {
                "Instruction": "SendMail to group \"<DestinyGroup>\" with the subject \"<Subject>\" the body \"<Body>\" and the attachments \"<FilePath>\""
            }, {
                "Instruction": "SendMail to \"<DestinyMail>\" Bcc to \"<DestinyMail>\" the subject \"<Subject>\" and the body \"<Body>\""
            }, {
                "Instruction": "SendMail to \"<DestinyMail>\" Bcc to \"<DestinyMail>\" the subject \"<Subject>\" the body \"<Body>\" and the attachments \"<FilePath>\""
            }, {
                "Instruction": "SendMail to \"<DestinyMail>\" Cc to \"<DestinyMail>\" the subject \"<Subject>\" and the body \"<Body>\""
            }, {
                "Instruction": "SendMail to \"<DestinyMail>\" Cc to \"<DestinyMail>\" the subject \"<Subject>\" the body \"<Body>\" and the attachments \"<FilePath>\""
            }, {
                "Instruction": "SendMail to \"<DestinyMail>\" Cc to {<DestinyMail>} Bcc to {<DestinyMail>} the subject \"<Subject>\" and the body \"<Body>\""
            }, {
                "Instruction": "SendMail to \"<DestinyMail>\" Cc to {<DestinyMail>} Bcc to {<DestinyMail>} the subject \"<Subject>\" the body \"<Body>\" and the attachments \"<FilePath>\""
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/OutlookReader/SendMail0.mov"]
        }],
        "ID": 6,
        "Keyword": "Mail",
        "Name": "Outlook Reader",
        "_FAdminKey": "Outlook"
    },
    "7": {
        "Description": "Browpet is designed to automate your web flows adding a resiliency layer that will help you reduce the amount of time you invest in giving support to your a robotic programing automations (RPA). With this tool you will be capable of recording your business web process and with its multi-browser functionality be confident that your web flows will run correctly in any of them. At the same time uses its headless execution mode and let FRIDA do the work without the need of your supervision.",
        "Function": [{
            "Description": "Change the browser setting, to show (or not) a save file dialog for every file being downloaded. The default value is false. This behaviour must be set BEFORE launching the browser.",
            "Example": ["AskDownload true\r", "AskDownload false\r"],
            "Name": "AskDownload",
            "Params": ["value"],
            "Syntax": ["AskDownload <value>"],
            "SyntaxDetail": [{
                "Instruction": "AskDownload <value>"
            }]
        }, {
            "Description": "Does HTTP Basic Authentication. This function can be used with \"SetProxyServer\".",
            "Example": ["Authenticate user = \"frida\" pass = \"*******\"\r"],
            "Name": "Authenticate",
            "Syntax": ["Authenticate user = \"<user>\" pass = \"<password>\""],
            "SyntaxDetail": [{
                "Instruction": "Authenticate user = \"<user>\" pass = \"<password>\""
            }]
        }, {
            "Description": "Lets you go to the last page you visited. Just like when you click the back button on your browser",
            "Example": ["Back\r"],
            "Name": "Back",
            "Syntax": ["Back"]
        }, {
            "Description": "Clicks in an element inside the browser. You can set a timeout to make more tries of clicking. A full failed search takes about 20000ms. If no attribute is specified, then browpet will use a 'magic' algorithm to search for the appropriate element in the DOM.",
            "Example": ["Click in selector=\".class1 > nth-child(2)\"\r", "Click in id=\"js-link-box-es\" timeout = 35000\r"],
            "Name": "Click",
            "Params": ["attribute", "value", "time"],
            "Syntax": ["Click in \"<value>\"", "Click in <attribute>=\"<value>\"", "Click in <attribute>=\"<value>\" timeout = <time>"],
            "SyntaxDetail": [{
                "Instruction": "Click in \"<value>\""
            }, {
                "Instruction": "Click in <attribute>=\"<value>\""
            }, {
                "Instruction": "Click in <attribute>=\"<value>\" timeout = <time>"
            }],
            "Videos": ["https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/Browpet/Click0.mp4"]
        }, {
            "Description": "Similar to Click, with the addition that this new function expects a new file to be downloaded. It will check if there are any pending downloads (files with the .crdownload extension), and wait until done or the timeout is reached. Then the function will save the full file path to a new variable named: 'downloaded_file';",
            "Example": ["ClickDownload in selector=\".class1 > nth-child(2)\"\r", "ClickDownload in id=\"js-link-box-es\" timeout = 35000\r"],
            "Name": "ClickDownload",
            "Params": ["attribute", "value", "time"],
            "Syntax": ["ClickDownload in \"<value>\"", "ClickDownload in <attribute>=\"<value>\"", "ClickDownload in <attribute>=\"<value>\" timeout = <time>"],
            "SyntaxDetail": [{
                "Instruction": "ClickDownload in \"<value>\""
            }, {
                "Instruction": "ClickDownload in <attribute>=\"<value>\""
            }, {
                "Instruction": "ClickDownload in <attribute>=\"<value>\" timeout = <time>"
            }]
        }, {
            "Description": "Closes current tab",
            "Example": ["CloseTab\r"],
            "Name": "CloseTab",
            "Syntax": ["CloseTab"]
        }, {
            "Description": "Close the current browser, cleanup the Web2 environment, ready for a clean start if required",
            "Example": ["Dispose\r"],
            "Name": "Dispose",
            "Syntax": ["Dispose"]
        }, {
            "Description": "Given the id, xpath or selector of an <embed /> element in the HTML of a loaded page, browpet will download the document following the src attr of the embed tag.",
            "Example": ["DownloadEmbedded selector=\\\"#app > div > div > div.parent > div.page-content > div > section > div > div > embed\\\"\r", "DownloadEmbedded id=\"#doc\"\r"],
            "Name": "DownloadEmbedded",
            "Params": ["attribute", "value"],
            "Syntax": ["DownloadEmbedded <attribute>=\"<value>\""],
            "SyntaxDetail": [{
                "Instruction": "DownloadEmbedded <attribute>=\"<value>\""
            }]
        }, {
            "Description": "Validates that a certain element is present in the webpage. Returns true if the element exists, and false otherwise. A full failed search takes about 20000ms. You can set a timeout before returning false.",
            "Example": ["ElementExists in id=\"error\" save as \"exists\"\r", "ElementExists in id=\"error\" save as \"exists\" timeout = 3000\r"],
            "Name": "ElementExists",
            "Params": ["attr", "value", "attribute", "new", "var", "time"],
            "Syntax": ["ElementExists in <attribute>=\"<attr-value>\" save as \"<new-var>\"", "ElementExists in <attribute>=\"<attr-value>\" save as \"<new-var>\" timeout = <time>"],
            "SyntaxDetail": [{
                "Instruction": "ElementExists in <attribute>=\"<attr-value>\" save as \"<new-var>\""
            }, {
                "Instruction": "ElementExists in <attribute>=\"<attr-value>\" save as \"<new-var>\" timeout = <time>"
            }]
        }, {
            "Description": "Destroys context",
            "Example": ["EndContext\r"],
            "Name": "EndContext",
            "Syntax": ["EndContext"]
        }, {
            "Description": "This function allows to 'inject' JavaScript to the active page. By default the output is stored in a variable named web2Output",
            "Example": ["Evaluate frame = \"0\" `console.log(\"Helloooo\")`\r", "Evaluate frame = \"main\" `writeAlpha(\"P\")`\r", "Evaluate frame = \"1\" `your JS code`\r"],
            "Name": "Evaluate",
            "Params": ["JScode"],
            "Syntax": ["Evaluate frame = \"<wantedFrame>\" `<JScode>`"],
            "SyntaxDetail": [{
                "Instruction": "Evaluate frame = \"<wantedFrame>\" `<JScode>`"
            }]
        }, {
            "Description": "Extracts \"textContent\" from a html element and saves it to the specified variable name.",
            "Example": ["Extract from id=\"firstTitle\" save as \"title\"\r"],
            "Name": "Extract",
            "Params": ["attribute", "attr", "value", "var", "name"],
            "Syntax": ["Extract from <attribute>=\"<attr-value>\" save as \"<var-name>\""],
            "SyntaxDetail": [{
                "Instruction": "Extract from <attribute>=\"<attr-value>\" save as \"<var-name>\""
            }]
        }, {
            "Description": "Focus an html node.",
            "Example": ["Focus name=\"brand-list\"\r"],
            "Name": "Focus",
            "Params": ["attr", "value", "attribute"],
            "Syntax": ["Focus <attribute>=\"<attr-value>\""],
            "SyntaxDetail": [{
                "Instruction": "Focus <attribute>=\"<attr-value>\""
            }]
        }, {
            "Description": "Navigates to a specified URL.",
            "Example": ["GoTo \"https://www.google.com\"\r"],
            "Name": "GoTo",
            "Params": ["url"],
            "Syntax": ["GoTo \"<url>\"", "GoTo <url>"],
            "SyntaxDetail": [{
                "Instruction": "GoTo \"<url>\""
            }, {
                "Instruction": "GoTo <url>"
            }]
        }, {
            "Description": "Saves a copy of the website's HTML in a private FRIDA Repository. This will trigger an analysis to notify you if the HTML content of the website has changed. (Needs extra setup. Contact FRIDA Support). You may save different pages, only saving them with a different file name.",
            "Example": ["HTMLREVISION save as \"index.html\"\r"],
            "Name": "HTMLRevision",
            "Syntax": ["HTMLREVISION save as \"<filename>\""],
            "SyntaxDetail": [{
                "Instruction": "HTMLREVISION save as \"<filename>\""
            }]
        }, {
            "Description": "Creates a context around the given element. This will help search an item based on a sibling item. For example, you want to press a button in the same row as another element, say a <span> element. You give the span as the context to llok for the sibling button.\\nThe instructions following the context will make a recursive search, based on the given context. The algorithm will start looking for the parent elements in order to find an element inside a context, so you don't need to specify the full selector for the item you want to interact. In the last example, we want to click a button, so we will just look for a button inside the context like this: `selector=\"button\"`",
            "Example": ["In Context of dynamic=\"N\u00famero de Documento\"\r", "Type \"123\" in selector=\"input\"\r", "EndContext\r"],
            "Name": "In Context",
            "Params": ["attr", "value", "attribute"],
            "Syntax": ["In Context of <attribute>=\"<attr-value>\""],
            "SyntaxDetail": [{
                "Instruction": "In Context of <attribute>=\"<attr-value>\""
            }]
        }, {
            "Description": "Clears an input and writes into it. Mimics CTRL + A + BACKSPACE -> Write. If no attribute is specified, then browpet will use a 'magic' algorithm to search for the appropriate element in the DOM.",
            "Example": ["InsertValue \"20/01/19\" in name=\"fechaInicio\"\r"],
            "Name": "InsertValue",
            "Params": ["text", "attribute", "attr", "value", "fieldl"],
            "Syntax": ["InsertValue \"<text>\" in \"<field>\"", "InsertValue \"<text>\" in <attribute>=\"<attr-value>\""],
            "SyntaxDetail": [{
                "Instruction": "InsertValue \"<text>\" in \"<field>\""
            }, {
                "Instruction": "InsertValue \"<text>\" in <attribute>=\"<attr-value>\""
            }]
        }, {
            "Description": "Presses a keyboard key. List of available keys is found here: https://github.com/puppeteer/puppeteer/blob/main/src/common/USKeyboardLayout.ts",
            "Example": ["Key \"Enter\"\r", "Key \"Tab\"\r"],
            "Name": "Key",
            "Params": ["key"],
            "Syntax": ["Key \"<key>\""],
            "SyntaxDetail": [{
                "Instruction": "Key \"<key>\""
            }]
        }, {
            "Description": "Load a extension to the browser, given a local path.",
            "Example": ["LoadExtension extensionsPath={C:\\Users\\fridaRPA\\Desktop\\Extension\\aodjmnfhjibkcdimpodiifdjnnncaaf\\1.12_0}\r"],
            "Name": "LoadExtension",
            "Params": ["pathToExtension"],
            "Syntax": ["LoadExtension extensionsPath={<pathToExtension>}"],
            "SyntaxDetail": [{
                "Instruction": "LoadExtension extensionsPath={<pathToExtension>}"
            }]
        }, {
            "Description": "This is a Browpet feature that may help you to log into some basic websites, it intelligently looks for the username and password fields, enters the credentials and clicks on the button to sign in. It's been tested with Microsoft 365, and some other user/password websites. There are obvious limitations for more complex log-in forms like captchas, two-factor authentication, account verification, or intermediate buttons.",
            "Example": ["Login in https://outlook.office.com user = \"user.name@somedomain.com\" PASS = \"**********\"\r"],
            "Name": "Login",
            "Params": ["username", "password"],
            "Syntax": ["Login in <url> user = \"<username>\" pass = \"<password>\""],
            "SyntaxDetail": [{
                "Instruction": "Login in <url> user = \"<username>\" pass = \"<password>\""
            }]
        }, {
            "Description": "Waits for page to load. Use this only when an action triggers a URL change.",
            "Example": ["Navigation\r"],
            "Name": "Navigation",
            "Syntax": ["Navigation"]
        }, {
            "Description": "Opens a new tab",
            "Example": ["NewTab\r"],
            "Name": "NewTab",
            "Syntax": ["NewTab"]
        }, {
            "Description": "If you know that an alert is coming, you need to establish how you are going to handle the alert. By default, the alert will be dismissed (closed), but, you can change this behaviour with this instructions. The available behaviours are the following: \"accept\", \"cancel\", \"dismiss\", \"confirm\". ***This must be configured before the alert is triggered***",
            "Example": ["NextAlert \"cancel\"\r", "NextAlert \"confirm\"\r"],
            "Name": "NextAlert",
            "Params": ["behaviour"],
            "Syntax": ["NextAlert \"<behaviour>\""],
            "SyntaxDetail": [{
                "Instruction": "NextAlert \"<behaviour>\""
            }]
        }, {
            "Description": "Solves Google's Recaptcha. It is necessary to get the \"data-sitekey\" property for the specific page. Also, the url where the captcha is hosted is necessary.",
            "Example": ["Recaptcha sitekey=\"6Lf3iSgTAAAAAFSSa4Ow3_1cKPA7LsUSI24tTtSE\" url=\"https://www.correoargentino.com.ar/formularios/oidn\"\r"],
            "ExtraDocs": "https://innotekfilestore.file.core.windows.net/frida-docs/Readers/Browpet/Articles/Recaptcha.pdf",
            "Name": "Recaptcha",
            "Params": ["data", "sitekey", "url"],
            "Syntax": ["Recaptcha", "Recaptcha sitekey=\"<data-sitekey>\" url=\"<url>\""],
            "SyntaxDetail": [{
                "Instruction": "Recaptcha sitekey=\"<data-sitekey>\" url=\"<url>\""
            }]
        }, {
            "Description": "Reloads the current window",
            "Example": ["Reload\r"],
            "Name": "Reload",
            "Syntax": ["Reload"]
        }, {
            "Description": "Same as Click, but with button: 'right'.",
            "Example": ["RightClick in selector=\".class1 > nth-child(2)\"\r", "RightClick in id=\"js-link-box-es\" timeout = 35000\r"],
            "Name": "RightClick",
            "Params": ["attribute", "value", "time"],
            "Syntax": ["RightClick in <attribute>=\"<value>\"", "RightClick in <attribute>=\"<value>\" timeout = <time>"],
            "SyntaxDetail": [{
                "Instruction": "RightClick in <attribute>=\"<value>\""
            }, {
                "Instruction": "RightClick in <attribute>=\"<value>\" timeout = <time>"
            }]
        }, {
            "Description": "Takes a Screenshot of the entire screen if an element is not specified. Otherwise, takes screenshot only of the specified element. Saves the path of where the screenshot is saved into a variable.",
            "Example": ["Screenshot in id=\"katpchaImage\" save as \"captcha\"\r", "Screenshot save as \"result\"\r", "Screenshot in id=\"textarea\" save as \"captcha\" path = \"C:/Users/gilberto.isida/Downloads/\"\r", "Screenshot save as \"result\" path = \"C:/Users/gilberto.isida/Downloads/capture.png\"\r"],
            "Name": "Screenshot",
            "Params": ["attribute", "attr", "value", "var", "name"],
            "Syntax": ["Screenshot save as \"<var-name>\"", "Screenshot in <attribute>=\"<attr-value>\" save as \"<var-name>\"", "Screenshot save as \"<var-name>\" path = \"<someLocalPath>\"", "Screenshot in <attribute>=\"<attr-value>\" save as \"<var-name>\" path = \"<someLocalPath>\""],
            "SyntaxDetail": [{
                "Instruction": "Screenshot save as \"<var-name>\""
            }, {
                "Instruction": "Screenshot in <attribute>=\"<attr-value>\" save as \"<var-name>\""
            }, {
                "Instruction": "Screenshot save as \"<var-name>\" path = \"<someLocalPath>\""
            }, {
                "Instruction": "Screenshot in <attribute>=\"<attr-value>\" save as \"<var-name>\" path = \"<someLocalPath>\""
            }]
        }, {
            "Description": "Selects an option in a select element, either by value or by the text contained in the options. If no attribute is specified, then browpet will use a 'magic' algorithm to search for the appropriate element in the DOM.",
            "Example": ["Select \"Ford\" in name=\"brand-list\"\r", "Select value=\"1\" in id=\"access\"\r"],
            "ExtraDocs": "https://innotekfilestore.file.core.windows.net/frida-docs/Readers/Browpet/Articles/Select.pdf",
            "Name": "Select",
            "Params": ["value", "attr", "value", "option", "text", "attribute", "option", "field"],
            "Syntax": ["Select value=\"<option>\" in \"<field>\"", "Select value=\"<value>\" in <attribute>=\"<attr-value>\"", "Select \"<option-text>\" in <attribute>=\"<attr-value>\""],
            "SyntaxDetail": [{
                "Instruction": "Select value=\"<option>\" in \"<field>\""
            }, {
                "Instruction": "Select value=\"<value>\" in <attribute>=\"<attr-value>\""
            }, {
                "Instruction": "Select \"<option-text>\" in <attribute>=\"<attr-value>\""
            }]
        }, {
            "Description": "Selects multiple options in a select element either by value or by the text contained in the options. Options must be ; separated. i.e.: \"cars;bikes;trucks\".",
            "Example": ["SelectMultiple \"Ford;Chevrolet;Fiat\" in name=\"brand-list\"\r", "SelectMultiple value=\"1;2;3;4\" in id=\"access\"\r"],
            "Name": "SelectMultiple",
            "Params": ["values", "attr", "value", "option", "texts", "attribute"],
            "Syntax": ["SelectMultiple value=\"<values>\" in <attribute>=\"<attr-value>\"", "SelectMultiple \"<option-texts>\" in <attribute>=\"<attr-value>\""],
            "SyntaxDetail": [{
                "Instruction": "SelectMultiple value=\"<values>\" in <attribute>=\"<attr-value>\""
            }, {
                "Instruction": "SelectMultiple \"<option-texts>\" in <attribute>=\"<attr-value>\""
            }]
        }, {
            "Description": "Change the browser's default directory for downloaded items. The given path must already exist. This behaviour must be set BEFORE launching the browser.",
            "Example": ["SetDownloadsPath C:\\Users\\gilberto.isida\\Documents\\FRIDA\\DEMOS\r"],
            "Name": "SetDownloadsPath",
            "Params": ["path"],
            "Syntax": ["SetDownloadsPath <path>"],
            "SyntaxDetail": [{
                "Instruction": "SetDownloadsPath <path>"
            }]
        }, {
            "Description": "Allows the browser to perform extra-actions that require the user's authorization. For now, only ['Page.setDownloadBehavior'], but support may be added later for things like PushNotifications.",
            "Example": ["SetPermission \"Page.setDownloadBehavior\"\r"],
            "Name": "SetPermission",
            "Params": ["permission"],
            "Syntax": ["SetPermission \"<permission>\""],
            "SyntaxDetail": [{
                "Instruction": "SetPermission \"<permission>\""
            }]
        }, {
            "Description": "Connect to a proxy server, given the IP address and port. This instructions must be called prior initializing Browpet.",
            "Example": ["SetProxyServer IP={145.239.85.58:9300}\r"],
            "ExtraDocs": "https://innotekfilestore.file.core.windows.net/frida-docs/Readers/Browpet/Articles/FRIDA_Proxies.pdf",
            "Name": "SetProxyServer",
            "Params": ["ipAddress"],
            "Syntax": ["SetProxyServer IP={<ipAddress>}"],
            "SyntaxDetail": [{
                "Instruction": "SetProxyServer IP={<ipAddress>}"
            }]
        }, {
            "Description": "Pauses execution the indicated amount in milliseconds.",
            "Example": ["Sleep 3000         # waits for 3 seconds\r", "Params: time\r"],
            "Name": "Sleep",
            "Syntax": ["Sleep <time>"],
            "SyntaxDetail": [{
                "Instruction": "Sleep <time>"
            }]
        }, {
            "Description": "Switches execution context to a new tab or pop up window. You can only change to the last opened tab or pop up, or to the main tab.",
            "Example": ["SwitchPage Main\r", "SwitchPage Last\r"],
            "Name": "SwitchPage",
            "Syntax": ["SwitchPage Last", "SwitchPage Main"]
        }, {
            "Description": "Writes inside an input tag. If no attribute is specified, then browpet will use a 'magic' algorithm to search for the appropriate element in the DOM.",
            "Example": ["Type \"john.doe\" in dynamic=\"username\"\r"],
            "Name": "Type",
            "Params": ["text", "attribute", "value"],
            "Syntax": ["Type \"<text>\" in \"<value>\"", "Type \"<text>\" in <attribute>=\"<value>\""],
            "SyntaxDetail": [{
                "Instruction": "Type \"<text>\" in \"<value>\""
            }, {
                "Instruction": "Type \"<text>\" in <attribute>=\"<value>\""
            }]
        }, {
            "Description": "Uploads a single or multiple local files into an input tag with \"type=file\". A global path needs to be specified. e.g. \"C:\\\\usr\\\\Desktop\\\\file.txt\". If you want to use multiple files, just separate each path with a semicolon ';' and be sure that the input supports multiple file upload.",
            "Example": ["UploadFile \"C:/Users/carlos/Documents/softtek/test.txt\" in name=\"archivo\"\r", "UploadFile \"C:/Users/OscarLaureano/Documents/test.txt;C:/Users/OscarLaureano/Videos/test 2.mp4;C:/Users/OscarLaureano/Pictures/test 4.png\" in name=\"archivo\"\r"],
            "Name": "UploadFile",
            "Params": ["path", "attribute", "attr", "value"],
            "Syntax": ["UploadFile \"<path>\" in <attribute>=\"<attr-value>\"", "UploadFile \"<path>;<path>;...<path>\" in <attribute>=\"<attr-value>\""],
            "SyntaxDetail": [{
                "Instruction": "UploadFile \"<path>\" in <attribute>=\"<attr-value>\""
            }, {
                "Instruction": "UploadFile \"<path>;<path>;...<path>\" in <attribute>=\"<attr-value>\""
            }]
        }, {
            "Description": "This function allows you to change the Useragent of your page to emulate multiple devices and browsers. You can use a predefined UserAgent (chrome/firefox/ie11/ie9/edge/opera/safari) or any other custom useragent string. You can find multiple examples of useragent strings online for many devices and operative systems. Or you can create your own according to the standard defined on the RFC 7231 section 5.5.3 (https://tools.ietf.org/html/rfc7231#section-5.5.3). More info on User Agents: https://www.sistrix.es/preguntale-a-sistrix/que-es-user-agent/",
            "Example": ["UserAgent \"chrome\"\r", "UserAgent \"firefox\"\r", "UserAgent \"ie11\"\r", "UserAgent \"ie9\"\r", "UserAgent \"edge\"\r", "UserAgent \"opera\"\r", "UserAgent \"safari\"\r", "UserAgent \"Mozilla/5.0 (iPhone; CPU iPhone OS 10_3_1 like Mac OS X) AppleWebKit/603.1.30 (KHTML, like Gecko) Version/10.0 Mobile/14E304 Safari/602.1\"\r"],
            "Name": "UserAgent",
            "Params": ["useragent"],
            "Syntax": ["UserAgent \"<useragent>\""],
            "SyntaxDetail": [{
                "Instruction": "UserAgent \"<useragent>\""
            }]
        }, {
            "Description": "This function allows you to change the size of the viewport of your browser and will resize the page. A lot of websites don't expect browsers to change size, so you should set the viewport before navigating to the page.",
            "Example": ["Viewport 1920 1080\r", "Viewport 400 700\r"],
            "Name": "Viewport",
            "Params": ["width", "height"],
            "Syntax": ["Viewport <width> <height>"],
            "SyntaxDetail": [{
                "Instruction": "Viewport <width> <height>"
            }]
        }],
        "ID": 7,
        "Keyword": "Web2",
        "Name": "Browpet Reader",
        "_FAdminKey": "Browpet"
    },
    "8": {
        "Description": "Word Reader will allow you to automate the creation of Microsoft Word documents such as reports or evidences, allowing you to add images and paragraphs in an automated way.",
        "Function": [{
            "CreationDate": "2019-Jul-03",
            "Description": "Writes text at the end of the document, creating a new paragraph.",
            "Example": ["AppendParagraph to Document1Key New paragraph goes here\r"],
            "Name": "AppendParagraph",
            "Params": ["DocumentKey", "Text"],
            "ShortDescription": "Write text at the end of the document, creating a new paragraph.",
            "Syntax": ["AppendParagraph to <DocumentKey> <Text>"],
            "SyntaxDetail": [{
                "Instruction": "AppendParagraph to <DocumentKey> <Text>"
            }]
        }, {
            "CreationDate": "2019-Jul-03",
            "Description": "Writes text at the end of the document, inside the last paragraph.",
            "Example": ["AppendText to Document1Key New text at the end of the document, inside the last paragraph\r"],
            "Name": "AppendText",
            "Params": ["DocumentKey", "Text"],
            "ShortDescription": "Write text at the end of the document, inside the last paragraph.",
            "Syntax": ["AppendText to <DocumentKey> <Text>"],
            "SyntaxDetail": [{
                "Instruction": "AppendText to <DocumentKey> <Text>"
            }]
        }, {
            "CreationDate": "2021-Jan-19",
            "Description": "Change the indent of a table in word by specifying the table title. The LeftIndent units are millimeters.",
            "Example": ["ChangeTableIndent from the document {Book1Key} with the table title {Table1} to {-27.6} millimeters\r"],
            "Name": "ChangeTableIndent",
            "Params": ["DocumentKey", "TableTitle", "LeftIndent"],
            "ShortDescription": "Change the indent of a table in word.",
            "Syntax": ["ChangeTableIndent from the document {<DocumentKey>} with the table title {<TableTitle>} to {<LeftIndent>} millimeters"],
            "SyntaxDetail": [{
                "Instruction": "ChangeTableIndent from the document {<DocumentKey>} with the table title {<TableTitle>} to {<LeftIndent>} millimeters"
            }]
        }, {
            "CreationDate": "2021-Jan-14",
            "Description": "Change the style of an specific table by selecting an existing style by its name. Table Grid, Plain Table 2, Grid Table 5 Dark, Grid Table 3 are some examples of all the posibles styles that can be used. Custom styles can also be selected just specifing the name. If the language of Word its different to english then use the style names available.",
            "Example": ["ChangeTableStyle in the document {Book1Key} with the table title {Table1} to {Table Grid}        \r"],
            "Name": "ChangeTableStyle",
            "Params": ["DocumentKey", "TableTitle", "StyleName"],
            "ShortDescription": "Change the style of an specific table.",
            "Syntax": ["ChangeTableStyle in the document {<DocumentKey>} with the table title {<TableTitle>} to {<StyleName:Table Grid|Plain Table 2|Grid Table 5 Dark|Grid Table 3>}"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["Table Grid", "Plain Table 2", "Grid Table 5 Dark", "Grid Table 3"],
                    "ParamName": "StyleName"
                }],
                "Instruction": "ChangeTableStyle in the document {<DocumentKey>} with the table title {<TableTitle>} to {<StyleName:Table Grid|Plain Table 2|Grid Table 5 Dark|Grid Table 3>}"
            }]
        }, {
            "CreationDate": "2019-Aug-12",
            "Description": "Delete the text from the whole document.",
            "Example": ["CleanDocument {Doc1Key}\r"],
            "Name": "CleanDocument",
            "Params": ["DocKey"],
            "ShortDescription": "Delete the text from the whole document.",
            "Syntax": ["CleanDocument {<DocKey>}"],
            "SyntaxDetail": [{
                "Instruction": "CleanDocument {<DocKey>}"
            }]
        }, {
            "CreationDate": "2019-Aug-12",
            "Description": "Delete the whole text from a desired page in the document.",
            "Example": ["CleanPage {2} from document {thesis}\r"],
            "Name": "CleanPage",
            "Params": ["docKey", "word"],
            "ShortDescription": "Delete the whole text in a page.",
            "Syntax": ["CleanPage {<index>} from document {<docKey>}"],
            "SyntaxDetail": [{
                "Instruction": "CleanPage {<index>} from document {<docKey>}"
            }]
        }, {
            "CreationDate": "2020-Jul-06",
            "Description": "Close an existing document by a given documentKey.",
            "Example": ["Close doc\r"],
            "Name": "Close",
            "Params": ["documentKey"],
            "ShortDescription": "Close an open Word document.",
            "Syntax": ["Close <documentKey>"],
            "SyntaxDetail": [{
                "Instruction": "Close <documentKey>"
            }]
        }, {
            "CreationDate": "2020-Dec-22",
            "Description": "Create a document custom property in an specific book. These options (text|date|number|yes or no) can be selected for the document property type. The second syntax is to check the \"link to content\" box, it is unchecked by default. When the \"yes or no\" type its selected just the values \"true\" or \"false\" can be used.",
            "Example": ["CreateCustomProperty in {Doc1Key} with the name {Field1}, type {text} and value {Text in the field}\r", "CreateCustomProperty in {Doc1Key} with the name {Checked by}, type {text} and value {Inspector 1} link to content checked\r"],
            "Name": "CreateCustomProperty",
            "Params": ["DocumentKey", "PropertyName", "PropertyType", "PropertyValue"],
            "ShortDescription": "Create a document custom property in an specific book.",
            "Syntax": ["CreateCustomProperty in {<DocumentKey>} with the name {<PropertyName>}, type {<PropertyType:text|date|number|yes or no>} and value {<PropertyValue>}", "CreateCustomProperty in {<DocumentKey>} with the name {<PropertyName>}, type {<PropertyType:text|date|number|yes or no>} and value {<PropertyValue>} link to content checked"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["text", "date", "number", "yes or no"],
                    "ParamName": "PropertyType"
                }],
                "Instruction": "CreateCustomProperty in {<DocumentKey>} with the name {<PropertyName>}, type {<PropertyType:text|date|number|yes or no>} and value {<PropertyValue>}"
            }, {
                "Constants": [{
                    "Options": ["text", "date", "number", "yes or no"],
                    "ParamName": "PropertyType"
                }],
                "Instruction": "CreateCustomProperty in {<DocumentKey>} with the name {<PropertyName>}, type {<PropertyType:text|date|number|yes or no>} and value {<PropertyValue>} link to content checked"
            }]
        }, {
            "CreationDate": "2019-Aug-12",
            "Description": "Delete certain comments from your document. Can be all of them of only that are shown.",
            "Example": ["DeleteComments {Doc1Key} all\r", "DeleteComments {Doc1Key} only shown\r"],
            "Name": "DeleteComments",
            "Params": ["DocKey"],
            "ShortDescription": "Delete comments from a document.",
            "Syntax": ["DeleteComments {<DocKey>} all", "DeleteComments {<DocKey>} only shown"],
            "SyntaxDetail": [{
                "Instruction": "DeleteComments {<DocKey>} all"
            }, {
                "Instruction": "DeleteComments {<DocKey>} only shown"
            }]
        }, {
            "CreationDate": "2020-Dec-22",
            "Description": "Delete an specific custom property in a document by name.",
            "Example": ["DeleteCustomProperty from {Doc1Key} with the name {Field1}\r"],
            "Name": "DeleteCustomProperty",
            "Params": ["DocumentKey", "PropertyName"],
            "ShortDescription": "Delete an specific custom property in a document by name.",
            "Syntax": ["DeleteCustomProperty from {<DocumentKey>} with the name {<PropertyName>}"],
            "SyntaxDetail": [{
                "Instruction": "DeleteCustomProperty from {<DocumentKey>} with the name {<PropertyName>}"
            }]
        }, {
            "CreationDate": "2020-Jul-07",
            "Description": "Closes all Word documents without saving any changes and kills all Word instances in the machine.",
            "Example": [" Dispose\r"],
            "Name": "Dispose",
            "ShortDescription": "Close all Word documents without saving any changes.",
            "Syntax": ["Dispose"]
        }, {
            "CreationDate": "2021-Sep-07",
            "Description": "Save the number of records from a mail merge source in a given variable. It is intended to be used along with \"PreviewRecord next\" syntax in a loop.",
            "Example": ["GetMailMergeCount in {doc1} and save as cuentaRegistros\r"],
            "ExtraDocs": "https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/Word Reader/GetMailMergeCount.pdf",
            "Name": "GetMailMergeCount",
            "Params": ["docKey", "variableName"],
            "ShortDescription": "Save the number of records from a mail merge source.",
            "Syntax": ["GetMailMergeCount in {<docKey>} and save as <variableName>"],
            "SyntaxDetail": [{
                "Instruction": "GetMailMergeCount in {<docKey>} and save as <variableName>"
            }]
        }, {
            "CreationDate": "2020-Dec-21",
            "Description": "Insert a field by name at the beginning or at the end of a word document. Just the option \"DocProperty\" is available for <FieldName> parameter. The \"PropertyName\" is also known as a \"Field property\".",
            "Example": ["InsertField type {DocProperty} with the name {Field1} and preserve formatting {true} in the document {Doc1Key} at {end}\r"],
            "Name": "InsertField",
            "Params": ["PropertyName", "DocumentKey", "formatting", "position"],
            "ShortDescription": "Insert a field by name in a word document.",
            "Syntax": ["InsertField type {<FieldName>} with the name {<PropertyName>} and preserve formatting {<formatting:true|false>} in the document {<DocumentKey>} at {<position:beginning|end>}"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["true", "false"],
                    "ParamName": "formatting"
                }, {
                    "Options": ["beginning", "end"],
                    "ParamName": "position"
                }],
                "Instruction": "InsertField type {<FieldName>} with the name {<PropertyName>} and preserve formatting {<formatting:true|false>} in the document {<DocumentKey>} at {<position:beginning|end>}"
            }]
        }, {
            "CreationDate": "2019-Nov-21",
            "Description": "Inserts an image (.jpg, .jpeg, .jfif, .jpe, .png, .tiff, .tif, .bmp, .dib, .rle, .bmz) given its file path into the indicated Word document. It is by default appended at the end of the document, unless you specify a placeholderText; that will trigger a Search of the text, replacing the first occurrence with the given image. Insertion within a table is done by indexes, starting with 1.",
            "Example": ["InsertImage from {\"C:\\Users\\username\\Pictures\\Image.png\"} into {\"doc1Key\"}\r", "InsertImage from {\"C:\\Users\\username\\Pictures\\Image.png\"} into {\"doc1Key\"} placeholder {\"imagePlaceholder\"}\r", "InsertImage from {\"C:\\Users\\username\\Pictures\\Image.png\"} into {\"doc1Key\"} in table 1 cell [1,3]\r"],
            "Name": "InsertImage",
            "Params": ["ImagePath", "DocumentKey", "PlaceholderText", "TableIndex", "Row", "Column"],
            "ShortDescription": "Inserts an image into a Word document.",
            "Syntax": ["InsertImage from {\"<ImagePath>\"} into {\"<DocumentKey>\"}", "InsertImage from {\"<ImagePath>\"} into {\"<DocumentKey>\"} placeholder {\"<PlaceholderText>\"}", "InsertImage from {\"<ImagePath>\"} into {\"<DocumentKey>\"} in table <TableIndex> cell [<Row>,<Column>]"],
            "SyntaxDetail": [{
                "Instruction": "InsertImage from {\"<ImagePath>\"} into {\"<DocumentKey>\"}"
            }, {
                "Instruction": "InsertImage from {\"<ImagePath>\"} into {\"<DocumentKey>\"} placeholder {\"<PlaceholderText>\"}"
            }, {
                "Instruction": "InsertImage from {\"<ImagePath>\"} into {\"<DocumentKey>\"} in table <TableIndex> cell [<Row>,<Column>]"
            }]
        }, {
            "CreationDate": "2019-Nov-21",
            "Description": "Inserts all the images (.jpg, .jpeg, .jfif, .jpe, .png, .tiff, .tif, .bmp, .dib, .rle, .bmz) found in the given folder path into the given Word document. A horizontal line after each image is optional. The images can be inserted in reverse order.",
            "Example": ["InsertImages from folder {\"C:\\Users\\username\\Pictures\"} into {\"Document1Key\"} with line separator {\"Yes\"} in reverse order {\"No\"}\r"],
            "Name": "InsertImages",
            "Params": ["FolderPath", "DocumentKey", "lineSep", "reverse"],
            "ShortDescription": "Insert all the images from a folder into a Word document.",
            "Syntax": ["InsertImages from folder {\"<FolderPath>\"} into {\"<DocumentKey>\"} with line separator {\"<lineSep:Yes|No>\"} in reverse order {\"<reverse:Yes|No>\"}"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["Yes", "No"],
                    "ParamName": "lineSep"
                }, {
                    "Options": ["Yes", "No"],
                    "ParamName": "reverse"
                }],
                "Instruction": "InsertImages from folder {\"<FolderPath>\"} into {\"<DocumentKey>\"} with line separator {\"<lineSep:Yes|No>\"} in reverse order {\"<reverse:Yes|No>\"}"
            }]
        }, {
            "CreationDate": "2021-Jan-14",
            "Description": "Insert a table at the beginning or at the end of a document based on a JSON in a txt file. This is an example of a JSON that can be used in this function [[\"1\",\"Number\",\"Name\",\"Sec\"],[\"2\",\"12345\",\"John Simth\",\"0\"]]. If the variable syntax is used the variable value must be a list of objects or a list of lists of strings.",
            "Example": ["InsertJSONTable from {[[\"1\",\"Number\",\"Name\",\"Sec\"],[\"2\",\"12345\",\"John Simth\",\"0\"]]} in the document {Book1Key} at {end}\r", "InsertJSONTable from {[[\"1\",\"Number\",\"Name\",\"Sec\"],[\"2\",\"12345\",\"John Simth\",\"0\"]]} in the document {Book1Key} at {beginning} with the title {Table1}\r", "InsertJSONTable from the file {C:\\Users\\user\\Downloads\\PruebaJSON.txt} in the document {Book1Key} at {beginning}\r", "InsertJSONTable from the file {C:\\Users\\user\\Downloads\\PruebaJSON.txt} in the document {Book1Key} at {end} with the title {Table1}\r", "InsertJSONTable from the variable {VariableName} in the document {Book1Key} at {end}\r", "InsertJSONTable from the variable {VariableName} in the document {Book1Key} at {beginning} with the title {Table1}\r"],
            "Name": "InsertJSONTable",
            "Params": ["DocumentKey", "FilePath", "TableTitle", "VariableName", "JSONString", "position"],
            "ShortDescription": "Insert a table in a document based on a JSON.",
            "Syntax": ["InsertJSONTable from {<JSONString>} in the document {<DocumentKey>} at {<position:beginning|end>}", "InsertJSONTable from {<JSONString>} in the document {<DocumentKey>} at {<position:beginning|end>} with the title {<TableTitle>}", "InsertJSONTable from the file {<FilePath>} in the document {<DocumentKey>} at {<position:beginning|end>}", "InsertJSONTable from the file {<FilePath>} in the document {<DocumentKey>} at {<position:beginning|end>} with the title {<TableTitle>}", "InsertJSONTable from the variable {<VariableName>} in the document {<DocumentKey>} at {<position:beginning|end>}", "InsertJSONTable from the variable {<VariableName>} in the document {<DocumentKey>} at {<position:beginning|end>} with the title {<TableTitle>}"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["beginning", "end"],
                    "ParamName": "position"
                }],
                "Instruction": "InsertJSONTable from {<JSONString>} in the document {<DocumentKey>} at {<position:beginning|end>}"
            }, {
                "Constants": [{
                    "Options": ["beginning", "end"],
                    "ParamName": "position"
                }],
                "Instruction": "InsertJSONTable from {<JSONString>} in the document {<DocumentKey>} at {<position:beginning|end>} with the title {<TableTitle>}"
            }, {
                "Constants": [{
                    "Options": ["beginning", "end"],
                    "ParamName": "position"
                }],
                "Instruction": "InsertJSONTable from the file {<FilePath>} in the document {<DocumentKey>} at {<position:beginning|end>}"
            }, {
                "Constants": [{
                    "Options": ["beginning", "end"],
                    "ParamName": "position"
                }],
                "Instruction": "InsertJSONTable from the file {<FilePath>} in the document {<DocumentKey>} at {<position:beginning|end>} with the title {<TableTitle>}"
            }, {
                "Constants": [{
                    "Options": ["beginning", "end"],
                    "ParamName": "position"
                }],
                "Instruction": "InsertJSONTable from the variable {<VariableName>} in the document {<DocumentKey>} at {<position:beginning|end>}"
            }, {
                "Constants": [{
                    "Options": ["beginning", "end"],
                    "ParamName": "position"
                }],
                "Instruction": "InsertJSONTable from the variable {<VariableName>} in the document {<DocumentKey>} at {<position:beginning|end>} with the title {<TableTitle>}"
            }]
        }, {
            "CreationDate": "2019-Jul-03",
            "Description": "Loads a document from a local path to the docs dictionary.",
            "Example": ["LoadDocument \"c:\\Users\\username\\Desktop\\MyDoc.docx\" as DocumentKey\r"],
            "Name": "LoadDocument",
            "Params": ["FilePath", "DocKey"],
            "ShortDescription": "Open a Word document.",
            "Syntax": ["LoadDocument \"<FilePath>\" as <DocumentKey>"],
            "SyntaxDetail": [{
                "Instruction": "LoadDocument \"<FilePath>\" as <DocumentKey>"
            }]
        }, {
            "CreationDate": "2020-Dec-22",
            "Description": "Modify an specific custom property in a document. When the type is modified, the value of the property will be null. To give the property a value it can be use the value syntax.",
            "Example": ["ModifyCustomProperty from {Doc1Key} with the name {Checked by} to the value {Text in the field}\r", "ModifyCustomProperty from {Doc1Key} with the name {Field1} to the type {text}        \r"],
            "Name": "ModifyCustomProperty",
            "Params": ["DocKey", "PropertyName", "PropertyValue", "PropertyType"],
            "ShortDescription": "Modify an specific custom property in a document.",
            "Syntax": ["ModifyCustomProperty from {<DocumentKey>} with the name {<PropertyName>} to the value {<PropertyValue>}", "ModifyCustomProperty from {<DocumentKey>} with the name {<PropertyName>} to the type {<PropertyType:text|date|number|yes or no>}"],
            "SyntaxDetail": [{
                "Instruction": "ModifyCustomProperty from {<DocumentKey>} with the name {<PropertyName>} to the value {<PropertyValue>}"
            }, {
                "Constants": [{
                    "Options": ["text", "date", "number", "yes or no"],
                    "ParamName": "PropertyType"
                }],
                "Instruction": "ModifyCustomProperty from {<DocumentKey>} with the name {<PropertyName>} to the type {<PropertyType:text|date|number|yes or no>}"
            }]
        }, {
            "CreationDate": "2020-Dec-22",
            "Description": "Modify an specific property value in a document.",
            "Example": ["ModifyProperty from {Doc1Key} with the name {Checked by} to the value {Text in the field}        \r"],
            "Name": "ModifyProperty",
            "Params": ["DocumentKey", "PropertyName", "PropertyValue", "position"],
            "ShortDescription": "Modify an specific property value in a document.",
            "Syntax": ["ModifyProperty from {<DocumentKey>} with the name {<PropertyName>} to the value {<PropertyValue>}"],
            "SyntaxDetail": [{
                "Instruction": "ModifyProperty from {<DocumentKey>} with the name {<PropertyName>} to the value {<PropertyValue>}"
            }]
        }, {
            "CreationDate": "2019-Nov-20",
            "Description": "Creates a new Word document in a given local path. The document name must be given. Support only for .docx",
            "Example": ["NewDocument in {\"C:\\Users\\username\\Desktop\"} named {\"Document2.docx\"} as {\"Document2Key\"}\r"],
            "Name": "NewDocument",
            "Params": ["FolderPath", "FileName", "DocumentKey"],
            "ShortDescription": "Create a new Word document.",
            "Syntax": ["NewDocument in {\"<FolderPath>\"} named {\"<FileName>\"} as {\"<DocumentKey>\"}"],
            "SyntaxDetail": [{
                "Instruction": "NewDocument in {\"<FolderPath>\"} named {\"<FileName>\"} as {\"<DocumentKey>\"}"
            }]
        }, {
            "CreationDate": "2021-Sep-07",
            "Description": "Preview the mailing results from a given a record number or a recipient to be found by value in a mail merged document. First, last, next, previous syntax will preview mail merge with the records in the given position. When looking for an especific record, fieldName + value can be used.",
            "Example": ["PreviewRecord {next} in {documento}\r", "PreviewRecord with field {Apellido} and value {Juarez} in {Contrato}\r"],
            "ExtraDocs": "https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/Word Reader/PreviewRecord.pdf",
            "Name": "PreviewRecord",
            "Params": ["docKey", "fieldName", "fieldValue", "recordPosition"],
            "ShortDescription": "Preview the results from a certain record of a mail merged document.",
            "Syntax": ["PreviewRecord {<recordPosition:first|last|next|previous>} in {<docKey>}", "PreviewRecord with field {<fieldName>} and value {<fieldValue>} in {<docKey>}"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["first", "last", "next", "previous"],
                    "ParamName": "recordPosition"
                }],
                "Instruction": "PreviewRecord {<recordPosition:first|last|next|previous>} in {<docKey>}"
            }, {
                "Instruction": "PreviewRecord with field {<fieldName>} and value {<fieldValue>} in {<docKey>}"
            }]
        }, {
            "CreationDate": "2021-Jan-19",
            "Description": "Change the total size, cells height size (row) or cells width size (column) of a table in word. For some syntaxis it can be specified by percentage or by millimeters.",
            "Example": ["ResizeTable by percentage to {50} in the document {Book1Key} with the table title {Table1}\r", "ResizeTable by millimeters to {200} in the document {Book1Key} with the table title {Table1}\r", "ResizeTable cells height by millimeters to exactly {40} in the document {Book1Key} with the table title {Table1}\r", "ResizeTable cells height by millimeters to at least {35} in the document {Book1Key} with the table title {Table1}\r", "ResizeTable cells width by millimeters to {50} in the document {Book1Key} with the table title {Tabla1}\r", "ResizeTable cells width by percentage to {55} in the document {Book1Key} with the table title {Tabla1}\r"],
            "Name": "ResizeTable",
            "Params": ["DocumentKey", "Aproximation", "Unit", "TableTitle", "TableSize"],
            "ShortDescription": "Change the size of a table in word.",
            "Syntax": ["ResizeTable by <Unit:percentage|millimeters> to {<TableSize>} in the document {<DocumentKey>} with the table title {<TableTitle>}", "ResizeTable cells height by millimeters to <Aproximation:at least|exactly> {<CellsHeight>} in the document {<DocumentKey>} with the table title {<TableTitle>}", "ResizeTable cells width by <Unit:percentage|millimeters> to {<CellsWidth>} in the document {<DocumentKey>} with the table title {<TableTitle>}"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["percentage", "millimeters"],
                    "ParamName": "Unit"
                }],
                "Instruction": "ResizeTable by <Unit:percentage|millimeters> to {<TableSize>} in the document {<DocumentKey>} with the table title {<TableTitle>}"
            }, {
                "Constants": [{
                    "Options": ["at least", "exactly"],
                    "ParamName": "Aproximation"
                }],
                "Instruction": "ResizeTable cells height by millimeters to <Aproximation:at least|exactly> {<CellsHeight>} in the document {<DocumentKey>} with the table title {<TableTitle>}"
            }, {
                "Constants": [{
                    "Options": ["percentage", "millimeters"],
                    "ParamName": "Unit"
                }],
                "Instruction": "ResizeTable cells width by <Unit:percentage|millimeters> to {<CellsWidth>} in the document {<DocumentKey>} with the table title {<TableTitle>}"
            }]
        }, {
            "CreationDate": "2019-Jul-31",
            "Description": "Saves a document in its original path. --- ( NOT SAVE AS ) ---.",
            "Example": ["Save Document1Key\r"],
            "Name": "Save",
            "Params": ["DocumentKey"],
            "ShortDescription": "Save a Word document.",
            "Syntax": ["Save <DocumentKey>"],
            "SyntaxDetail": [{
                "Instruction": "Save <DocumentKey>"
            }]
        }, {
            "CreationDate": "2019-Jul-29",
            "Description": "Save a document with a diferent name, with the changes made at the original file. This file is saved in the same path as the original file. It can be saved in .docx or .pdf format.",
            "Example": ["SaveDocAs {DocKey} as {Doc_Edited}\r", "SaveDocAs pdf {DocKey} as {docPdfVersion}\r"],
            "Name": "SaveDocAs",
            "Params": ["DocKey", "FileName"],
            "ShortDescription": "Save a Word document with a diferent name.",
            "Syntax": ["SaveDocAs {<DocKey>} as {<FileName>}", "SaveDocAs PDF {<DocKey>} as {<FileName>}"],
            "SyntaxDetail": [{
                "Instruction": "SaveDocAs {<DocKey>} as {<FileName>}"
            }, {
                "Instruction": "SaveDocAs PDF {<DocKey>} as {<FileName>}"
            }]
        }, {
            "CreationDate": "2021-Sep-07",
            "Description": "Select the recipients in a mail merged document. The source file must be an excel file with a table with headers. Only letter type mail merge is available.",
            "Example": ["SelectRecipients in {libro} from the excel source {C:\\Users\\user.surname\\Documentos\\source.xlsx} sheet {Sheet1}\r"],
            "ExtraDocs": "https://innotekfilestore.file.core.windows.net/automation/ExtraDocsFRIDA/Word Reader/SelectRecipients.pdf",
            "Name": "SelectRecipients",
            "Params": ["docKey", "excelFilePath", "sheetName"],
            "ShortDescription": "Select the recipients in a mail merged document.",
            "Syntax": ["SelectRecipients in {<docKey>} from the excel source {<excelFilePath>} sheet {<sheetName>}"],
            "SyntaxDetail": [{
                "Instruction": "SelectRecipients in {<docKey>} from the excel source {<excelFilePath>} sheet {<sheetName>}"
            }]
        }, {
            "CreationDate": "2019-Nov-25",
            "Description": "Writes a paragraph with the given text in the given Word document. The paragraph has a new line before and after. Placeholder syntax, replaces the text where the placeholder is found. Table syntax, can insert text in a table indicated by index, starting with 1. Row and column indexes start with 1. To insert New Lines between text, use {NewLine}.",
            "Example": ["WriteText {\"Write this text in the document\"} to {\"WordDoc\"}\r", "WriteText {\"NewText\"} to {\"WordDoc\"} placeholder {\"TargetText\"}\r", "WriteText {\"Turing FRIDA by Softtek\"} to {\"WordDoc\"} textbox {\"FullName\"}\r", "WriteText {\"MyFavoriteTableCell\"} to {\"WordDoc\"} in table 1 cell [3,2]\r"],
            "Name": "WriteText",
            "Params": ["Text", "DocumentKey", "PlaceHolder", "TextboxPlaceHolder", "TableIndex", "Row", "Column"],
            "ShortDescription": "Write a text in the given Word document.",
            "Syntax": ["WriteText {\"<Text>\"} to {\"<DocumentKey>\"}", "WriteText {\"<Text>\"} to {\"<DocumentKey>\"} placeholder {\"<PlaceHolder>\"}", "WriteText {\"<Text>\"} to {\"<DocumentKey>\"} textbox {\"<TextboxPlaceHolder>\"}", "WriteText {\"<Text>\"} to {\"<DocumentKey>\"} in table <TableIndex> cell [<Row>,<Column>]"],
            "SyntaxDetail": [{
                "Instruction": "WriteText {\"<Text>\"} to {\"<DocumentKey>\"}"
            }, {
                "Instruction": "WriteText {\"<Text>\"} to {\"<DocumentKey>\"} placeholder {\"<PlaceHolder>\"}"
            }, {
                "Instruction": "WriteText {\"<Text>\"} to {\"<DocumentKey>\"} textbox {\"<TextboxPlaceHolder>\"}"
            }, {
                "Instruction": "WriteText {\"<Text>\"} to {\"<DocumentKey>\"} in table <TableIndex> cell [<Row>,<Column>]"
            }]
        }],
        "ID": 8,
        "Keyword": "Word",
        "Name": "Word Reader",
        "_FAdminKey": "Word"
    },
    "9": {
        "Description": "This is a Reader that enables FRIDA to connect and perform queries in databases. You must only supply a valid ADO.NET connection string, and your SQL script. If it works as you expect it to work, then FRIDA can orchestrate it for you at any point of your RPA. The supported database types are SQL_Server , MySQL and ORACLE.",
        "Function": [{
            "CreationDate": "2019-Oct-01",
            "Description": "Adds a db connection string to the dictionary of available databases. By default, all connections string are assumed as SQL_Server, unless you specify the type (SQL_SERVER, MY_SQL, ORACLE, SAP_HANA, DB2). SAP_HANA > Requires to install driver > SAP_HANA Client for Windows.",
            "Example": ["Connect to DB connectionstring={Server=tcp:server,1433;Initial Catalog=thecat;Persist Security Info=False;User ID=*****;Password=*****;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;} name={myDB}\r", "Connect to DB connectionstring={Server=tcp:server,1433;Initial Catalog=thecat;Persist Security Info=False;User ID=*****;Password=*****;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;} name={myDB} type={MY_SQL}\r", "Connect to DB connectionstring={Server=tcp:server;UserName=*****;Password=*****;} name={myDB} type={SAP_HANA}\r", "Connect to DB connectionstring={database = SAMPLE; uid = unusuario; pwd = *******;} name={myDB} type={DB2}\r"],
            "Name": "Connect",
            "Params": ["conString", "dbKey", "type"],
            "ShortDescription": "Connect to a DB using a connection string.",
            "Syntax": ["Connect to DB connectionstring={<conString>} name={<dbKey>}", "Connect to DB connectionstring={<conString>} name={<dbKey>} type={<sqlType:SQL_SERVER|MY_SQL|ORACLE|SAP_HANA|DB2>}"],
            "SyntaxDetail": [{
                "Instruction": "Connect to DB connectionstring={<conString>} name={<dbKey>}"
            }, {
                "Constants": [{
                    "Options": ["SQL_SERVER", "MY_SQL", "ORACLE", "SAP_HANA", "DB2"],
                    "ParamName": "sqlType"
                }],
                "Instruction": "Connect to DB connectionstring={<conString>} name={<dbKey>} type={<sqlType:SQL_SERVER|MY_SQL|ORACLE|SAP_HANA|DB2>}"
            }]
        }, {
            "CreationDate": "2012-Jun-12",
            "Description": "Executes a SQL query (Like RunOutputQuery), based on a separate txt file (for legibility) that must be included in the process' files. The output data will be saved in a CSV file on the given path. Alternatively, you can write an inline query instead of giving a txt.",
            "Example": ["QueryToCsv {GetPersons.sql} in {mybd} save as {persons}\r", "QueryToCsv {GetProducts.txt} in {mybd} save as {products}\r", "QueryToCsv {MyQuery.txt} in {mybd} save as {C:\\Users\\MyUser\\Desktop\\QueryResults\\Result.csv}\r", "QueryToCsv {Select * from users} in {mybd} save as {products}\r"],
            "Name": "QueryToCsv",
            "Params": ["script", "dbkey", "csvfilepath"],
            "ShortDescription": "Execute a SQL query using a file and save the result in a CSV file.",
            "Syntax": ["QueryToCsv {<script>} in {<dbkey>} save as {<csvfilepath>}"],
            "SyntaxDetail": [{
                "Instruction": "QueryToCsv {<script>} in {<dbkey>} save as {<csvfilepath>}"
            }]
        }, {
            "CreationDate": "2019-Oct-21",
            "Description": "Executes a SQL query (Insert, Update, CreateTable, etc.), based on a separate txt or sql file (for legibility) that must be included in the process' files. Alternatively, you can write an inline query instead of giving a txt. \\nNote: semicolons at the end must be removed.",
            "Example": ["RunInputQuery {UpdateProduct.sql} in {mybd}\r", "RunInputQuery {InsertProduct.txt} in {mybd}\r", "RunInputQuery {update users set name = 'Joe' where iduser = 3} in {mybd}\r"],
            "Name": "RunInputQuery",
            "Params": ["script", "dbkey"],
            "ShortDescription": "Execute a SQL query (Insert, Update, CreateTable, etc.) using a file.",
            "Syntax": ["RunInputQuery {<script>} in {<dbkey>}"],
            "SyntaxDetail": [{
                "Instruction": "RunInputQuery {<script>} in {<dbkey>}"
            }]
        }, {
            "CreationDate": "2021-Aug-06",
            "Description": "Executes many DML and DDL SQL instructions (Insert, Update, CreateTable, etc.), based on a separate txt file (for legibility) that must be included in the process' files. The instructions must end with \";\". Comments are allowed. **NOTE** Currently only Oracle DB can be used.",
            "Example": ["RunMultipleInputQueries {UpdateProducts.sql} in {mybd}\r", "RunMultipleInputQueries {InsertProducts.txt} in {mybd}\r"],
            "Name": "RunMultipleInputQueries",
            "Params": ["script", "dbkey"],
            "ShortDescription": "Execute many DML and DDL SQL instructions (Insert, Update, CreateTable, etc.) using a file.",
            "Syntax": ["RunInputQuery {<script>} in {<dbkey>}"],
            "SyntaxDetail": [{
                "Instruction": "RunInputQuery {<script>} in {<dbkey>}"
            }]
        }, {
            "CreationDate": "2019-Oct-01",
            "Description": "Execute an SQL (Select) query or multiple queries separated by \";\", based on a separate txt or sql file (for readability) that should be included in the process files. The output data will be stored in a variable List <List <string>> 4 and when there are multiple queries, a counter will be added. In addition, an automatic variable \"query_field_names\", \"query_field_names2\", etc will be saved, containing the names of the query fields, dynamically depending on your specific query. Alternatively, you can write a query online instead of providing a txt or sql. (Optional). You can specify the output format of a date or an integer ",
            "Example": ["RunOutputQuery {Query.sql} in {mybd} as {products}\r", "RunOutputQuery {GetProducts.txt} in {mybd} as {products}\r", "RunOutputQuery {Select * from users} in {mybd} as {products}\r", "RunOutputQuery {test.sql} in {users} as {Dates} with_format \"yyyy-MM-dd\"\r"],
            "Name": "RunOutputQuery",
            "Params": ["script", "dbkey"],
            "ShortDescription": "Executes a SQL query (Select) using a file.",
            "Syntax": ["RunOutputQuery {<script>} in {<dbkey>} as {<varName>}"],
            "SyntaxDetail": [{
                "Instruction": "RunOutputQuery {<script>} in {<dbkey>} as {<varName>}"
            }]
        }, {
            "CreationDate": "2020-May-21",
            "Description": "Executes a Stored Procedure, based on a separate txt or sql file that must be included in the process' files.",
            "Example": ["RunStoredProcedure {SP_Users.sql} in {mybd} as {users}\r", "RunStoredProcedure {SPProduct.txt} in {mybd} as {resultado}\r"],
            "Name": "RunStoredProcedure",
            "Params": ["script", "dbkey"],
            "ShortDescription": "Execute a Stored Procedure.",
            "Syntax": ["RunStoredProcedure {<script>} in {<dbkey>} as {<varname>}"],
            "SyntaxDetail": [{
                "Instruction": "RunStoredProcedure {<script>} in {<dbkey>} as {<varname>}"
            }]
        }, {
            "CreationDate": "2021-Aug-20",
            "Description": "Prints the result of the queries in the registry, as well as query to execute and name of fields. By default, it is disabled. You can activate any of the options separately",
            "Example": ["ShowQueryInfo script={true}\r", "ShowQueryInfo fieldNames={true}\r", "ShowQueryInfo results={true}\r", "ShowQueryInfo script={true} fieldNames={true}\r", "ShowQueryInfo script={true} results={true}\r", "ShowQueryInfo fieldNames={true} results={false}\r", "ShowQueryInfo script={true} fieldNames={true} results={false}\r"],
            "Name": "ShowQueryInfo",
            "Params": ["printscript", "printfieldsname", "printresults"],
            "ShortDescription": "Logs the query to execute, fields, and query result",
            "Syntax": ["ShowQueryInfo script={<printscript:true|false>} fieldNames={<printfieldsname:true|false>} results={<printresults:true|false>}"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["true", "false"],
                    "ParamName": "printscript"
                }, {
                    "Options": ["true", "false"],
                    "ParamName": "printfieldsname"
                }, {
                    "Options": ["true", "false"],
                    "ParamName": "printresults"
                }],
                "Instruction": "ShowQueryInfo script={<printscript:true|false>} fieldNames={<printfieldsname:true|false>} results={<printresults:true|false>}"
            }]
        }],
        "ID": 9,
        "Keyword": "DB",
        "Name": "DB Reader",
        "_FAdminKey": "DB"
    },
    "10": {
        "Description": "File Reader allows you to interact with your local files on your computer having the ability to move, copy, list, read or even create a new one directly from your script.",
        "Function": [{
            "CreationDate": "2019-Dec-17",
            "Description": "Changes the encoding of a txt file. ANSI to UTF-8 for example. Currently source can only be ansi and destFormat can only be utf8.",
            "Example": ["ChangeEncoding ansi to utf8 \"C:\\Users\\gilberto.isida\\Downloads\\file.txt\"\r"],
            "Name": "ChangeEncoding",
            "Params": ["source", "destFormat", "filePath"],
            "ShortDescription": "Change the encoding of a txt file.",
            "Syntax": ["ChangeEncoding <source> to <destFormat> \"<filePath>\""],
            "SyntaxDetail": [{
                "Instruction": "ChangeEncoding <source> to <destFormat> \"<filePath>\""
            }]
        }, {
            "CreationDate": "2020-Apr-14",
            "Description": "Check if a directory exists in a path creating an error if it doesn't. There's an available syntax for the instruction to return a true/false string stored in a variable.",
            "Example": ["CheckIfDirExist in the path \"C:\\Usersodrigo.gracia\\Desktop\" with the name \"Images\"\r", "CheckIfDirExist in the path \"C:\\Usersodrigo.gracia\\Desktop\" with the name \"Images\" and save result as \"Result\"\r"],
            "Name": "CheckIfDirExist",
            "Params": ["Path", "FolderName", "VarName"],
            "ShortDescription": "Check if a directory exists in a path creating an error if it doesn't.",
            "Syntax": ["CheckIfDirExist in the path \"<Path>\" with the name \"<FolderName>\"", "CheckIfDirExist in the path \"<Path>\" with the name \"<FolderName>\" and save result as \"<VarName>\""],
            "SyntaxDetail": [{
                "Instruction": "CheckIfDirExist in the path \"<Path>\" with the name \"<FolderName>\""
            }, {
                "Instruction": "CheckIfDirExist in the path \"<Path>\" with the name \"<FolderName>\" and save result as \"<VarName>\""
            }]
        }, {
            "CreationDate": "2020-Nov-06",
            "Description": "Check if a file exists in a directory creating an error if it doesn't. By using the syntax \"and save result as\" you can store the result as a variable (true, false) that can be used with another logic.",
            "Example": ["CheckIfFileExists in the directory \"C:\\Users\\andres.cruz\\Desktop\" with the name \"ExceliaDemoFile.xlsx\"\r", "CheckIfFileExists in the directory \"C:\\Users\\andres.cruz\\Desktop\" with the name \"ExceliaDemoFile.xlsx\" and save result as \"Success\"\r"],
            "Name": "CheckIfFileExists",
            "Params": ["Directory", "FileName", "VariableName"],
            "ShortDescription": "Check if a file exists in a directory creating an error if it doesn't or return true/false as the content of a variable.",
            "Syntax": ["CheckIfFileExists in the directory \"<Directory>\" with the name \"<FileName>\"", "CheckIfFileExists in the directory \"<Directory>\" with the name \"<FileName>\" and save result as \"<VariableName>\""],
            "SyntaxDetail": [{
                "Instruction": "CheckIfFileExists in the directory \"<Directory>\" with the name \"<FileName>\""
            }, {
                "Instruction": "CheckIfFileExists in the directory \"<Directory>\" with the name \"<FileName>\" and save result as \"<VariableName>\""
            }]
        }, {
            "CreationDate": "2020-Nov-10",
            "Description": "This function converts a folder into a .zip file and saves de final path in a variable.",
            "Example": ["Compress this folder path \"C:\\Users\\productivity\\Desktop\\Excel\" to this zipPath \"C:\\Users\\productivity\\Desktop\\Excel.zip\" and save as zipPath\r"],
            "Name": "Compress",
            "Params": ["sourcePath", "zipPath", "varKey"],
            "ShortDescription": "Compress a folder.",
            "Syntax": ["Compress this folder path \"<sourcePath>\" to this zipPath \"<zipPath>\" and save as <varKey>"],
            "SyntaxDetail": [{
                "Instruction": "Compress this folder path \"<sourcePath>\" to this zipPath \"<zipPath>\" and save as <varKey>"
            }]
        }, {
            "CreationDate": "2020-Dec-11",
            "Description": "Copies a directory to another location, optionally you can decide whether to copy all files and inner directories or not.",
            "Example": ["CopyDirectory source={C:\\Users\\gilberto.isida\\Documents\\Directorio - Prueba Funci\u00f3n 2021} destination={D:\\Backup\\PruebaCopyDir} recursive={true} overwrite={false}\r"],
            "Name": "CopyDirectory",
            "Params": ["srcPath", "destPath", "recursive", "overwrite"],
            "ShortDescription": "Copies a directory to another location.",
            "Syntax": ["CopyDirectory source={<srcPath>} destination={<destPath>} recursive={<recursive:true|false>} overwrite={<overwrite:true|false>}"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["true", "false"],
                    "ParamName": "recursive"
                }, {
                    "Options": ["true", "false"],
                    "ParamName": "overwrite"
                }],
                "Instruction": "CopyDirectory source={<srcPath>} destination={<destPath>} recursive={<recursive:true|false>} overwrite={<overwrite:true|false>}"
            }]
        }, {
            "CreationDate": "2019-Mar-13",
            "Description": "Copies the file in InputFolder and moves it to OutputFolder with the given name, and save it in theVariablesHelper.vars diccionary.",
            "Example": ["CopyFile \"C:\\Users\\andres.cruz\\Downloads\\Template.xlsx\" to \"C:\\Users\\andres.cruz\\Downloads\\Reporte20190214.xlsx\" and save as \"copiado\"\r"],
            "Name": "CopyFile",
            "Params": ["InputFolderPathPlusName", "OutputFolderPathPlusName", "Variable"],
            "ShortDescription": "Copy a file from one destination to another.",
            "Syntax": ["CopyFile \"<InputFolderPathPlusName>\" to \"<OutputFolderPathPlusName>\" and save as \"<Variable>\""],
            "SyntaxDetail": [{
                "Instruction": "CopyFile \"<InputFolderPathPlusName>\" to \"<OutputFolderPathPlusName>\" and save as \"<Variable>\""
            }]
        }, {
            "CreationDate": "2021-Jul-05",
            "Description": "Delete all files from a specific folder in a certain path. You can delete the files of a specific extension",
            "Example": ["DeleteAllFiles from \"C:\\Users\\Admin\\Desktop\\ToDelete\" including subfolders\r", "DeleteAllFiles from \"C:\\Users\\Admin\\Desktop\\ToDelete\"\r", "DeleteAllFiles from \"C:\\Users\\Admin\\Desktop\\ToDelete\" with the extension \".docx\"\r"],
            "Name": "DeleteAllFiles",
            "Params": ["FolderPath", "FileExtension"],
            "ShortDescription": "Delete files from a folder.",
            "Syntax": ["DeleteAllFiles from \"<FolderPath>\"", "DeleteAllFiles from \"<FolderPath>\" including subfolders", "DeleteAllFiles from \"<FolderPath>\" with the extension \"<FileExtension>\""],
            "SyntaxDetail": [{
                "Instruction": "DeleteAllFiles from \"<FolderPath>\""
            }, {
                "Instruction": "DeleteAllFiles from \"<FolderPath>\" including subfolders"
            }, {
                "Instruction": "DeleteAllFiles from \"<FolderPath>\" with the extension \"<FileExtension>\""
            }]
        }, {
            "CreationDate": "2019-Jul-01",
            "Description": "Deletes a specific file in a given path. The file name needs to include the extension.",
            "Example": ["DeleteFile log.txt from \"C:\\Users\\productivity\\Desktop\"\r"],
            "Name": "DeleteFile",
            "Params": ["FileName", "Path"],
            "ShortDescription": "Delete a file.",
            "Syntax": ["DeleteFile <FileName> from \"<path>\""],
            "SyntaxDetail": [{
                "Instruction": "DeleteFile <FileName> from \"<path>\""
            }]
        }, {
            "CreationDate": "2019-Dec-26",
            "Description": "Deletes a specific folder in a given path. It may delete recursively the content within, using the \"and its content\" syntax.",
            "Example": ["DeleteFolder from \"C:\\Users\\Admin\\Desktop\\ToDelete\"\r", "DeleteFolder and its content from \"C:\\Users\\Admin\\Desktop\\ToDelete\"\r"],
            "Name": "DeleteFolder",
            "Params": ["Path"],
            "ShortDescription": "Delete a folder.",
            "Syntax": ["DeleteFolder from \"<path>\"", "DeleteFolder and its content from \"<path>\""],
            "SyntaxDetail": [{
                "Instruction": "DeleteFolder from \"<path>\""
            }, {
                "Instruction": "DeleteFolder and its content from \"<path>\""
            }]
        }, {
            "CreationDate": "2019-Dec-17",
            "Description": "Extract the files from a ZIP, 7Z or TAR compressed file into a specific location. The paths of the extracted files are saved as a list variable.",
            "Example": ["ExtractFile \"C:\\Users\\andres.cruz\\Desktop\\DirecCartolas.zip\" into \"C:\\Users\\andres.cruz\\Desktop\\Test\\\" delete the zip and save as \"Res\"\r"],
            "Name": "ExtractFile",
            "Params": ["inputCompressedFile", "outputDirectory", "varName"],
            "ShortDescription": "Extract the files from a compressed file.",
            "Syntax": ["ExtractFile \"<inputCompressedFile>\" into \"<outputDirectory>\" delete the zip and save as \"<varName>\""],
            "SyntaxDetail": [{
                "Instruction": "ExtractFile \"<inputCompressedFile>\" into \"<outputDirectory>\" delete the zip and save as \"<varName>\""
            }]
        }, {
            "CreationDate": "2019-Dec-05",
            "Description": "Gets information about a file, given its full path. The possible attributes are CreationTime, LastAccessTime, LastWriteTime, CreationTimeUTC, LastAccessTimeUTC, LastWriteTimeUTC. This info will be saved in a new variable with the name of the selected attribute.",
            "Example": ["FileInfo LastAccessTime C:\\Users\\gilberto.isida\\Desktop\\log.txt\r", "FileInfo CreationTime C:\\Users\\gilberto.isida\\Downloads\\RPA\\archivo.xlsx\r"],
            "Name": "FileInfo",
            "Params": ["attribute", "path"],
            "ShortDescription": "Get file attributes.",
            "Syntax": ["FileInfo <attribute:CreationTime|LastAccessTime|LastWriteTime|CreationTimeUTC|LastAccessTimeUTC|LastWriteTimeUTC> <path>"],
            "SyntaxDetail": [{
                "Constants": [{
                    "Options": ["CreationTime", "LastAccessTime", "LastWriteTime", "CreationTimeUTC", "LastAccessTimeUTC", "LastWriteTimeUTC"],
                    "ParamName": "attribute"
                }],
                "Instruction": "FileInfo <attribute:CreationTime|LastAccessTime|LastWriteTime|CreationTimeUTC|LastAccessTimeUTC|LastWriteTimeUTC> <path>"
            }]
        }, {
            "CreationDate": "2018-Dec-03",
            "Description": "Get all file names inside a folder with a given path.",
            "Example": ["GetAllFiles in \"C:\\Users\\andres.cruz\\Documents\\Extractos\" and save as \"ExtractosBancarios\"\r", "GetAllFiles in \"C:\\Users\\andres.cruz\\Documents\\Extractos\\\" with extension \".txt\" and save as \"ExtractosProcesar\"\r", "GetAllFiles in \"C:\\Users\\andres.cruz\\Documents\\Extractos\\\" with exact extension \".txt\" and save as \"ExtractosProcesar\"\r"],
            "Name": "GetAllFiles",
            "Params": ["folderPath", "fileExtension", "objectName"],
            "ShortDescription": "Get all file names inside a folder with a given path. The first syntax will read files that start with that extension and read aditional variants of the extention (e,g. xls reads xls, xlsm, xlsx). \"Exact\" syntax will read the exact extension indicated.",
            "Syntax": ["GetAllFiles in \"<folderPath>\" with extension \"<fileExtension>\" and save as \"<objectName>\"", "GetAllFiles in \"<folderPath>\" with exact extension \"<fileExtension>\" and save as \"<objectName>\"", "GetAllFiles in \"<folderPath>\" and save as \"<objectName>\""],
            "SyntaxDetail": [{
                "Instruction": "GetAllFiles in \"<folderPath>\" with extension \"<fileExtension>\" and save as \"<objectName>\""
            }, {
                "Instruction": "GetAllFiles in \"<folderPath>\" with exact extension \"<fileExtension>\" and save as \"<objectName>\""
            }, {
                "Instruction": "GetAllFiles in \"<folderPath>\" and save as \"<objectName>\""
            }]
        }, {
            "CreationDate": "2018-Dec-20",
            "Description": "Get all folders names inside a folder with a given path.",
            "Example": ["GetAllFolderNames in \"C:\\Users\\andres.cruz\\Documents\\Extractos\" and save as CarpetasMeses\r"],
            "Name": "GetAllFolderNames",
            "Params": ["folderPath", "objectName"],
            "ShortDescription": "Get all folders names inside a folder with a given path.",
            "Syntax": ["GetAllFolderNames in \"<folderPath>\" and save as <objectName>"],
            "SyntaxDetail": [{
                "Instruction": "GetAllFolderNames in \"<folderPath>\" and save as <objectName>"
            }]
        }, {
            "CreationDate": "2020-Dec-11",
            "Description": "Reads all the images from the pdf file and saves them them in a given path naming them with numbers.",
            "Example": ["GetAllImages from the file \"C:\\Users\\andres.cruz\\Downloads\\Documentacion.pdf\" and save them in \"C:\\Users\\andres.cruz\\Desktop\\RPAImages\"\r"],
            "Name": "GetAllImages",
            "Params": ["filepath", "folderName"],
            "ShortDescription": "Read all the images from a PDF file and save them in the given path.",
            "Syntax": ["GetAllImages from the file \"<filepath>\" and save them in \"<folderName>\""],
            "SyntaxDetail": [{
                "Instruction": "GetAllImages from the file \"<filepath>\" and save them in \"<folderName>\""
            }]
        }, {
            "CreationDate": "2020-Apr-22",
            "Description": "Reads all the text from the indicated file (pdf, txt) as a list and saves it's value in the given variable. The separation character may be indicated if new line is not desired. [This function uses PDF Clown covered by LGPL Licence (library source code : http://www.pdfclown.org)]",
            "Example": ["GetAllLines from \"C:\\Users\\gilberto.isida\\Downloads\\userIDs.txt\" and save as \"newUsers\"\r", "GetAllLines from \"C:\\Users\\andres de la cruz\\Desktop\\Invoice.pdf\" and save as \"Invoice\"\r", "GetAllLines from \"C:\\Users\\gilberto.isida\\Downloads\\userIDs.txt\" and separate its value by \";\" and save as \"newUsers\" \r"],
            "Name": "GetAllLines",
            "Params": ["filepath", "varname", "separationChar"],
            "ShortDescription": "Read all the text from a file and save it in a variable.",
            "Syntax": ["GetAllLines from \"<filepath>\" and save as \"<varname>\"", "GetAllLines from the file \"<filepath>\" and save as \"<varname>\"", "GetAllLines from \"<filepath>\" and separate its value by \"<separationChar>\" and save as \"<varname>\""],
            "SyntaxDetail": [{
                "Instruction": "GetAllLines from \"<filepath>\" and save as \"<varname>\""
            }, {
                "Instruction": "GetAllLines from the file \"<filepath>\" and save as \"<varname>\""
            }, {
                "Instruction": "GetAllLines from \"<filepath>\" and separate its value by \"<separationChar>\" and save as \"<varname>\""
            }]
        }, {
            "CreationDate": "2020-Apr-21",
            "Description": "Reads all the text from the indicated file (pdf , txt) as one single string and save it's value in the given variable.",
            "Example": ["GetAllText from \"C:\\Users\\gilberto.isida\\Downloads\\userIDs.txt\" and save as \"newUsers\"\r", "GetAllText from the file \"C:\\Users\\andres.cruz\\Downloads\\IDs.txt\" and save as \"IDs\"\r"],
            "Name": "GetAllText",
            "Params": ["filepath", "varname"],
            "ShortDescription": "Read all the text from a file and save it in a variable.",
            "Syntax": ["GetAllText from \"<filepath>\" and save as \"<varname>\"", "GetAllText from the file \"<filepath>\" and save as \"<varname>\""],
            "SyntaxDetail": [{
                "Instruction": "GetAllText from \"<filepath>\" and save as \"<varname>\""
            }, {
                "Instruction": "GetAllText from the file \"<filepath>\" and save as \"<varname>\""
            }]
        }, {
            "CreationDate": "2020-Nov-08",
            "Description": "Downloads a file from an online URL and saves it to a given path.",
            "Example": ["GetFileFromURL \"https://some.server.com/Dir/Dir2/file.png\" and save file as \"C:/Users/gilberto.isida/Downloads/file.png\"\r", "GetFileFromURL {https://some.server.com/Dir/Dir2/file.png} and save as {C:/Users/gilberto.isida/Downloads/file.png}\r"],
            "Name": "GetFileFromURL",
            "Params": ["url", "localPath"],
            "ShortDescription": "Download a file from a URL.",
            "Syntax": ["GetFileFromURL \"<url>\" and save file as \"<localPath>\"", "GetFileFromURL {<url>} and save as {<localPath>}"],
            "SyntaxDetail": [{
                "Instruction": "GetFileFromURL \"<url>\" and save file as \"<localPath>\""
            }, {
                "Instruction": "GetFileFromURL {<url>} and save as {<localPath>}"
            }]
        }, {
            "CreationDate": "2018-Dec-03",
            "Description": "Get the Name af a file.",
            "Example": ["GetFileName from the file \"C:\\Users\\andres.cruz\\Documents\\Extractos.xlsx\" and save as \"ExtractosName\"\r"],
            "Name": "GetFileName",
            "Params": ["filePath", "varName"],
            "ShortDescription": "Get the Name af a file.",
            "Syntax": ["GetFileName from the file \"<filePath>\" and save as \"<varName>\""],
            "SyntaxDetail": [{
                "Instruction": "GetFileName from the file \"<filePath>\" and save as \"<varName>\""
            }]
        }, {
            "CreationDate": "2019-Aug-14",
            "Description": "Gets the size of a specific File in Bytes and saves it in a variable.",
            "Example": ["FileSize \"C:\\1012SAT\\Factura.pdf\" and save as \"FacturaSize\"\r", "GetFileSize \"C:\\1012SAT\\Factura.pdf\" and save as \"FacturaSize\"\r"],
            "Name": "GetFileSize",
            "Params": ["FilePathPlusName", "varName"],
            "ShortDescription": "Get the size of a File.",
            "Syntax": ["FileSize \"<FilePathPlusName>\" and save as \"<varName>\"", "GetFileSize \"<FilePathPlusName>\" and save as \"<varName>\""],
            "SyntaxDetail": [{
                "Instruction": "FileSize \"<FilePathPlusName>\" and save as \"<varName>\""
            }, {
                "Instruction": "GetFileSize \"<FilePathPlusName>\" and save as \"<varName>\""
            }]
        }, {
            "CreationDate": "2018-Sep-19",
            "Description": "Get the path of a specific file on a folder (test.txt, test (1).txt, test (2).txt ... etc) returning the full file path with the name of the file.[C:\\Users\\andres.cruz\\Downloads\\test (1).txt].\\n Wildcards * and ? can be used in FileName, regex is not supported. The resulting list can retrieve the last file modified or the last file ordered by name.",
            "Example": ["GetLastFileInTheFolder \"C:\\Users\\andres.cruz\\Downloads\\\" and save as \"LastFile\"\r", "GetLastFileInTheFolder \"C:\\Users\\andres.cruz\\Desktop\\\" and save as FileName\r", "GetLastFileInTheFolder \"C:\\Users\\andres.cruz\\Downloads\\\" ordered by name with the name \"Resumen_2021_05_*\" and save as UltimoMayo\r", "GetLastFileInTheFolder \"C:\\Users\\andres.cruz\\Downloads\\\" ordered by time with the name \"Resumen_2021_05_??_18_00.txt\" and save as UltimoMayo6Pm\r"],
            "Name": "GetLastFileInTheFolder",
            "Params": ["folderPath", "fileName", "orderOption", "fileNameVar"],
            "ShortDescription": "Get the path of a specific file on a folder.",
            "Syntax": ["GetLastFileInTheFolder \"<folderPath>\" with the name \"<fileName>\" and save as \"<fileNameVar>\"", "GetLastFileInTheFolder \"<folderPath>\" with the name \"<fileName>\" and save as <fileNameVar>", "GetLastFileInTheFolder \"<folderPath>\" ordered by <orderOption:time|name> with the name \"<fileName>\" and save as <fileNameVar>", "GetLastFileInTheFolder \"<folderPath>\" and save as \"<fileNameVar>\"", "GetLastFileInTheFolder \"<folderPath>\" and save as <fileNameVar>"],
            "SyntaxDetail": [{
                "Instruction": "GetLastFileInTheFolder \"<folderPath>\" with the name \"<fileName>\" and save as \"<fileNameVar>\""
            }, {
                "Instruction": "GetLastFileInTheFolder \"<folderPath>\" with the name \"<fileName>\" and save as <fileNameVar>"
            }, {
                "Constants": [{
                    "Options": ["time", "name"],
                    "ParamName": "orderOption"
                }],
                "Instruction": "GetLastFileInTheFolder \"<folderPath>\" ordered by <orderOption:time|name> with the name \"<fileName>\" and save as <fileNameVar>"
            }, {
                "Instruction": "GetLastFileInTheFolder \"<folderPath>\" and save as \"<fileNameVar>\""
            }, {
                "Instruction": "GetLastFileInTheFolder \"<folderPath>\" and save as <fileNameVar>"
            }]
        }, {
            "CreationDate": "2021-Jun-29",
            "Description": "Moves the file from InputFolder to OutputFolder with the given name, and saves it in the dictionaryVariablesHelper.vars.",
            "Example": ["MoveFile \"ejemplo.docx\" from the folder \"C:\\Datos\\Origen\" to the folder \"C:\\Datos\\Destino\" and save as Mivariable\r", "MoveFile \"ejemplo.docx\" from the folder \"C:\\Datos\\Origen\" to the folder \"C:\\Datos\\Destino\" and save as \"Mivariable\"\r"],
            "Name": "MoveFile",
            "Params": ["fileName", "inputFolder", "outputFolder", "variable"],
            "ShortDescription": "Move a file from one destination to another.",
            "Syntax": ["MoveFile \"<fileName>\" from the folder \"<inputFolder>\" to the folder \"<outputFolder>\" and save as <variable>"],
            "SyntaxDetail": [{
                "Instruction": "MoveFile \"<fileName>\" from the folder \"<inputFolder>\" to the folder \"<outputFolder>\" and save as <variable>"
            }]
        }, {
            "CreationDate": "2019-Dec-17",
            "Description": "Creates a new folder in a given Path, if it already exists the function will not generate an error.",
            "Example": ["NewFolder in \"C:\\\\SomeFolder\" with the name \"Temporal\"\r"],
            "Name": "NewFolder",
            "Params": ["path", "folderName"],
            "ShortDescription": "Create a new folder.",
            "Syntax": ["NewFolder in \"<path>\" with the name \"<folderName>\""],
            "SyntaxDetail": [{
                "Instruction": "NewFolder in \"<path>\" with the name \"<folderName>\""
            }]
        }, {
            "CreationDate": "2021-Mar-30",
            "Description": "Extracts a page of a PDF file and rasterizes it as PNG image to the desired location. If page input is not specified, only the first one will be extracted. Page number starts at 1.",
            "Example": ["PDFToImage file={C:\\Users\\gilberto.isida\\Documents\\file.pdf} output={C:\\Users\\gilberto.isida\\Pictures\\converted.png}\r", "PDFToImage file={C:\\Users\\gilberto.isida\\Documents\\file.pdf} page={3} output={C:\\Users\\gilberto.isida\\Pictures\\converted.png}\r"],
            "Name": "PDFToImage",
            "Params": ["inputFile", "outputFile", "pageNumber"],
            "ShortDescription": "Converts a PDF to image with PNG encoding.",
            "Syntax": ["PDFToImage file={<inputFile>} output={<outputFile>}", "PDFToImage file={<inputFile>} page={<pageNumber>} output={<outputFile>}"],
            "SyntaxDetail": [{
                "Instruction": "PDFToImage file={<inputFile>} output={<outputFile>}"
            }, {
                "Instruction": "PDFToImage file={<inputFile>} page={<pageNumber>} output={<outputFile>}"
            }]
        }, {
            "CreationDate": "2022-Sep-27",
            "Description": "Gets the number of pages in a given PDF file.",
            "Example": ["PDFTotalPages file={C:\\SomePath\\file.pdf} and save as totalPages\r"],
            "Name": "PDFTotalPages",
            "Params": ["inputFile", "variableName"],
            "ShortDescription": "Gets the number of pages in a PDF.",
            "Syntax": ["PDFTotalPages file={<inputFile>} and save as <variableName>"],
            "SyntaxDetail": [{
                "Instruction": "PDFTotalPages file={<inputFile>} and save as <variableName>"
            }]
        }, {
            "CreationDate": "2018-Oct-11",
            "Description": "Change the name of a file, and save the new path in a variable.",
            "Example": ["RenameFile \"C:\\Users\\andres.cruz\\Downloads\\001100.xlsx\" with \"Reporte.xlsx\" and save as \"fileRenamed\"\r", "RenameFile \"C:\\Users\\andres.cruz\\Downloads\\test.zip\" with \"C:\\Users\\andres.cruz\\Desktop\\TestReporte.xlsx\" and save as \"changed\"\r"],
            "Name": "RenameFile",
            "Params": ["folderPathPlusName", "FileName", "variable"],
            "ShortDescription": "Change the name of a file.",
            "Syntax": ["RenameFile \"<folderPathPlusName>\" with \"<fileName>\" and save as \"<variable>\""],
            "SyntaxDetail": [{
                "Instruction": "RenameFile \"<folderPathPlusName>\" with \"<fileName>\" and save as \"<variable>\""
            }]
        }, {
            "CreationDate": "2020-Apr-21",
            "Description": "Writes all the lines contained in a variable (of type LIST), to a file. It creates the file if it does not exist yet.",
            "Example": ["WriteAllLines var = \"username\" path = \"C:\\Users\\gilberto.isida\\Downloads\\file.txt\"\r", "WriteAllLines from the variable \"TicketList\" in the file \"C:\\Users\\andres.cruz\\Downloads\\Result.txt\"\r"],
            "Name": "WriteAllLines",
            "Params": ["variableName", "savePath"],
            "ShortDescription": "Writes all the lines contained in a list variable to a file.",
            "Syntax": ["WriteAllLines var=\"<variableName>\" path=\"<savePath>\"", "WriteAllLines from the variable \"<variableName>\" in the file \"<savePath>\""],
            "SyntaxDetail": [{
                "Instruction": "WriteAllLines var=\"<variableName>\" path=\"<savePath>\""
            }, {
                "Instruction": "WriteAllLines from the variable \"<variableName>\" in the file \"<savePath>\""
            }]
        }, {
            "CreationDate": "2020-Apr-21",
            "Description": "Writes all the text contained in a variable to a file. It creates the file if it does not exist yet.",
            "Example": ["WriteAllText from the variable \"UserNames\" in the file \"C:\\Users\\andres.cruz\\Downloads\\Users.txt\"\r", "WriteAllText from the variable \"IsonUserNames\" in the file \"C:\\Users\\andres.cruz\\Downloads\\Users.txt\" -isJSON\r"],
            "Name": "WriteAllText",
            "Params": ["varName", "savePath"],
            "ShortDescription": "Write all the text contained in a variable to a file.",
            "Syntax": ["WriteAllText from the variable \"<varName>\" in the file \"<savePath>\"", "WriteAllText from the variable \"<varName>\" in the file \"<savePath>\" -isJSON"],
            "SyntaxDetail": [{
                "Instruction": "WriteAllText from the variable \"<varName>\" in the file \"<savePath>\""
            }, {
                "Instruction": "WriteAllText from the variable \"<varName>\" in the file \"<savePath>\" -isJSON"
            }]
        }, {
            "CreationDate": "2020-Aug-03",
            "Description": "Allows to write all the text contained in a variable to a file without overwriting its content.  It creates the file if it does not exist.",
            "Example": ["WriteAndKeep from the variable \"<varName>\" in the file \"<savePath>\"\r"],
            "Name": "WriteAndKeep",
            "Params": ["varName", "savePath"],
            "ShortDescription": "Write the text in a variable to a file without overwriting its content.",
            "Syntax": ["WriteAndKeep from the variable \"<varName>\" in the file \"<savePath>\""],
            "SyntaxDetail": [{
                "Instruction": "WriteAndKeep from the variable \"<varName>\" in the file \"<savePath>\""
            }]
        }],
        "ID": 10,
        "Keyword": "File",
        "Name": "File Reader",
        "_FAdminKey": "File"
    },
    "Analytics": {
        "Browpet%20Reader": {
            "Click": {
                "20211022T09:47": {
                    "Date": "20211022T09:47",
                    "Rating": 0,
                    "User": "WkZsRo0arfTVCk6LCEM4XYwbdmH2"
                }
            },
            "CloseTab": {
                "20211022T09:47": {
                    "Date": "20211022T09:47",
                    "Rating": 5,
                    "User": "WkZsRo0arfTVCk6LCEM4XYwbdmH2"
                }
            }
        },
        "DB%20Reader": {
            "QueryToCsv": {
                "20211011T15:29": {
                    "Date": "20211011T15:29",
                    "Rating": 2,
                    "User": "Anonymus"
                }
            }
        },
        "Excel%20Reader": {
            "ApplyFormat": {
                "20210906T18:14": {
                    "Date": "20210906T18:14",
                    "Rating": 5,
                    "User": "Anonymus"
                }
            },
            "ChangeWSName": {
                "20210904T10:56": {
                    "Date": "20210904T10:56",
                    "Rating": 1,
                    "User": "Anonymus"
                }
            },
            "CopyPaste": {
                "20210902T15:01": {
                    "Date": "20210902T15:01",
                    "Rating": 4,
                    "User": "Anonymus"
                }
            },
            "NewWB": {
                "20210830T10:25": {
                    "Date": "20210830T10:25",
                    "Rating": 1,
                    "User": "Anonymus"
                }
            },
            "WriteList": {
                "20211105T10:44": {
                    "Date": "20211105T10:44",
                    "Rating": 1,
                    "User": "Medc9EwQoEgTMoL9kWwpswhGSs42"
                }
            },
            "WriteTable": {
                "20211105T10:46": {
                    "Date": "20211105T10:46",
                    "Rating": 1,
                    "User": "Medc9EwQoEgTMoL9kWwpswhGSs42"
                }
            }
        },
        "File%20Reader": {
            "GetAllLines": {
                "20211103T08:28": {
                    "Date": "20211103T08:28",
                    "Rating": 5,
                    "User": "Medc9EwQoEgTMoL9kWwpswhGSs42"
                }
            }
        },
        "Mix%20Reader": {
            "NewFolder": {
                "20211104T13:56": {
                    "Date": "20211104T13:56",
                    "Rating": 1,
                    "User": "Medc9EwQoEgTMoL9kWwpswhGSs42"
                }
            }
        }
    },
    "Authorized": ["mariano.hernandez@softtek.com", "ederr.garcia@softtek.com", "andres.cruz@softtek.com", "jorge.bohorquez@softtek.com", "alano.gonzalez@softtek.com", "robertoj.tovar@softtek.com", "alonso.suarez@softtek.com", "jorger.garcia@softtek.com", "erlik.corona@softtek.com", "alanm.gonzalez@softtek.com", "gilberto.isida@softtek.com", "rodrigo.gracia@softtek.com", "julio.garciaf@softtek.com", "heber.solis@softtek.com"],
    "LastUpdate": "2022-11-08T23:00:02.909095Z"
}